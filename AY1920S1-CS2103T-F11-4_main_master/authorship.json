[
  {
    "path": "README.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "\u003d NUStudy"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "image:https://travis-ci.org/AY1920S1-CS2103T-F11-4/main.svg?branch\u003dmaster[\"Build Status\", link\u003d\"https://travis-ci.org/AY1920S1-CS2103T-F11-4/main\"]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "* \u003c\u003cUserGuide#, User guide\u003e\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer guide\u003e\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "* \u003c\u003cAboutUs#, About\u003e\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "* \u003c\u003cContactUs#, Contact\u003e\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "*NUStudy* is an application for managing your lecture notes and flash cards,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "so you can _study and play at the same time_. All university members – students,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "lecturers, tutors, even research staff – can come together and share the"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "foundation of their existence for the greater good."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://openjfx.io/[JavaFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "* AddressBook-Level3, which this application is a fork of, was created by the National University of Singapore (NUS) https://se-education.org[SE-EDU]."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "* link:LICENSE[MIT licence]"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 12,
      "-": 18
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    archiveName \u003d \u0027nustudy.jar\u0027"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        \u0027site-name\u0027: \u0027NUStudy\u0027,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/AY1920S1-CS2103T-F11-4/main\u0027,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 4,
      "-": 125
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "NUStudy was developed by the following students. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "We are a team based in https://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "\u003d\u003d\u003d Jeremy Tan Jie Rui"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "image::parcly-taxel.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "{empty}[https://github.com/Parcly-Taxel[github]] [\u003c\u003cPortfolioParclyTaxel#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "Role: Main integrator, scheduling and tracking manager, Git expert +"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "Responsibilities: Implementing `Note` module (lecture notes)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "\u003d\u003d\u003d Lee Li Ying Irene"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "image::irene-lly.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "{empty}[https://github.com/irene-lly[github]]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "Role: Code Quality +"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "Responsibilities: Implementing the report feature"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "\u003d\u003d\u003d Shui Yao"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "image::shuiyao-sg.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "{empty}[https://github.com/shuiyao-sg[github]] [\u003c\u003cPortfolioShuiYao#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "Role: Team lead +"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "Responsibilities: Implementing the revision feature"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "\u003d\u003d\u003d Wang Xueting"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "image::shirleywangxt.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "{empty}[https://github.com/ShirleyWangxt[github]]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "Role: Testing, Co-maintainer of documentation +"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "Responsibilities: Implementing the difficulty feature"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "\u003d\u003d\u003d Zhang Dongjun"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "image::auxinnn.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "{empty}[https://github.com/Auxinnn[github]]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "Role: Deliverables and deadlines +"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "Responsibilities: Implementing `Question` module and the test feature"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 5,
      "shuiyao-sg": 22,
      "-": 29
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "* *Bug reports, suggestions*: Post in our https://github.com/AY1920S1-CS2103T-F11-4/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing*: We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "* *Email us* at `e0191785 [at] u.nus.edu`"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 2,
      "-": 5
    }
  },
  {
    "path": "docs/DevOps.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "\u003d NUStudy DevOps"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-F11-4/main/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "\u003d\u003d Build automation"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "\u003d\u003d Continuous integration"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "We use https://travis-ci.org/[Travis] to perform _continuous integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "\u003d\u003d Documentation previews"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "\u003d\u003d Making a release"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ".  Generate a jar file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "\u003d\u003d Managing dependencies"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "A project often depends on third-party libraries. For example,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "this project depends on the https://github.com/FasterXML/jackson[Jackson library]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "for JSON parsing. Managing these dependencies can be automated using Gradle."
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 12,
      "-": 30
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "\u003d NUStudy developer guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-F11-4/main/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cSettingUp#, here\u003e\u003e."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureDiagram.png[]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "The `.puml` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the \u003c\u003cUsingPlantUml#, Using PlantUML guide\u003e\u003e to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has two classes called link:{repoURL}/src/main/java/seedu/address/Main.java[`Main`] and link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureSequenceDiagram.png[]"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[]"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ".  `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeleteSequenceDiagram.png[]"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[]"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the Address Book data."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `Address Book`, which `Person` can reference. This would allow `Address Book` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "image:BetterModelClassDiagram.png[]"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[]"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the Address Book data in json format and read it back."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "Classes used by multiple components are in the `seedu.address.commons` package."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Undo/Redo feature"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Proposed Implementation"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedAddressBook`."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` -- Saves the current address book state in its history."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` -- Restores the previous address book state from its history."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` -- Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState0.png[]"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState1.png[]"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "Step 3. The user executes `add n/David ...` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState2.png[]"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState3.png[]"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial address book state, then there are no previous address book states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoSequenceDiagram.png[]"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone address book states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState4.png[]"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/David ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState5.png[]"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "image::CommitActivityDiagram.png[]"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of address book states."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedAddressBook`."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Data Encryption"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data encryption feature will be implemented}_"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDocumentation#, here\u003e\u003e."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cTesting#, here\u003e\u003e."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDevOps#, here\u003e\u003e."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "* has a need to manage a significant number of notes"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "* has a need to test contents of notes"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "* prefers desktop apps over other types"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "*Value proposition*: Revise more efficiently with spaced repetition and active recall"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "compared to a typical note-taking app"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "Priorities:"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "* High (must have) – `* * *`"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "* Medium (nice to have) – `* *`"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "* Low (unlikely to have) – `*`"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "|Priority|As a/an...|I want to...|So that I can...|Author"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "|`* *`|student|share and receive lecture content from others|my friends can share in the common knowledge, and my family can understand what I am studying|Jeremy"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "|`*`|student|annotate my lecture notes|I can go beyond the curriculum|Jeremy"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "|`* *`|module coordinator|brief my subordinates about study materials|the tutors/lecturers under my charge are teaching what they are supposed to teach|Jeremy"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "|`* *`|tutor|discuss the key points to remember from a tutorial|my students get as much out of their tutorials as possible|Jeremy"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "|`*`|quizmaster|quiz contestants about their knowledge using the app|the contestants can have as much fun as possible|Jeremy"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "|`* * *`|student|view my revision plan| be more clear on the big picture of my revision and check whatever is left to do when I forget|Shui Yao"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "|`* * *`|student|set a revision plan|I can be more organised in my revision and will not lose my focus|Shui Yao"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "|`* * *`|student|remove a revision task|I can remove accidentally added revision task or remove a revision task should there be a change of plan|Shui Yao"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "|`* *`|student|edit the revision task|I can modify the details of a particular revision task|Shui Yao"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "|`* *`|student|mark a task as done|I can update the status of my revision plan and have greater motivation to move on|Shui Yao"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "|`* *`|student|view unfinished tasks|I can have a easy overview of what I need to to next|Shui Yao"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "|`*`|student|view overdue tasks|I can re-schedule my revision and be more careful with the workload in my next planning|Shui Yao"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "|`* *`|student|get notified when a revision task is about to start|I can finish up whatever stuff at hand and get ready for revision|Shui Yao"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "|`* *`|student|disable notification|I will not be bothered in some important events|Shui Yao"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "|`* * *`|student|change the difficulty level of questions|I can customize the difficulty level of the questions as I progress along the time|Xueting"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "|`* * *`|student|find all the questions at a particular difficulty level|I can see how well I understand the subject content|Xueting"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "|`* *`|student|set a mix of different difficulty levels at exam mode|I can better simulate the real-time exams conditions|Xueting"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "|`* *`|student|get a statistics of the number of questions I have attempted at a difficulty level|I can see how often I have practiced for this subject|Xueting"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "|`* *`|student|get statistics of the accuracy level of the specific difficulty|I can visualise how well I have practiced for this subject|Xueting"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "|`*`|student|get statistics of the change of difficulty levels I have made to a question|I can understand my improvement in understanding the content|Xueting"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "|`* * *`|student|see how well I am able to answer questions for different topics/subjects|focus more on topics/subjects that I need to improve on|Irene"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "|`* * *`|student|check my past responses to different questions|compare with my current response and improve on it if necessary/check if I am making the same mistakes twice|Irene"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "|`* *`|student|have a graphical report of my progress|get an overview of my progress with a glimpse|Irene"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "|`* *`|student|check the questions that I have attempted for a specific time period|I can skip questions that I have already done during that time period|Irene"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "|`*`|student|get an overview to see the number of notes added for each topic/subject|I can see which topic/subject I need to make more notes on|Irene"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "|`* * *`|student|mark and store the questions I have made mistakes on|I can get a better understanding of which part I need to put more time to study|Dongjun"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "|`* * *`|student|take a series questions as a mock test before exam|I can refresh my memory on different modules before exam|Dongjun"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "|`* *`|student|find specific questions according to the keywords|I can filter the questions I want for different purposes|Dongjun"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "|`* *`|student|change the difficulty of my test|I can be better prepared for actual exam|Dongjun"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "|`*`|student|view all questions and answers stored|I can refer them as revision guide according to different subjects|Dongjun"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "(For all use cases below, the system is `NUStudy` and the actor is the `student`)"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "// tag::usecase[]"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "\u003d\u003d\u003d Use case: Create lecture note (Jeremy)"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "1. Student gives the command to add a lecture note – `addnote -t TITLE -c CONTENT`"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "2. Application shows a lecture note with the given title and contents to the user"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "3. Application also updates the lecture note list with the new note"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "* 1a. Student also gives `-i` in the command"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "** 1a1. Application brings up a file selection dialogue"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "** 1a2. Student selects the image they wish to include in the lecture note"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "** 1a3. Application accepts the image"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "* Use case resumes from step 2"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "* 1a2a. The selected file is not an image (.png, .jpg, .gif)"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "** 1a2a1. Application displays message about the supported file formats"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "** 1a2a2. Student selects a file again"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "** Repeat 1a2a1, 1a2a2 until a supported file format is selected"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "* Use case resumes from step 1a3"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "\u003d\u003d\u003d Use case: Delete lecture note (Jeremy)"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "1. Student gives the command to delete a lecture note – `deletenote INDEX`"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "2. Application deletes the note from the note list"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "* 1a. Student gives an out-of-range or non-numeric index"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "** 1a1. Application displays message showing in-range indices"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "** 1a2. Student re-enters the command"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "** Repeat 1a1 and 1a2 until a valid index is provided"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "* Use case resumes from step 2"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "// end::usecase[]"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "\u003d\u003d\u003d Use case: Add a revision task to revision plan (Shui Yao)"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "*Preconditions:* notes collections and question collections are not both empty"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "1. Student keys in revision task command and specifies the note set name or question set name he/she wants to add to revision plan, with starting date and starting time"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "2. NUStudy adds the task to revision plan"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "3. NUStudy informs the Student about successful addition of the task"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "* 1a. NUStudy detects that neither a note set or a question set is entered by Student"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "** 1a1. NUStudy requests for the correct input with a note set name or a question set name"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "** 1a2. Student enters correct input"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "** Steps 1a1 - 1a2 are repeated until the input is correct"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "* Use case resumes from Step 2"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "* 1b. NUStudy detects missing starting date or time"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "** 1b1. NUStudy requests for correct input with starting date and time"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "** 1b2. Student enters correct input following the format"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "** Steps 1b1 - 1b2 are repeated until getting a correct input with valid starting date and time"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "* Use case resumes from Step 2"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "* 1c. NUStudy detects invalid date or time"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "** 1c1. NUStudy requests for valid date and time"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "** 1c2. Student enters correct input with valid date and time"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "** Steps 1c1 - 1c2 are repeated until getting a correct input with valid date and time"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "* Use case resumes from Step 2"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "\u003d\u003d\u003d Use case: Delete a task from revision plan (Shui Yao)"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "1. Student requests to list revision plan"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "2. NUStudy lists the revision plan"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "3. Student specifies the index of the task in the revision plan list"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "4. NUStudy removes the task from the revision plan"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "5. NUStudy informs the Student about the successful removal of the task"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "* 1a. NUStudy detects that the revision plan has no tasks"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "** 1a1. NUStudy informs the Student that the revision plan is empty"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "* Use case ends"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "* 3a. NUStudy detects an index that is not in the revision plan"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "** 3a1. NUStudy requests for correct input with valid index"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "** 3a2. Student enters correct input with valid index"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "** Steps 3a1 - 3a2 are repeated until getting a valid index"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "* Use case resumes from Step 2"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "\u003d\u003d\u003d Use case: Clear the revision plan (Shui Yao)"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "1. Student clears the revision plan"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "2. NUStudy requests for confirmation"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "3. Student confirms the clear operation"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "4. NUStudy clears the revision plan"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "5. NUStudy informs the Student that the revision plan is successfully cleared"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "* 2a. Student disapprove the clear operation"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "** 2a1. NUStudy informs the Student of the cancellation of clear operation"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "* Use case ends"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "\u003d\u003d\u003d Use case: get statistics for subjects (Irene)"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "1. Student gives the command to get the statistics for a subject `stats s/SUBJECT [s/SUBJECT1] [s/SUBJECT2]...`"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "2. Application returns a piechart with number of questions answered correctly and incorrectly"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "* 1a. Student provides an invalid subject"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "** 1a1. Application will return a list of subjects that are in the database"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "** 1a2. Student will re-enter the command with a valid subject"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "* Use case resumes from step 2"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "* 1b. Student provides more than one subject"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "** 1b1. Application returns a piechart totaling the statistics of question answered correctly and incorrectly for all subjects as well as a list of the individual statistics for each subject"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "* Use case ends"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "\u003d\u003d\u003d Use case: get statistics for individual questions (Irene)"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "1. Student gives the command to get statistics for a question `stats INDEX`"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "2. Application returns past responses to the question, the subject and/or topic associated with the question and statistics of how well the question has been answered"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "* 1a. Student gives an out-of-range index"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "** 1a1. Application displays the range of questions available"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "** 1a2. Student re-enters the command"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "** Repeat 1a1 and 1a2 until a valid index is provided"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "* Use case resumes from step 2"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "\u003d\u003d\u003d Use case: Specify difficulty level of questions (Xueting)"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "1. Student specifies the difficulty level as the last tag while adding a questions - `add q/QUESTION a/ANSWER s/SUBJECT d/DIFFICULTY`"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "2. Application shows and stores the question with its difficulty level"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "* 1a. Student does not specify the difficulty level"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "** 1a1. Application shows an error message to require difficulty level input"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "** 1a2. Student inputs the difficulty level following the previous tags"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "** Repeat 1a1 and 1a2 until a difficulty level is provided"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "* Use case resumes from step 2"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "\u003d\u003d\u003d Use case: Edit difficulty level of a specific question (Xueting)"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "1. Student changes the difficulty level of a question - edit `-dif id/INDEX d/DIFFICULTY`"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "2. Application shows and stores the question with the updated difficulty level"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "* 1a. Student does not provide the updated difficulty level"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "** 1a1. Application shows an error message to require difficulty level update"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "** 1a2. Student inputs the new difficulty level"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "** Repeat 1a1 and 1a2 until a difficulty level is provided"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "* Use case resumes at step 2"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "* 1b. Student provides the same difficulty level as the previous one"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "** 1b1. Application shows a warning message indicating that the difficulty level is not updated and ask whether the user would like to proceed"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "** 1b2. Student chooses either to proceed with the original difficulty level or re-edit the difficulty level"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "* Use case resumes at step 2"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "* 1c. Student inputs an invalid (out of range or non-numeric) questions index"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "** 1c1. Application displays the range of valid question indices"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "** 1c2. Student re-enters the question index"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "** Repeat 1c1 and 1c2 until a valid index is provided"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "* Use case resumes at step 1"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "\u003d\u003d\u003d Use case: Get statistics for a difficulty level (Xueting)"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "1. Student gives the command to get the statistics of the number of questions attempted at the specific difficulty level for a subject stats - `-dif d/DIFFICULTY s/SUBJECT`"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "2. Application returns a bar chart which consists of the questions index and the number of attempts for this difficulty level"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "* 1a. Student does not provide the difficulty level or the subject after the -dif flag"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "** 1a1. Application shows an error message requesting the corresponding inputs"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "** 1a2. Student re-enter the necessary fields"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "** Repeat 1a1 and 1a2 until valid inputs are provided"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "* Use case resumes at step 2"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "* 1b. Student inputs invalid difficulty level or subject"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "** 1b1. Application displays a list of difficulty levels and subjects available"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "** 1b2. Student re-enter the necessary fields by choosing from the list"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "** Repeat 1b1 and 1b2 until valid inputs are provided"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "* Use case resumes at step 2"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "\u003d\u003d\u003d Use case: Delete an existing question (Dongjun)"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "1. Student gives the command to delete an existing question `delete INDEX`"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "2. Application shows the question being deleted"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "3. Application deletes the question indicated by the student from the database"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "* 1a. The index given by student is out of the range"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "** 1a1. Application shows the error and displays the number of questions stored"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "** 1a2. Student enters the valid index"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "* Use case resumes from step 1"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "\u003d\u003d\u003d Use case: Take a test (Dongjun)"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "1. Student gives the command to enter the test mode `test [n/NUMBER_OF_QUESTIONS] [d/DIFFICULTY] [s/SUBJECT]`"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "2. Application shows a question with difficulty and subject indicated"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "3. Application waits for the student to key in the answer"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "4. Student enters the answer"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "5. Application displays whether the input answer is correct or wrong"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "6. Repeat 2 - 5 until all questions are answered"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "* 1a. Student inputs the invalid test commands"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "** 1a1. Application returns the correct format for test command"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "** 1a2. Students enter the correct test command"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "* Use case resumes from step 1"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "* 2a. Student chooses to change the difficulty of questions by giving `change -dif DIFFICULTY`"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "** 2a1. The question set will change to a new difficulty"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "* Use case resumes from step 2"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "* 3a. Student chooses to skip current questions by giving `skip`"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "** Application skips this question and display the next question"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "* Use case resumes from step 2"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "* 3b. Student chooses to get the answer for current question by giving `show`"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "** 3b1. Application displays the answer and go to next question"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "* Use case resumes from step 2"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "* a. At any time, Student chooses to exit from the test"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "** a1. Student gives the command `quit`"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "** a2. Application exits from the test mode"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "* Use case ends"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "// tag::nfrglossary[]"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "\u003d\u003d Non-functional requirements"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ". Images must be copied into the application data, residing in a dedicated folder,"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "rather than merely linking to somewhere on the filesystem"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ". Export format of lecture notes and flash cards must be human-readable text"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ". Images must be referenced by pathnames with respect to the image folder"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "[[lecture-note]] Lecture note::"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "An object stored in the application model that includes a title, text content and optionally an image."
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "It is not quizzable."
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "// end::nfrglossary[]"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": ". Deleting a person while all persons are listed"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 77,
      "shuiyao-sg": 114,
      "Auxinnn": 70,
      "irene-lly": 41,
      "ShirleyWangxt": 79,
      "-": 370
    }
  },
  {
    "path": "docs/Documentation.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "\u003d Documenting NUStudy"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-F11-4/main/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Editing Diagrams"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingPlantUml#, UsingPlantUml.adoc\u003e\u003e to find out how to create and update the UML diagrams in the developer guide."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site-wide Documentation Settings"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/build.gradle[`build.gradle`] file specifies some project-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-name`"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "|The name of the website."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "If set, the name will be displayed near the top of the page."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-seedu`"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "|Define this attribute if the project is an official SE-EDU project."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "This will render the SE-EDU navigation bar at the top of the page, and add some SE-EDU-specific navigation items."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Per-file Documentation Settings"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Template"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "Modifying the template files in link:{repoURL}/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "The SE-EDU team does not provide support for modified template files."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 3,
      "-": 118
    }
  },
  {
    "path": "docs/SettingUp.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "\u003d NUStudy setup"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-F11-4/main/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `11`* or above"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "IntelliJ by default has Gradle and JavaFX plugins installed. +"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ". Run the `seedu.address.Main` and try a few commands"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting#,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to 999 to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure IntelliJ to check style-compliance as you write code."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "Set up Travis to perform continuous integration for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "When you are ready to start coding, we recommend that you get some sense of the overall design by reading about \u003c\u003cDeveloperGuide#Design-Architecture, our architecture\u003e\u003e."
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 7,
      "-": 57
    }
  },
  {
    "path": "docs/Testing.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "\u003d Testing NUStudy"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-F11-4/main/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "There are two ways to run tests."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean test` (Mac/Linux: `./gradlew clean test`)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "We have three types of tests:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ".  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.commons.StringUtilTest`"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ".  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ".  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: Keyboard and mouse movements are not simulated on macOS Mojave, resulting in GUI Tests failure.**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: From macOS Mojave onwards, applications without `Accessibility` permission cannot simulate certain keyboard and mouse movements."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Open `System Preferences`, click `Security and Privacy` -\u003e `Privacy` -\u003e `Accessibility`, and check the box beside `Intellij IDEA`."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".`Accessibility` permission is granted to `IntelliJ IDEA`"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "image::testfx-idea-accessibility-permissions.png[width\u003d\"600\"]"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 2,
      "-": 50
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "\u003d NUStudy user guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-F11-4/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "NUStudy is an application for managing two kinds of informational material:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "lecture notes and flash cards. Their primary purpose is preparing for exams"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "and tests in universities, but they can also be useful for refreshing memory,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "particularly after a module has ended (the reliance of some computing modules"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "on prior knowledge is rather heavy)."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "Most of the work is done through a command line; the GUI merely displays"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "the results. The overall appearance is similar to a simple note-taking client."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "\u003d\u003d Quickstart"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ".  Ensure you have Java 11+ installed."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ".  Download the latest `nustudy.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for your Address Book."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. Some commands you can try are"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "* `listnote`: lists all lecture notes"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "* `addnote t/Title c/Content`: adds a lecture note with title \"Title\" and contents \"Content\"."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "* `deletenote 1`: deletes the first lecture note"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "* `help`: open the help window"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "* `exit`: exits the app"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "* Items in square brackets are optional e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "* Parameters can be in any order e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "// tag::lecnote[]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "\u003d\u003d\u003d Lecture notes"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "\u003d\u003d\u003d\u003d Adding lecture notes: `addnote`"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "Adds a lecture note. The `i/` field, if provided, brings up a dialogue where an image can be chosen from"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "the file system; such an image will be displayed beside the note. +"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "Format: `addnote t/TITLE c/CONTENT [i/]`"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "\u003d\u003d\u003d\u003d Editing lecture notes: `editnote`"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "Edits an existing lecture note. Providing `i/` brings up the image selection dialogue, like `addnote`;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "this can be used to change the image. At least one of `t/`, `c/` and `i/` must be provided."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "The index must be between 1 and the number of notes and flashcards combined, inclusive. +"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "Format: `editnote INDEX [t/TITLE] [c/CONTENT] [i/]`"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "\u003d\u003d\u003d\u003d Viewing lecture notes: `findnote`"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "Find lecture notes whose title contains every given word (space-separated, ignoring case),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "and display them. +"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "Format: `findnote WORD [WORD]…`"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "\u003d\u003d\u003d\u003d Listing all lecture notes: `listnote`"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "Simply show all lecture notes. +"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "Format: `listnote`"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "\u003d\u003d\u003d\u003d Deleting lecture notes: `deletenote`"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "Delete the lecture note with the given index, which follows the same restrictions as with `editnote`. +"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "Format: `deletenote INDEX`"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "\u003d\u003d\u003d\u003d Clearing all lecture notes: `clearnote`"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "Clear all lecture notes. This does not affect quiz questions, but may affect revision tasks linked"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "to the cleared notes. +"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "Format: `clearnote`"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "// end::lecnote[]"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "\u003d\u003d\u003d Questions"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "NUStudy can also store different sets of questions and answers;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "at your command, the system will prompt you to answer those questions."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "\u003d\u003d\u003d\u003d Adding Questions : `addq`"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "Adds a question and its answer. +"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "Format: `addq q/QUESTION a/ANSWER s/SUBJECT d/DIFFICULTY`"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "\u003d\u003d\u003d\u003d Listing all questions: `listq`"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "Shows a list of questions. +"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "Format: `listq`"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "\u003d\u003d\u003d\u003d Listing all questions with answers: `listq -all`"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "Shows a list of questions and their corresponding answers. +"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "Format: `listq -all`"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "\u003d\u003d\u003d\u003d Editing a question: `editq`"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "Edits the fields of an existing question. +"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "Format: `editq INDEX [q/QUESTION] [a/ANSWER] [d/DIFFICULTY] [s/SUBJECT]`"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "* Edits the question at the specified `INDEX`. The index refers to the index number shown in the displayed question list. The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "* When editing tags, the existing tags of the question will be removed i.e adding of tags is not cumulative."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "\u003d\u003d\u003d\u003d Locating questions by keyword: `findq`"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "Finds questions containing the keyword. +"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "Format: `findq KEYWORD [MORE KEYWORDS]`"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "\u003d\u003d\u003d\u003d Deleting a question: `deleteq`"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "Deletes the specific question at the specified INDEX and its answer from the list. +"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "Format: `deleteq INDEX`"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "* Deletes the question at the specified `INDEX`."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "* The index refers to the index number shown in the displayed question list."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "\u003d\u003d\u003d\u003d Find difficulty: `difficulty`"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "Views the list of all questions with a specific difficulty. +"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "Format: `difficulty d/DIFFICULTY`"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "\u003d\u003d\u003d\u003d Find difficulty within a subject: `difficulty -s`"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "Views the list of questions of a specified subject with a specific difficulty. +"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "Format: `difficulty -s s/SUBJECT d/DIFFICULTY`"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "\u003d\u003d\u003d Quiz mode"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "There is a built-in Test mode in NUStudy for you to take a revision test based on questions and answers input by you."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "\u003d\u003d\u003d\u003d Enter quiz mode : `quiz`"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "Enters quiz mode for you to answer questions. +"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "Format: `quiz [n/NUMBER_OF_QUESTIONS] [d/DIFFICULTY] [s/SUBJECT]`"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "\u003d\u003d\u003d\u003d Answer the quiz question : `type answer` +"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "Answers the specified question. +"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "Format: `INDEX:ANSWER`"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "\u003d\u003d\u003d\u003d Change the difficulty: : `change -dif`"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "Changes the level of difficulty of questions. +"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "Format: `change -dif d/DIFFICULTY`"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "\u003d\u003d\u003d\u003d Set mixed difficulty : `mix -dif`"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "Set the exam with mixed levels of difficulty, minimum of two levels. +"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "Format: +"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "`mix -dif [d/DIFFICULTY1] [n/NUMBER1] [d/DIFFICULTY2] [n/NUMBER2] [d/DIFFICULTY3] [n/NUMBER3]...` +"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "`mix -dif all n/NUMBER`"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "\u003d\u003d\u003d\u003d Change the subject : `change -s`"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "Changes the subject of questions. +"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "Format: `change -s SUBJECT [MORE_SUBJECTS]`"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "\u003d\u003d\u003d\u003d Show an answer : `show`"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "Shows an answer for a question with specific index. +"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "Format: `show INDEX`"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "\u003d\u003d\u003d\u003d Mark a question: `mark`"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "Marks the current question to a special list. +"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "Format: `mark`"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "\u003d\u003d\u003d\u003d Exit test mode : `quit`"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "Exits from the quiz mode. +"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "Format: `quit`"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "\u003d\u003d\u003d Get statistics"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "\u003d\u003d\u003d\u003d Get statistics for subjects : `stats`"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "Returns a pie chart of the number of questions that have been answered correctly and incorrectly."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "You can choose to only get the statistics for a difficulty level by adding an optional `d/`."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "You can even get the combined statistics of more than one subject. +"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "Format: `stats s/SUBJECT [d/DIFFICULTY] [s/SUBJECT1] [s/SUBJECT2]...`"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "\u003d\u003d\u003d\u003d Get questions with correct/incorrect answers: `questions`"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "Gets all questions that have been answered correctly/incorrectly for a particular subject by using `-c/-i` respectively."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "Either one of `-c` or `-i` must be used."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "You can also choose to see past answers to the questions by adding an optional `-a`. +"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "Format: `questions s/SUBJECT [-c] [-i] [-a]`"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "\u003d\u003d\u003d\u003d Get a report for individual questions: `report`"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "Returns a report of how well you have answered a particular question,"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "the number of times the question has been attempted and the past answers to the question. +"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "Format: `report INDEX`"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "\u003d\u003d\u003d\u003d Get overview of lecture notes: `overview -ln`"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "Gets an overview of the types of notes that have been added into the app."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "A stacked bar graph, sorted by subjects will be returned. +"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "Format: `overview -ln`"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "\u003d\u003d\u003d\u003d Get overview of questions attempted: `overview -q`"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "Gets an overview of the types of questions that have been attempted overall."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "A stacked bar graph, sorted by subjects will be returned. +"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "Format: `overview -q [dt/START_DATE] [dt/END_DATE]`"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "\u003d\u003d\u003d Revision tasks"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "\u003d\u003d\u003d\u003d View revision tasks: `rlist`"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "Displays the revision task list +"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "Format: `rlist`"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "\u003d\u003d\u003d\u003d Add revision task: `radd`"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "Adds an item (to-do) to the current revision task list +"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "Format: +"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "`radd t/TITLE_OF_NOTE dt/START_DATE tm/START_TIME` +"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "\u003d\u003d\u003d\u003d Remove revision task: `rdelete`"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "Removes the specified revision task from current list +"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "Format: `rdelete INDEX`"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "\u003d\u003d\u003d\u003d Clear current revision plan: `rclear`"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "Deletes all revision tasks"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "Format: `rclear`"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "\u003d\u003d\u003d\u003d Edit revision task: `redit`"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "Edits the specified revision task"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "Format: `redit INDEX`"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "\u003d\u003d\u003d\u003d Label the revision task as important: `rimpt`"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "Format: `rimpt INDEX`"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "\u003d\u003d\u003d\u003d Mark the revision task as done: `rdone`"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "Format: `rdone INDEX`"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "\u003d\u003d\u003d\u003d View incomplete revision task: `rndone`"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "Displays the list of revision tasks that are yet to be completed"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "Format: `rndone`"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "\u003d\u003d\u003d\u003d View overdue revision tasks: `overdue`"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "Format: `roverdue`"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "\u003d\u003d\u003d\u003d Enable push notification: `notify -e`"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "Format: `notify -e [-A] [INDEX]`"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "\u003d\u003d\u003d\u003d Disable push notification: `notify -d`"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "Format: `notify -d [-A] [INDEX]`"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "\u003d\u003d\u003d Auto-complete feature `[coming in v2.0]`"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "Returns suggestions when you are typing commands."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "\u003d\u003d\u003d Set a timer for test mode `[coming in v2.0]`"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "The student sets a time limit for the test mode. The app will exit test mode once the time ends."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "\u003d\u003d\u003d Share notes and questions with other users `[coming in v2.0]`"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "The student shares notes and questions with other students with Internet connection."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "\u003d\u003d\u003d Login using email and password `[coming in v2.0]`"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "The student can register and login to the application using their email and password."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "// tag::lngroup[]"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "\u003d\u003d\u003d Lecture note grouping suggestions `[coming in v2.0]`"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "NUStudy will intelligently suggest groupings of lecture notes based on their content."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "// end::lngroup[]"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Address Book folder."
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 66,
      "shuiyao-sg": 36,
      "Auxinnn": 34,
      "irene-lly": 26,
      "ShirleyWangxt": 26,
      "-": 97
    }
  },
  {
    "path": "docs/UsingCheckstyle.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Using Checkstyle-IDEA"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Configuring Checkstyle-IDEA"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ". Install the Checkstyle-IDEA plugin by going to `File` \u003e `Settings` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS). +"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Select `Plugins`, press `Browse Repository`, and find the plugin. +"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Restart the IDE to complete the installation."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `File` \u003e `Settings...` \u003e `Other Settings` \u003e `Checkstyle`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ". Set `Scan Scope`  to `Only Java sources (including tests)`, so that the plugin will run checkstyle for our test source codes as well"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ". Ensure that the `Checkstyle version` is set to `8.1`. This is the same version that we are using inside Gradle, so that you won\u0027t get any errors due to version incompatibility"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * If `Checkstyle version` is not set to `8.1`, set it to version `8.1` and click `Apply`"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "image::checkstyle-idea-scan-scope.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ". Click the plus sign under `Configuration File`"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ". Enter an arbitrary description"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Use a local Checkstyle file`"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ". Use the checkstyle configuration file found at `config/checkstyle/checkstyle.xml`"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Next` \u003e `Finish`"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ". Mark `Active` for the newly imported check configuration"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "image::checkstyle-idea-configuration.png[width\u003d\"700\"]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK`"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Troubleshooting Checkstyle-IDEA"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: When importing `checkstyle.xml`, Checkstyle-IDEA plugin complains that `The Checkstyle rules file could not be parsed. ... The file has been blacklisted for 60s.`**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: `checkstyle.xml` is written for a particular version, but the plugin was not configured to the correct version."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Ensure that you have selected the correct `Checkstyle version` that matches the version in `build.gradle` and have clicked `Apply`, as `checkstyle.xml` is written for Gradle\u0027s checkstyle."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: After setting up `checkstyle.xml`, Checkstyle-IDEA plugin does not seem to highlight the errors / real-time scanning seems broken.**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: The plugin may not immediately run after setting it up."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Restart the IDE."
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 1,
      "-": 41
    }
  },
  {
    "path": "docs/UsingGradle.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Using Gradle"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "https://gradle.org/[Gradle] is a build automation tool. It can automate build-related tasks such as"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "* Running tests"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "* Managing library dependencies"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "* Analyzing code for style compliance"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "The gradle configuration for this project is defined in the _build script_ link:../build.gradle[`build.gradle`]."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "To learn more about gradle build scripts, refer https://docs.gradle.org/current/userguide/tutorial_using_tasks.html[Build Scripts Basics]."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Running Gradle Commands"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "To run a Gradle command, open a command window on the project folder and enter the Gradle command. Gradle commands look like this:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* On Windows: `gradlew \u003ctask1\u003e \u003ctask2\u003e ...` e.g. `gradlew clean test`"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "* On Mac/Linux: `./gradlew \u003ctask1\u003e \u003ctask2\u003e...` e.g."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "`./gradlew clean test`"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "If you do not specify any tasks, Gradlew will run the default tasks `clean` and `test`."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Cleaning the Project"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "* *`clean`* +"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the files created during the previous build tasks (e.g. files in the `build` folder). e.g. `./gradlew clean`"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "*`clean` to force Gradle to execute a task*: +"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "When running a Gradle task, Gradle will try to figure out if the task needs running at all. If Gradle determines that the output of the task will be same as the previous time, it will not run the task. For example, it will not build the JAR file again if the relevant source files have not changed since the last time the JAR file was built. If we want to force Gradle to run a task, we can combine that task with `clean`. Once the build files have been `clean` ed, Gradle has no way to determine if the output will be same as before, so it will be forced to execute the task."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Creating the JAR file"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "* *`shadowJar`* +"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "Creates `nustudy.jar` in the `build/jar` folder, _if the current file is outdated_. +"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `./gradlew shadowJar`"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "To force Gradle to create the JAR file even if the current one is up-to-date, you can \u0027`clean`\u0027 first. +"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `./gradlew clean shadowJar`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "*Why do we create a fat JAR?* If we package only our own class files into the JAR file, it will not work properly unless the user has all the other JAR files (i.e. third party libraries) our classes depend on, which is rather inconvenient. Therefore, we package all dependencies into a single JAR files, creating what is also known as a _fat_ JAR file. To create a fat JAR file, we use the Gradle plugin https://github.com/johnrengelman/shadow[shadow jar]."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Rendering AsciiDoc files"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "* **`asciidoctor`** +"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "Converts AsciiDoc files in `docs` to HTML format. Generated HTML files can be found in `build/docs`."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "* **`deployOfflineDocs`** +"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "Updates the offline user guide, and its associated files, used by the Help window in the application. Deployed HTML files and images can be found in `src/main/resources/docs`."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Running the application"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "* *`run`* +"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Builds and runs the application."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "* *`runShadow`* +"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "Builds the application as a fat JAR, and then runs it."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Running code style checks"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "* **`checkstyleMain`** +"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "Runs the code style check for the main code base"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "* **`checkstyleTest`** +"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "Runs the code style check for the test code base"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "The set of code style rules implemented can be found in `config/checkstyle/checkstyle.xml`. To enable _exceptions_ to code styles, add in the comment `//CODESTYLE.OFF: RuleName` at the start of the section and `//CODESTYLE.ON: RuleName` at the end of the section."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "* **`test`** +"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "Runs all tests."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "Here are some examples:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "* `./gradlew test` -- Runs all tests"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "* `./gradlew clean test` -- Cleans the project and runs tests"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Updating Dependencies"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to run these Gradle tasks manually as they are called automatically by other relevant Gradle tasks."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "* **`compileJava`** +"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "Checks whether the project has the required dependencies to compile and run the main program, and download any missing dependencies before compiling the classes. +"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "See `build.gradle` -\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "`allprojects` -\u003e `dependencies` -\u003e `compile` for the list of dependencies required."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "* **`compileTestJava`** +"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "Checks whether the project has the required dependencies to perform testing, and download any missing dependencies before compiling the test classes. +"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "See `build.gradle` -\u003e `allprojects` -\u003e `dependencies` -\u003e `testCompile` for the list of dependencies required."
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 2,
      "-": 97
    }
  },
  {
    "path": "docs/UsingTravis.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Travis CI"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "https://travis-ci.org/[Travis CI] is a _Continuous Integration_ platform for GitHub projects."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Travis CI can run the projects\u0027 tests automatically whenever new code is pushed to the repo. This ensures that existing functionality and features have not been broken by the changes."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "The current Travis CI set up performs the following things whenever someone push code to the repo:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "* Runs the `./gradlew clean test -i` command (see \u003c\u003cUsingGradle#, UsingGradle\u003e\u003e for more details on what this command means)."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "* Renders documentation from asciidoc to html and automatically publishes them using GitHub Pages."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "* Runs additional link:#repository-wide-checks[repository-wide checks]."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "If you would like to customise your travis build further, you can learn more about Travis from https://docs.travis-ci.com/[Travis CI Documentation]."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up Travis CI"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ".  Fork the repo to your own organization."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to https://travis-ci.org/ and click `Sign in with GitHub`, then enter your GitHub account details if needed."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "image:signing_in.png[Signing into Travis CI]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".  Head to the https://travis-ci.org/profile[Accounts] page, and find the switch for the forked repository."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "* If the organization is not shown, click `Review and add` as shown below:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "image:review_and_add.png[Review and add]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "This should bring you to a GitHub page that manages the access of third-party applications. Depending on whether you are the owner of the repository, you can either grant access"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "image:grant_access.png[Grant Access]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "or request access"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "image:request_access.png[Request Access]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "to Travis CI so that it can access your commits and build your code."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "* If repository cannot be found, click `Sync account`"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ".  Activate the switch."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "image:flick_repository_switch.png[Activate the switch]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ".  This repo comes with a link:../.travis.yml[`.travis.yml`] that tells Travis what to do. So there is no need for you to create one yourself."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ".  To see the CI in action, push a commit to the master branch!"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* Go to the repository and see the pushed commit. There should be an icon which will link you to the Travis build."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "image:build_pending.png[Commit build]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "* As the build is run on a provided remote machine, we can only examine the logs it produces:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "image:travis_build.png[Travis build]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the link to the \u0027build status\u0027 badge at the top of the `README.adoc` to point to the build status of your own repo."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Enabling auto-publishing of documentation"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure that you have followed the steps above to set up Travis CI."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ".  On GitHub, create a new user account and give this account collaborator and admin access to the repo. +"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "   Using this account, generate a personal access token https://github.com/settings/tokens/new[here]."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Personal access tokens are like passwords so make sure you keep them secret! If the personal access token is leaked, please delete it and generate a new one."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "We use a new user account to generate the token for team projects to prevent team members from gaining access to other team members\u0027 repos. +"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "If you are the only one with write access to the repo, you can use your own account to generate the token."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "--"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "* Add a description for the token. (e.g. `Travis CI - deploy docs to gh-pages`)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "* Check the `public_repo` checkbox."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "* Click `Generate Token` and copy your new personal access token."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "--"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "We will use this token to grant Travis access to the repo."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "image:generate_token.png[Generate token]"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ".  Head to the https://travis-ci.org/profile[Accounts] page, and find the switch for the forked repository."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "image:flick_repository_switch.png[Activate the switch]"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ".  Click on the settings button next to the switch. In the Environment Variables section, add a new environment variable with"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "--"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "* name: `GITHUB_TOKEN`"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "* value: personal access token copied in step 1"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "* Display value in build log: `OFF`"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "--"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "image:travis_add_token.png[Travis add token]"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "*Make sure you set `Display value in build log` to `OFF`.* +"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "Otherwise, other people will be able to see the personal access token and thus have access this repo. +"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "Similarly, make sure you *do not print `$GITHUB_TOKEN` to the logs* in Travis scripts as the logs are viewable by the public."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ".  Now, whenever there\u0027s a new commit to master branch, Travis will push the latest documentation to gh-pages branch."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "**To verify that it works,**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ".  Trigger Travis to regenerate documentation. To do so, you need to push a new commit to the master branch of the fork. +"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "   Suggested change: Remove the codacy badge from `README`."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ".  Wait for Travis CI to finish running the build on your new commit. You should see your `README` file displayed."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Repository-wide checks"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "In addition to running Gradle checks, we also configure Travis CI to run some repository-wide checks. Unlike the Gradle checks which only cover files used in the build process, these repository-wide checks cover _all_ files in the repository. They check for repository rules which are hard to enforce on development machines such as line ending requirements."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "These checks are implemented as POSIX shell scripts, and thus can only be run on POSIX-compliant operating systems such as macOS and Linux. To run all checks locally on these operating systems, execute the following in the repository root directory:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "[source,shell]"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "./config/travis/run-checks.sh"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "Any warnings or errors will be printed out to the console."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Implementing new checks"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "Checks are implemented as executable `check-*` scripts within the `config/travis/` directory. The `run-checks.sh` script will automatically pick up and run files named as such."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "Check scripts should print out errors in the following format:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "...."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "SEVERITY:FILENAME:LINE: MESSAGE"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "...."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "where `SEVERITY` is either `ERROR` or `WARN`, `FILENAME` is the path to the file relative to the current directory, `LINE` is the line of the file where the error occurred and `MESSAGE` is the message explaining the error."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "Check scripts must exit with a non-zero exit code if any errors occur."
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 2,
      "-": 130
    }
  },
  {
    "path": "docs/team/PortfolioParclyTaxel.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "\u003d NUStudy project portfolio for Jeremy Tan (Parcly-Taxel)"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "As part of the CS2103 Software Engineering module at the National University of Singapore,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "I was part of a team of five tasked to develop an application from https://github.com/nus-cs2103-AY1920S1/addressbook-level3[a given Java"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "address book application], which will be called AB3 in the rest of the portfolio."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "We chose to morph it into NUStudy, an application for"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "managing lecture notes, questions and revision tasks -- all three things pertinent to the"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "average university student, regardless of location. Like the original, it has a command line"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "as its main method of interaction and a JavaFX GUI for display. It has around 5000 lines of code."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "This portfolio showcases my contributions to NUStudy: implementing the lecture notes by"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "retooling the existing _Person_ class, related documentation in the user and developer guides"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "and management of the Git repository surrounding NUStudy. It also showcases my technical writing skills"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "and my ability to explain complicated enhancements or modifications to the uninitiated person."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "In this portfolio `monospace` indicates command-line input (commands, parameters, etc.)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "and _italics_ mark class names. Pull requests and issues will be marked solely"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "by their numbers and a # sign (e.g. https://github.com/AY1920S1-CS2103T-F11-4/main/issues/1[#1]);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "unless otherwise specified they refer to NUStudy."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "This is a brief description of my contributions to NUStudy, to code, documentation"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "and project management. These contributions show my ability to not only write good code,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "but also manage and synthesise team members\u0027 varying output into a coherent whole."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "* I was responsible for **implementing lecture notes** (starting from https://github.com/AY1920S1-CS2103T-F11-4/main/pull/34[#34])."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "These are simple items with a title, some content and optionally an image. For this I modified the existing"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "_Person_ class in the original address book application and its associated commands (_AddCommand_, _EditCommand_, etc.)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "-- I did not have to make any new classes."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "** Lecture notes are the primary source of a student\u0027s acquired knowledge in university, yet they come in many formats."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "Having a unified appearance helps the student understand the content of lecture notes better, by removing"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "unnecessary markup and distracting styles."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "** While adding this feature I also refactored all other code throughout the application to use names relevant to"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "lecture notes. This helped my teammates add their own features, setting an example for them to follow."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "* Minor enhancements, enhancements to existing features: _fill in here_"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "* I enforced a style for the user and developer guides and wrote several of their key sections,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "such as the user guide\u0027s introduction and the developer guide\u0027s non-functional requirements."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "See https://github.com/AY1920S1-CS2103T-F11-4/main/pull/21[#21] and https://github.com/AY1920S1-CS2103T-F11-4/main/pull/22[#22]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "for examples."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "* I was the **lead integrator** for NUStudy:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "** Managed all four releases (v1.1 to v1.4) on GitHub"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "** Set up Travis and Netlify for the project, enabling continuous integration and previews of documentation"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "** Resolved merge conflicts for teammates\u0027 pull requests (see https://github.com/AY1920S1-CS2103T-F11-4/main/pull/44[#44] for an example)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "** Attached milestones and labels to issues and pull requests where the original authors failed to specify them"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "** Before v1.2, the only person who could merge pull requests"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "* I contributed to https://github.com/nus-cs2103-AY1920S1/forum[forum] discussions, both as an answerer"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "(https://github.com/nus-cs2103-AY1920S1/forum/issues/88[#88], https://github.com/nus-cs2103-AY1920S1/forum/issues/106[#106]) and asker"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "(https://github.com/nus-cs2103-AY1920S1/forum/issues/68[#68], https://github.com/nus-cs2103-AY1920S1/forum/issues/100[#100])."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "* I reviewed the following pull requests non-trivially, among others: https://github.com/AY1920S1-CS2103T-F11-4/main/pull/40[#40],"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "https://github.com/AY1920S1-CS2103T-F11-4/main/pull/49[#49], https://github.com/AY1920S1-CS2103T-F11-4/main/pull/53[#53]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "*Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "\u003d\u003d User guide contributions"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "Our application\u0027s user guide had to be updated with the new features we added in code."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "The sections below are what I wrote for my features, demonstrating my ability to write"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "clear, concise end-user documentation."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "include::../UserGuide.adoc[tag\u003dlecnote]"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "include::../UserGuide.adoc[tag\u003dlngroup]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "In addition, I also harmonised the layout of the user guide and"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "formatted other team members\u0027 contributions to said guide in a common manner."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "\u003d\u003d Developer guide contributions"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "Like other projects in CS2103, there is the expectation that future developers could"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "build on NUStudy. Thus we also updated the developer guide; below are my principal contributions to it,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "showcasing three aspects: my ability to write technical documentation, the complexity of what"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "I contributed in code and my proficiency in using diagrams to explain my work."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dusecase]"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dnfrglossary]"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 88
    }
  },
  {
    "path": "docs/team/PortfolioShuiYao.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "\u003d NUStudy project portfolio for Shui Yao (shuiyao-sg)"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "\u003d\u003d User guide contributions"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "\u003d\u003d Developer guide contributions"
      }
    ],
    "authorContributionMap": {
      "shuiyao-sg": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 2, 0, false);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing NUStudy ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * Returns a {@code ModelManager} with {@code storage} and {@code userPrefs} data. \u003cbr\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * Sample data will be used instead if {@code storage}\u0027s data is not found;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * nothing will be used instead if errors occur when reading."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook initialData;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with sample data\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting from empty\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting from empty\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting from empty\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        logger.info(\"Starting NUStudy \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping NUStudy ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 11,
      "-": 172
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/LogsCenter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    private static final String LOG_FILE \u003d \"nustudy.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 1,
      "-": 111
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": " * Container for user-visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public static final String MESSAGE_INVALID_NOTE_DISPLAYED_INDEX \u003d \"The lecture note index provided is invalid\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public static final String MESSAGE_NOTES_LISTED_OVERVIEW \u003d \"%1$d notes listed!\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public static final String MESSAGE_INVALID_QUESTION_DISPLAYED_INDEX \u003d \"The question index provided is invalid\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public static final String MESSAGE_QUESTIONS_LISTED_OVERVIEW \u003d \"%1$d questions listed!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public static final String MESSAGE_INVALID_QUIZ_QUESTION_DISPLAYED_INDEX \u003d \"The question index provided is invalid\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public static final String MESSAGE_INVALID_TASK_DISPLAYED_INDEX \u003d \"The task index provided is invalid\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 3,
      "shuiyao-sg": 1,
      "Auxinnn": 1,
      "ShirleyWangxt": 2,
      "-": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import javafx.scene.chart.PieChart;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.model.question.Question;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.model.statistics.TempStatsQnsModel;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the AddressBook."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.model.Model#getAddressBook()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of lecture notes */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    ObservableList\u003cNote\u003e getFilteredNoteList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     * Returns an unmodifiable view of the pie chart data."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    ObservableList\u003cPieChart.Data\u003e getStatsChartData();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    ObservableList\u003cTempStatsQnsModel\u003e getStatsQnsList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     * Returns the total number of quiz questions done."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    int getTotalQuestionsDone();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of questions */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    ObservableList\u003cQuestion\u003e getFilteredQuestionList();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * Returns an unmodifiable view of the filtered list of quiz questions."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    ObservableList\u003cQuestion\u003e getFilteredQuizQuestionList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    ObservableList\u003cTask\u003e getFilteredTaskList();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 3,
      "shuiyao-sg": 3,
      "Auxinnn": 4,
      "irene-lly": 14,
      "ShirleyWangxt": 4,
      "-": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import javafx.scene.chart.PieChart;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.AddressBookParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.logic.parser.quiz.QuizParser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.model.question.Question;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.model.statistics.TempStatsQnsModel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    private static boolean isQuiz \u003d false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser addressBookParser;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    private final QuizParser quizParser;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookParser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        quizParser \u003d new QuizParser();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        if (!isQuiz) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            if (commandResult.isShowStats()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                return commandResult;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            logger.info(\"----------------[USER INPUT][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            Command command \u003d quizParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBook();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public ObservableList\u003cNote\u003e getFilteredNoteList() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        return model.getFilteredNoteList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public ObservableList\u003cPieChart.Data\u003e getStatsChartData() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        return model.getStatsChartData();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public ObservableList\u003cTempStatsQnsModel\u003e getStatsQnsList() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        return model.getStatsQnsList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public int getTotalQuestionsDone() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        return model.getTotalQuestionsDone();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public ObservableList\u003cQuestion\u003e getFilteredQuestionList() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        return model.getFilteredQuestionList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBookFilePath();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public static void setIsQuiz(boolean isQuiz) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        LogicManager.isQuiz \u003d isQuiz;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public boolean getIsQuiz() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        return isQuiz;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public ObservableList\u003cTask\u003e getFilteredTaskList() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        return model.getFilteredTaskList();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public ObservableList\u003cQuestion\u003e getFilteredQuizQuestionList() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        return model.getFilteredQuizQuestionList();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 3,
      "shuiyao-sg": 6,
      "Auxinnn": 19,
      "irene-lly": 25,
      "ShirleyWangxt": 4,
      "-": 78
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddNoteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONTENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": " * Adds a lecture note to NUStudy."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "public class AddNoteCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addnote\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a lecture note to NUStudy. \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            + PREFIX_TITLE + \"TITLE \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            + PREFIX_CONTENT + \"CONTENT \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            + PREFIX_TITLE + \"Lecture 1 \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            + PREFIX_CONTENT + \"Write once debug everywhere \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Lecture note added: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TITLE \u003d \"This title already exists\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    private final Note toAdd;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * Creates an AddNoteCommand to add the specified {@code Note}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public AddNoteCommand(Note note) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        requireNonNull(note);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        toAdd \u003d note;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        if (model.hasNote(toAdd)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_TITLE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        model.addNote(toAdd);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                || (other instanceof AddNoteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddNoteCommand) other).toAdd));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 23,
      "-": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearNoteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": " * Clears lecture notes."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": " * TODO can Shui Yao modify this so that it clears just the lecture notes?"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "public class ClearNoteCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clearnote\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Lecture notes have been cleared!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 5,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.logic.commands.statistics.Type;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * Help information should be shown to the user."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * The application should exit."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    private final boolean isQuiz;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    private final boolean showStats;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    private Type type;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit, boolean isQuiz, boolean showStats) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        this.isQuiz \u003d isQuiz;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        this.showStats \u003d showStats;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        this(feedbackToUser, false, false, false, false);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public boolean isQuiz() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        return isQuiz;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public boolean isShowStats() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        return showStats;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public void setType(Type type) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public Type getType() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Auxinnn": 15,
      "irene-lly": 19,
      "-": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteNoteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": " * Deletes a lecture note by index number."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "public class DeleteNoteCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deletenote\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            + \": Deletes the lecture note with the specified index number.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 5\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public static final String MESSAGE_DELETE_NOTE_SUCCESS \u003d \"Deleted lecture note: %1$s\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public DeleteNoteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        List\u003cNote\u003e lastShownList \u003d model.getFilteredNoteList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_NOTE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        Note noteToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        model.deleteNote(noteToDelete);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_NOTE_SUCCESS, noteToDelete));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                || (other instanceof DeleteNoteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteNoteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 15,
      "-": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditNoteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONTENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_NOTES;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.note.Content;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.note.Title;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": " * Edits the details of an existing lecture note."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "public class EditNoteCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"editnote\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the lecture note identified \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            + \"by the index number used in the displayed lecture note list. \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            + \"[\" + PREFIX_TITLE + \"TITLE] \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            + \"[\" + PREFIX_CONTENT + \"CONTENT] \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 2 \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            + PREFIX_TITLE + \"Linked lists \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            + PREFIX_CONTENT + \"A linked list may be singly or doubly linked.\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public static final String MESSAGE_EDIT_NOTE_SUCCESS \u003d \"Edited lecture note: %1$s\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_NOTE \u003d \"This title already exists\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    private final EditNoteDescriptor editNoteDescriptor;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * @param index of the lecture note in the filtered note list to edit"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * @param editNoteDescriptor details to edit the note with"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public EditNoteCommand(Index index, EditNoteDescriptor editNoteDescriptor) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        requireNonNull(editNoteDescriptor);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        this.editNoteDescriptor \u003d new EditNoteDescriptor(editNoteDescriptor);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        List\u003cNote\u003e lastShownList \u003d model.getFilteredNoteList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_NOTE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        Note noteToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        Note editedNote \u003d createEditedNote(noteToEdit, editNoteDescriptor);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        if (!noteToEdit.isSameNote(editedNote) \u0026\u0026 model.hasNote(editedNote)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_NOTE);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        model.setNote(noteToEdit, editedNote);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        model.updateFilteredNoteList(PREDICATE_SHOW_ALL_NOTES);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_NOTE_SUCCESS, editedNote));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * Creates and returns a {@code Note} with the details of {@code noteToEdit}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * edited with {@code editNoteDescriptor}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    private static Note createEditedNote(Note noteToEdit, EditNoteDescriptor editNoteDescriptor) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assert noteToEdit !\u003d null;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        Title updatedTitle \u003d editNoteDescriptor.getTitle().orElse(noteToEdit.getTitle());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        Content updatedContent \u003d editNoteDescriptor.getContent().orElse(noteToEdit.getContent());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        return new Note(updatedTitle, updatedContent);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        if (!(other instanceof EditNoteCommand)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        EditNoteCommand e \u003d (EditNoteCommand) other;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                \u0026\u0026 editNoteDescriptor.equals(e.editNoteDescriptor);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * Stores the details to edit the lecture note with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * corresponding field value of the note."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public static class EditNoteDescriptor {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        private Title title;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        private Content content;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        public EditNoteDescriptor() {}"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        public EditNoteDescriptor(EditNoteDescriptor toCopy) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            setTitle(toCopy.title);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            setContent(toCopy.content);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            return CollectionUtil.isAnyNonNull(title, content);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        public void setTitle(Title title) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            this.title \u003d title;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        public Optional\u003cTitle\u003e getTitle() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            return Optional.ofNullable(title);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        public void setContent(Content content) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            this.content \u003d content;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        public Optional\u003cContent\u003e getContent() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            return Optional.ofNullable(content);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            if (!(other instanceof EditNoteDescriptor)) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            EditNoteDescriptor e \u003d (EditNoteDescriptor) other;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            return getTitle().equals(e.getTitle()) \u0026\u0026 getContent().equals(e.getContent());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 66,
      "-": 100
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Content Book as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true, false, false);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 1,
      "Auxinnn": 1,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindNoteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.note.TitleContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": " * Finds and lists all lecture notes whose title contains any of the argument keywords."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "public class FindNoteCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"findnote\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all lecture notes whose titles contain any of \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            + \"the specified words (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            + \"Parameters: WORD [WORD]...\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" important fact\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    private final TitleContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public FindNoteCommand(TitleContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        model.updateFilteredNoteList(predicate);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                String.format(Messages.MESSAGE_NOTES_LISTED_OVERVIEW, model.getFilteredNoteList().size()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                || (other instanceof FindNoteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindNoteCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 14,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HelpCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false, false, false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Auxinnn": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListNoteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_NOTES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": " * Lists all lecture notes."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "public class ListNoteCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listnote\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all lecture notes\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        model.updateFilteredNoteList(PREDICATE_SHOW_ALL_NOTES);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 6,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/questioncommands/AddQuestionCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "package seedu.address.logic.commands.questioncommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ANSWER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DIFFICULTY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QUESTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SUBJECT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.model.question.Question;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": " * Adds a question to NUStudy."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "public class AddQuestionCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addq\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a question to NUStudy. \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            + PREFIX_QUESTION + \"QUESTION \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            + PREFIX_ANSWER + \"ANSWER \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            + PREFIX_SUBJECT + \"SUBJECT \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            + PREFIX_DIFFICULTY + \"DIFFICULTY \\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            + PREFIX_QUESTION + \"MSS stands for? \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            + PREFIX_ANSWER + \"Main Success Scenario \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            + PREFIX_SUBJECT + \"CS2103T \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            + PREFIX_DIFFICULTY + \"Easy \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New question added: %1$s\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_QUESTION \u003d \"This question already exists in NUStudy\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    private final Question toAdd;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * Creates an AddQuestionCommand to add the specified {@code Question}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public AddQuestionCommand(Question question) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        requireNonNull(question);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        toAdd \u003d question;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        if (model.hasQuestion(toAdd)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_QUESTION);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        model.addQuestion(toAdd);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                || (other instanceof AddQuestionCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddQuestionCommand) other).toAdd));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShirleyWangxt": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/questioncommands/DeleteQuestionCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "package seedu.address.logic.commands.questioncommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.model.question.Question;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": " * Deletes a question by index number."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "public class DeleteQuestionCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deleteq\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            + \": Deletes the question with the specified index number.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public static final String MESSAGE_DELETE_QUESTION_SUCCESS \u003d \"Deleted question: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public DeleteQuestionCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        List\u003cQuestion\u003e lastShownList \u003d model.getFilteredQuestionList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_QUESTION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        Question questionToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        model.deleteQuestion(questionToDelete);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        model.updateFilteredQuestionList(Model.PREDICATE_SHOW_ALL_QUESTIONS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_QUESTION_SUCCESS, questionToDelete));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                || (other instanceof DeleteQuestionCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteQuestionCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShirleyWangxt": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/questioncommands/ListQuestionCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "package seedu.address.logic.commands.questioncommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_QUESTIONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": " * Lists all questions."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "public class ListQuestionCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listq\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all questions.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        model.updateFilteredQuestionList(PREDICATE_SHOW_ALL_QUESTIONS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShirleyWangxt": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/quiz/QuitQuizModeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "package seedu.address.logic.commands.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": " * Quits the quiz mode."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "public class QuitQuizModeCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"quit\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"You have exited from the quiz mode!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        model.clearQuizQuestionList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        LogicManager.setIsQuiz(false);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Auxinnn": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/quiz/QuizCheckAnswer.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "package seedu.address.logic.commands.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.model.question.Answer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.model.question.Question;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.model.question.QuestionBody;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.model.quiz.QuizResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": " * Checks the quiz answer input by users."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "public class QuizCheckAnswer extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public static final String ANSWER_CORRECT \u003d \"The answer is correct!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public static final String ANSWER_WRONG \u003d \"The answer is wrong!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    private final int index;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    private final Answer answer;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * @param index  of the question the answer is mapped to."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * @param answer of the question input by user."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public QuizCheckAnswer(int index, Answer answer) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        this.answer \u003d answer;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public String getQuizTime() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        Date now \u003d new Date();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        SimpleDateFormat simpleDateFormat \u003d new SimpleDateFormat(\"yyyy/MM/dd HH:mm:ss\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        return simpleDateFormat.format(now);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        List\u003cQuestion\u003e listShownList \u003d model.getFilteredQuizQuestionList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        if (index \u003e\u003d listShownList.size()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_QUIZ_QUESTION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        boolean result \u003d model.checkQuizAnswer(index, answer);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        QuestionBody questionBody \u003d model.getFilteredQuizQuestionList().get(index).getQuestionBody();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        QuizResult quizResult \u003d new QuizResult(answer, questionBody, getQuizTime(), result);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        model.addQuizResult(quizResult);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        if (result) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            return new CommandResult(ANSWER_CORRECT);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            return new CommandResult(ANSWER_WRONG);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Auxinnn": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/quiz/QuizModeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "package seedu.address.logic.commands.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DIFFICULTY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NUMBER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SUBJECT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.model.question.Difficulty;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.model.question.Question;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.model.question.Subject;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": " * Enters the quiz mode of NUStudy."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "public class QuizModeCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"quiz\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Enters quiz mode where questions will be displayed \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            + \" and answer input is required to check the accuracy.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            + PREFIX_NUMBER + \"NUMBER OF QUESTIONS (a positive integer) \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            + PREFIX_DIFFICULTY + \"DIFFICULTY \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            + PREFIX_SUBJECT + \"SUBJECT \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            + PREFIX_NUMBER + \"8 \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            + PREFIX_DIFFICULTY + \"Easy \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            + PREFIX_SUBJECT + \"Maths \";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"You have successfully entered quiz mode!\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public static final String INSUFFICIENT_QUESTION \u003d \"There are insufficient questions to do the quiz!\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    private final int numOfQuestions;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    private final Subject subject;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    private final Difficulty difficulty;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * Sets the quiz question with specific {@code subject} and {@code difficulty}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public QuizModeCommand(int numOfQuestions, Subject subject, Difficulty difficulty) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        this.numOfQuestions \u003d numOfQuestions;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        this.subject \u003d subject;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        this.difficulty \u003d difficulty;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            ObservableList\u003cQuestion\u003e quizQuestionList \u003d model.getQuizQuestions(numOfQuestions, subject, difficulty);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            model.setQuizQuestionList(quizQuestionList);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            LogicManager.setIsQuiz(true);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            throw new CommandException(INSUFFICIENT_QUESTION);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, false, false, true, false);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Auxinnn": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/quiz/QuizShowAnswerCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "package seedu.address.logic.commands.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.model.question.Answer;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": " * Shows an answer for the question in quiz."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "public class QuizShowAnswerCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"show\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"The answer is: %1$s\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public static final String INDEX_EXCEED_RANGE \u003d \"The index input is out of the range of quiz questions!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    private final int index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public QuizShowAnswerCommand(int index) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        Answer answer;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            answer \u003d model.showQuizAnswer(index);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            throw new CommandException(INDEX_EXCEED_RANGE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, answer.toString()));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Auxinnn": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/statistics/GetQnsCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "package seedu.address.logic.commands.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import static seedu.address.logic.commands.statistics.Type.QUESTIONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SUBJECT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "irene-lly"
        },
        "content": " * Gets questions that have been answered correctly/incorrectly by subject."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "irene-lly"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "public class GetQnsCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"questions\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Gets all questions that have been answered \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            + \"correctly/incorrectly for a particular subject by using either -c/-i respectively.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            + \"You can also see past answers to the questions by adding the -a field.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            + PREFIX_SUBJECT + \"SUBJECT \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            + \"[-c] [-i] \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            + \"[-a]\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            + PREFIX_SUBJECT + \"CS2103T\" + \" -c -a\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Here are the questions: \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public static final String MESSAGE_NO_CORRECT_QNS \u003d \"There are no correctly answered questions. \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public static final String MESSAGE_NO_INCORRECT_QNS \u003d \"There are no incorrectly answered questions. \";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    //private final List subjects;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    private final boolean getCorrectQns;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    //private final boolean getAnswers;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    /*public GetQnsCommand(List subjects, boolean getCorrectQns, boolean getAnswers) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        requireNonNull(subjects);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        requireNonNull(getCorrectQns);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        requireNonNull(getAnswers);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        this.subjects \u003d subjects;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        this.getCorrectQns \u003d getCorrectQns;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        this.getAnswers \u003d getAnswers;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public GetQnsCommand(boolean getCorrectQns) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        requireNonNull(getCorrectQns);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        this.getCorrectQns \u003d getCorrectQns;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        if (getCorrectQns) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            model.setCorrectQnsList();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            model.setIncorrectQnsList();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        CommandResult c \u003d new CommandResult(MESSAGE_SUCCESS, false, false, false, true);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        c.setType(QUESTIONS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        return c;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "irene-lly": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/statistics/GetReportCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "package seedu.address.logic.commands.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "irene-lly"
        },
        "content": " * Returns a report for questions."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "irene-lly"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "public class GetReportCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"report\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Returns a report of how well you have \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            + \"answered a particular question,\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            + \"the number of times the question has been attempted and the past answers to the question.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            + \"Parameters: INDEX\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            + \"5\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Here is a report of the question:\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    private final int index;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public GetReportCommand(int index) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        // need to extract data from storage"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "irene-lly": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/statistics/GetStatisticsCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "package seedu.address.logic.commands.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import static seedu.address.logic.commands.statistics.Type.CHART;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SUBJECT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "irene-lly"
        },
        "content": " * Gets statistics of how well the user has attempted the questions."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "irene-lly"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "public class GetStatisticsCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"stats\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Gets the statistics of how well \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            + \"a question has been answered for a subject. \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            + \"A pie chart will be returned.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            + PREFIX_SUBJECT + \"SUBJECT \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            + \"[\" + PREFIX_SUBJECT + \"SUBJECT]... \\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            + PREFIX_SUBJECT + \"CS2103T\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Here are the statistics: \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public static final String MESSAGE_NO_STATISTICS \u003d \"There is no available data for computation of \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            + \"statistics, try doing some questions.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    /*private final List subjects;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public GetStatisticsCommand(List subjects) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        requireNonNull(subjects);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        this.subjects \u003d subjects;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        //model.updateFilteredNoteList(PREDICATE_SHOW_NO_NOTES);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        //model.setStatistics();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        CommandResult c \u003d new CommandResult(MESSAGE_SUCCESS, false, false, false, true);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        c.setType(CHART);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        return c;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "irene-lly": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/statistics/Type.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "package seedu.address.logic.commands.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "irene-lly"
        },
        "content": " * This documents the type of statistics available."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "irene-lly"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "public enum Type {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    CHART,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    QUESTIONS"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "irene-lly": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/task/AddTaskForNoteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "package seedu.address.logic.commands.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": " * Adds a revision task for lecture note to the task list."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "public class AddTaskForNoteCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"radd\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a revision task to NUStudy. \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            + PREFIX_TITLE + \"TITLE \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            + PREFIX_DATE + \"DATE\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            + PREFIX_TIME + \"TIME\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            + PREFIX_TITLE + \"Lecture 1 \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            + PREFIX_DATE + \"15/10/2019\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            + PREFIX_TIME + \"1500\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Revision task added: %1$s\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TITLE \u003d \"This task already exists\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    private final Task toAdd;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * Creates an AddTaskForNoteCommand to add the specified {@code Task}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public AddTaskForNoteCommand(Task task) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        requireNonNull(task);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        toAdd \u003d task;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        List\u003cNote\u003e lastShownList \u003d model.getFilteredNoteList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        Note note \u003d toAdd.getNote();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        for (int i \u003d 0; i \u003c lastShownList.size(); i++) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            if (note.isSameNote(lastShownList.get(i))) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "                note \u003d lastShownList.get(i);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        toAdd.setNote(note);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        if (model.hasTask(toAdd)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_TITLE);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        model.addTask(toAdd);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        //System.out.println(\"Task\" + toAdd.toString() + \"is added\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "                || (other instanceof AddTaskForNoteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddTaskForNoteCommand) other).toAdd));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shuiyao-sg": 75
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/task/ClearTaskCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "package seedu.address.logic.commands.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": " * Clears all tasks in the revision task list."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "public class ClearTaskCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"rclear\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"All tasks have been cleared!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        model.clearTaskList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        model.updateFilteredTaskList(Model.PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shuiyao-sg": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/task/DeleteTaskCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "package seedu.address.logic.commands.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": " * Deletes a task from the revision task list."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "public class DeleteTaskCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"rdelete\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            + \": Deletes the task with the specified index number.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public static final String MESSAGE_DELETE_TASK_SUCCESS \u003d \"Deleted task: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public DeleteTaskCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        List\u003cTask\u003e lastShownList \u003d model.getFilteredTaskList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        Task taskToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        model.deleteTask(taskToDelete);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        model.updateFilteredTaskList(Model.PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_TASK_SUCCESS, taskToDelete));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "                || (other instanceof DeleteTaskCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteTaskCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shuiyao-sg": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/task/DoneTaskCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "package seedu.address.logic.commands.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": " * Marks a task in the task list as done."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "public class DoneTaskCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"rdone\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            + \": Marks the task with the specified index number as done.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Revision task marked as done: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public static final String MESSAGE_TASK_NOT_FOUND \u003d \"The task does not exist\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public DoneTaskCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        requireNonNull(targetIndex);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        List\u003cTask\u003e lastShownList \u003d model.getFilteredTaskList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        Task taskDone \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        model.markTaskAsDone(taskDone);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        model.updateFilteredTaskList(Model.PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, taskDone));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "                || (other instanceof DoneTaskCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DoneTaskCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shuiyao-sg": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddNoteCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONTENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.logic.commands.AddNoteCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.note.Content;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.note.Title;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": " * Parses input arguments and creates a new AddNoteCommand object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "public class AddNoteCommandParser implements Parser\u003cAddNoteCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddNoteCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * and returns an AddNoteCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public AddNoteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_TITLE, PREFIX_CONTENT);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_TITLE, PREFIX_CONTENT) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddNoteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        Title title \u003d ParserUtil.parseTitle(argMultimap.getValue(PREFIX_TITLE).get());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        Content content \u003d ParserUtil.parseContent(argMultimap.getValue(PREFIX_CONTENT).get());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        Note note \u003d new Note(title, content);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        return new AddNoteCommand(note);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 20,
      "-": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.logic.commands.AddNoteCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.logic.commands.ClearNoteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.logic.commands.DeleteNoteCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.logic.commands.EditNoteCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.logic.commands.FindNoteCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.logic.commands.ListNoteCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.logic.commands.questioncommands.AddQuestionCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.logic.commands.questioncommands.DeleteQuestionCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.logic.commands.questioncommands.ListQuestionCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.logic.commands.quiz.QuizModeCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.logic.commands.statistics.GetQnsCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.logic.commands.statistics.GetReportCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.logic.commands.statistics.GetStatisticsCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.logic.commands.task.AddTaskForNoteCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.logic.commands.task.ClearTaskCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.logic.commands.task.DeleteTaskCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.logic.commands.task.DoneTaskCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.logic.parser.questionparser.AddQuestionCommandParser;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.logic.parser.questionparser.DeleteQuestionCommandParser;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.logic.parser.quiz.QuizModeCommandParser;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.logic.parser.statistics.GetQnsCommandParser;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.logic.parser.statistics.GetReportCommandParser;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.logic.parser.statistics.GetStatisticsCommandParser;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.logic.parser.task.AddTaskForNoteCommandParser;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.logic.parser.task.DeleteTaskCommandParser;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.logic.parser.task.DoneTaskCommandParser;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        case AddNoteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            return new AddNoteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        case EditNoteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            return new EditNoteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        case DeleteNoteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            return new DeleteNoteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        case ClearNoteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            return new ClearNoteCommand();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        case FindNoteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            return new FindNoteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        case ListNoteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            return new ListNoteCommand();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        case QuizModeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            return new QuizModeCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        case GetStatisticsCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            return new GetStatisticsCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        case GetQnsCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            return new GetQnsCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        case GetReportCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            return new GetReportCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        case AddQuestionCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            return new AddQuestionCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        case DeleteQuestionCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            return new DeleteQuestionCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        case ListQuestionCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            return new ListQuestionCommand();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        case AddTaskForNoteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            return new AddTaskForNoteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        case DoneTaskCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            return new DoneTaskCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        case DeleteTaskCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            return new DeleteTaskCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        case ClearTaskCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            return new ClearTaskCommand();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 18,
      "shuiyao-sg": 19,
      "Auxinnn": 5,
      "irene-lly": 15,
      "ShirleyWangxt": 14,
      "-": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public static final Prefix PREFIX_TITLE \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public static final Prefix PREFIX_CONTENT \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public static final Prefix PREFIX_NUMBER \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public static final Prefix PREFIX_DIFFICULTY \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public static final Prefix PREFIX_SUBJECT \u003d new Prefix(\"s/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public static final Prefix PREFIX_QUESTION \u003d new Prefix(\"q/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public static final Prefix PREFIX_ANSWER \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public static final Prefix PREFIX_DATE \u003d new Prefix(\"dt/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public static final Prefix PREFIX_TIME \u003d new Prefix(\"tm/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 2,
      "shuiyao-sg": 2,
      "Auxinnn": 3,
      "ShirleyWangxt": 3,
      "-": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteNoteCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.logic.commands.DeleteNoteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": " * Parses input arguments and creates a new DeleteNoteCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "public class DeleteNoteCommandParser implements Parser\u003cDeleteNoteCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteNoteCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * and returns a DeleteNoteCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public DeleteNoteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            return new DeleteNoteCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteNoteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 8,
      "-": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditNoteCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONTENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.logic.commands.EditNoteCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.logic.commands.EditNoteCommand.EditNoteDescriptor;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": " * Parses input arguments and creates a new EditNoteCommand object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "public class EditNoteCommandParser implements Parser\u003cEditNoteCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditNoteCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * and returns an EditNoteCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public EditNoteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TITLE, PREFIX_CONTENT);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditNoteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        EditNoteDescriptor editNoteDescriptor \u003d new EditNoteDescriptor();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TITLE).isPresent()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            editNoteDescriptor.setTitle(ParserUtil.parseTitle(argMultimap.getValue(PREFIX_TITLE).get()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        if (argMultimap.getValue(PREFIX_CONTENT).isPresent()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            editNoteDescriptor.setContent(ParserUtil.parseContent(argMultimap.getValue(PREFIX_CONTENT).get()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        if (!editNoteDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            throw new ParseException(EditNoteCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        return new EditNoteCommand(index, editNoteDescriptor);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 20,
      "-": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindNoteCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.logic.commands.FindNoteCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.note.TitleContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": " * Parses input arguments and creates a new FindNoteCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "public class FindNoteCommandParser implements Parser\u003cFindNoteCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindNoteCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * and returns a FindNoteCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public FindNoteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindNoteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        return new FindNoteCommand(new TitleContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 9,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.note.Content;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.note.Title;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.model.question.Answer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.model.question.Difficulty;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.model.question.QuestionBody;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.model.question.Subject;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * Parses a {@code String title} into a {@code Title}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * @throws ParseException if the given {@code title} is invalid."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public static Title parseTitle(String title) throws ParseException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        requireNonNull(title);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        String trimmedName \u003d title.trim();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        if (!Title.isValidTitle(trimmedName)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            throw new ParseException(Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        return new Title(trimmedName);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * Parses a {@code String content} into an {@code Content}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * @throws ParseException if the given {@code content} is invalid."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public static Content parseContent(String content) throws ParseException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        requireNonNull(content);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        String trimmedAddress \u003d content.trim();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        if (!Content.isValidContent(trimmedAddress)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            throw new ParseException(Content.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        return new Content(trimmedAddress);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * Parses a {@code String number} into an {@code Integer}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public static int parseNumber(String number) throws ParseException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        requireNonNull(number);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        return Integer.parseInt(number);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * Parses a {@code String questionBody} into a {@code QuestionBody}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * @throws ParseException if the given {@code questionBody} is invalid."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public static QuestionBody parseQuestionBody(String questionBody) throws ParseException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        requireNonNull(questionBody);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        String trimmedBody \u003d questionBody.trim();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        if (!QuestionBody.isValidQuestionBody(trimmedBody)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            throw new ParseException(QuestionBody.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        return new QuestionBody(trimmedBody);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * Parses a {@code String answer} into a {@code Answer}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * @throws ParseException if the given {@code answer} is invalid."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public static Answer parseAnswer(String answer) throws ParseException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        requireNonNull(answer);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        String trimmedAnswer \u003d answer.trim();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        if (!Answer.isValidAnswer(trimmedAnswer)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            throw new ParseException(Answer.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        return new Answer(answer);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * Parses a {@code String subject} into an {@code Subject}."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * @throws ParseException if the given {@code subject} is invalid."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public static Subject parseSubject(String subject) throws ParseException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        requireNonNull(subject);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        String trimmedSubject \u003d subject.trim();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        if (!Subject.isValidSubject(trimmedSubject)) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            throw new ParseException(Subject.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        return new Subject(trimmedSubject);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * Parses a {@code String difficulty} into an {@code Difficulty}."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * @throws ParseException if the given {@code difficulty} is invalid."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public static Difficulty parseDifficulty(String difficulty) throws ParseException {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        requireNonNull(difficulty);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        String trimmedDifficulty \u003d difficulty.trim();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        if (!Difficulty.isValidDifficulty(trimmedDifficulty)) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            throw new ParseException(Difficulty.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        return new Difficulty((trimmedDifficulty));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * Parses a {@code String date} into an {@code LocalDate}"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * @throws ParseException if the given {@code date} is invalid."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public static LocalDate parseDate(String date) throws ParseException {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        String trimmedDate \u003d date.trim();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            DateTimeFormatter dateFormat \u003d Task.FORMAT_USER_INPUT_DATE;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            return LocalDate.parse(trimmedDate, dateFormat);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            throw new ParseException(Task.MESSAGE_DATE_CONSTRAINT);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * Parses a {@code String time} into an {@code LocalTime}"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * @throws ParseException if the given {@code time} is invalid."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public static LocalTime parseTime(String time) throws ParseException {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        requireNonNull(time);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        String trimmedTime \u003d time.trim();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            DateTimeFormatter timeFormat \u003d Task.FORMAT_USER_INPUT_TIME;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            return LocalTime.parse(trimmedTime, timeFormat);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            throw new ParseException(Task.MESSAGE_TIME_CONSTRAINT);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 18,
      "shuiyao-sg": 27,
      "Auxinnn": 26,
      "ShirleyWangxt": 21,
      "-": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/questionparser/AddQuestionCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "package seedu.address.logic.parser.questionparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ANSWER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DIFFICULTY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QUESTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SUBJECT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.logic.commands.questioncommands.AddQuestionCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.model.question.Answer;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.model.question.Difficulty;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.model.question.Question;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.model.question.QuestionBody;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.model.question.Subject;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": " * Parses input arguments and creates a new AddQuestionCommand object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "public class AddQuestionCommandParser {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddQuestionCommand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * and returns an AddQuestionCommand object for execution."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public AddQuestionCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_QUESTION, PREFIX_ANSWER, PREFIX_SUBJECT, PREFIX_DIFFICULTY);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_QUESTION, PREFIX_ANSWER, PREFIX_SUBJECT, PREFIX_DIFFICULTY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddQuestionCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        QuestionBody questionBody \u003d ParserUtil.parseQuestionBody(argMultimap.getValue(PREFIX_QUESTION).get());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        Answer answer \u003d ParserUtil.parseAnswer(argMultimap.getValue(PREFIX_ANSWER).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        Subject subject \u003d ParserUtil.parseSubject(argMultimap.getValue(PREFIX_SUBJECT).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        Difficulty difficulty \u003d ParserUtil.parseDifficulty(argMultimap.getValue(PREFIX_DIFFICULTY).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        Question question \u003d new Question(questionBody, answer, subject, difficulty);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        return new AddQuestionCommand(question);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShirleyWangxt": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/questionparser/DeleteQuestionCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "package seedu.address.logic.parser.questionparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.logic.commands.questioncommands.DeleteQuestionCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": " * Parses input arguments and creates a new DeleteQuestionCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "public class DeleteQuestionCommandParser implements Parser\u003cDeleteQuestionCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteQuestionCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * and returns a DeleteQuestionCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public DeleteQuestionCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            return new DeleteQuestionCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteQuestionCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShirleyWangxt": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/quiz/QuitQuizModeParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "package seedu.address.logic.parser.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.logic.commands.quiz.QuitQuizModeCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": " * Parses input arguments and creates a new QuitQuizModeCommand object."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "public class QuitQuizModeParser implements Parser\u003cQuitQuizModeCommand\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public QuitQuizModeCommand parse(String userInput) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        return new QuitQuizModeCommand();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Auxinnn": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/quiz/QuizAnswerParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "package seedu.address.logic.parser.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.logic.commands.quiz.QuizCheckAnswer;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.model.question.Answer;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": " * Parses user input for quiz."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "public class QuizAnswerParser implements Parser\u003cQuizCheckAnswer\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    private static final String ANSWER_INVALID_FORMAT \u003d \"Invalid answer format! \\n%1$s\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    private static final String SHOW_ANSWER_FORMAT \u003d \"Format: INDEX:ANSWER\\n\" + \"Example: 1:abstraction\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * Used for initial separation of question index and answer."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    private static final Pattern BASIC_INPUT_FORMAT \u003d Pattern.compile(\"(?\u003cindex\u003e\\\\d+):(?\u003canswer\u003e.+)\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * Parses the given {@code String} of user input in the context of the quiz answer"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * and returns an QuizCheckAnswer object for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public QuizCheckAnswer parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        final Matcher matcher \u003d BASIC_INPUT_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            throw new ParseException(String.format(ANSWER_INVALID_FORMAT, SHOW_ANSWER_FORMAT));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        final String index \u003d matcher.group(\"index\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        final String stringAnswer \u003d matcher.group(\"answer\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        final int intIndex \u003d Integer.parseInt(index) - 1;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        final Answer answer \u003d new Answer(stringAnswer);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        return new QuizCheckAnswer(intIndex, answer);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Auxinnn": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/quiz/QuizModeCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "package seedu.address.logic.parser.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DIFFICULTY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NUMBER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SUBJECT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.logic.commands.quiz.QuizModeCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.model.question.Difficulty;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.model.question.Subject;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": " * Parses input arguments and creates a new QuizModeCommand object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "public class QuizModeCommandParser implements Parser\u003cQuizModeCommand\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    private static final String INVALID_NUMBER \u003d \"The number input should be a positive integer!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the QuizModeCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * and returns an QuizModeCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public QuizModeCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NUMBER, PREFIX_DIFFICULTY, PREFIX_SUBJECT);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        int numOfQuestions;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        Subject subject;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        Difficulty difficulty;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_DIFFICULTY, PREFIX_SUBJECT)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "                || (!argMultimap.getPreamble().isEmpty())) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, QuizModeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            numOfQuestions \u003d ParserUtil.parseNumber(argMultimap.getValue(PREFIX_NUMBER).get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            subject \u003d ParserUtil.parseSubject(argMultimap.getValue(PREFIX_SUBJECT).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            difficulty \u003d ParserUtil.parseDifficulty(argMultimap.getValue(PREFIX_DIFFICULTY).get());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            throw new ParseException(INVALID_NUMBER);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        return new QuizModeCommand(numOfQuestions, subject, difficulty);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Auxinnn": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/quiz/QuizParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "package seedu.address.logic.parser.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.logic.commands.quiz.QuitQuizModeCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.logic.commands.quiz.QuizShowAnswerCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": " * Parses user input in the quiz mode."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "public class QuizParser {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * Parses user input into command for execution or answer of questions to check correctness."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * @return the command or answer based on the user input"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        final Matcher commandMatcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        if (!commandMatcher.matches()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        final String commandWord \u003d commandMatcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        final String arguments \u003d commandMatcher.group(\"arguments\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        switch(commandWord) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        case QuitQuizModeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            return new QuitQuizModeCommand();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        case QuizShowAnswerCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            return new QuizShowAnswerParser().parse(arguments.trim());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            return new QuizAnswerParser().parse(userInput);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Auxinnn": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/quiz/QuizShowAnswerParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "package seedu.address.logic.parser.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.logic.commands.quiz.QuizShowAnswerCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": " * Parses input arguments and creates a new QuizShowAnswerCommand object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "public class QuizShowAnswerParser implements Parser\u003cQuizShowAnswerCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public static final String INVALID_INDEX \u003d \"The index input should be a positive integer!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * Parses the given {@code String} of user input in the context of showing answer"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * and returns an QuizShowAnswerCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public QuizShowAnswerCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            index \u003d Integer.parseInt(args) - 1;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            throw new ParseException(INVALID_INDEX);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        return new QuizShowAnswerCommand(index);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Auxinnn": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/statistics/GetQnsCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "package seedu.address.logic.parser.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.logic.commands.statistics.GetQnsCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "irene-lly"
        },
        "content": " * Parses input arguments and creates a new GetQnsCommand object."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "irene-lly"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "public class GetQnsCommandParser implements Parser\u003cGetQnsCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the GetQnsCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     * and returns a GetQnsCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public GetQnsCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_SUBJECT);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        List subjects \u003d argMultimap.getAllValues(PREFIX_SUBJECT);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        if (subjects.isEmpty() || !(args.contains(\"-c\") || args.contains(\"-i\"))) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                    GetQnsCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        }*/"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        if (!(args.contains(\"-c\") || args.contains(\"-i\"))) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                    GetQnsCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        boolean getCorrectQns \u003d args.contains(\"-c\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        boolean getAnswers \u003d args.contains(\"-a\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        return new GetQnsCommand(getCorrectQns);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "irene-lly": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/statistics/GetReportCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "package seedu.address.logic.parser.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.logic.commands.statistics.GetReportCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "irene-lly"
        },
        "content": " * Parses input arguments and creates a new GetReportCommand object."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "irene-lly"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "public class GetReportCommandParser implements Parser\u003cGetReportCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the GetReportCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     * and returns an GetReportCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public GetReportCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        int index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            index \u003d Integer.parseInt(args.trim());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, GetReportCommand.MESSAGE_USAGE), e);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        return new GetReportCommand(index);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "irene-lly": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/statistics/GetStatisticsCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "package seedu.address.logic.parser.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.logic.commands.statistics.GetStatisticsCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "irene-lly"
        },
        "content": " * Parses input arguments and creates a new GetStatisticsCommand object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "irene-lly"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "public class GetStatisticsCommandParser implements Parser\u003cGetStatisticsCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the GetStatisticsCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     * and returns an GetStatisticsCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public GetStatisticsCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        // To be implemented later"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        /*ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_SUBJECT);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        List subjects \u003d argMultimap.getAllValues(PREFIX_SUBJECT);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        if (subjects.isEmpty()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                    GetStatisticsCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        return new GetStatisticsCommand(subjects);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        return new GetStatisticsCommand();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "irene-lly": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/task/AddTaskForNoteCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "package seedu.address.logic.parser.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.logic.commands.task.AddTaskForNoteCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.model.note.Content;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.model.note.Title;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.model.task.TaskForNote;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": " * Parses input arguments and creates a new AddTaskForNoteCommand object."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "public class AddTaskForNoteCommandParser implements Parser\u003cAddTaskForNoteCommand\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddTaskForNoteCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * and returns an AddTaskForNoteCommand object for execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public AddTaskForNoteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_TITLE, PREFIX_DATE, PREFIX_TIME);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_TITLE, PREFIX_DATE, PREFIX_TIME)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "                    AddTaskForNoteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        Title title \u003d ParserUtil.parseTitle(argMultimap.getValue(PREFIX_TITLE).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        LocalDate date \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        LocalTime time \u003d ParserUtil.parseTime(argMultimap.getValue(PREFIX_TIME).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        Note note \u003d new Note(title, new Content(\"dummy entry\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        Task task \u003d new TaskForNote(note, date, time);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        return new AddTaskForNoteCommand(task);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shuiyao-sg": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/task/DeleteTaskCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "package seedu.address.logic.parser.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.logic.commands.task.DeleteTaskCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": " * Parses input arguments and creates a new DeleteTaskCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "public class DeleteTaskCommandParser implements Parser\u003cDeleteTaskCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteTaskCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * and returns a DeleteTaskCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public DeleteTaskCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            return new DeleteTaskCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteTaskCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shuiyao-sg": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/task/DoneTaskCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "package seedu.address.logic.parser.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.logic.commands.task.DoneTaskCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": " * Parses input arguments and creates a new DeleteNoteCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "public class DoneTaskCommandParser implements Parser\u003cDoneTaskCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DoneTaskCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * and returns a DoneTaskCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public DoneTaskCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            return new DoneTaskCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DoneTaskCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shuiyao-sg": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/model/AddressBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import java.util.Random;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.note.UniqueNoteList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.model.question.Answer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.model.question.Difficulty;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.model.question.Question;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.model.question.Subject;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.model.question.UniqueQuestionList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.model.quiz.QuizQuestionList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.model.quiz.QuizResult;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.model.quiz.QuizResultList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.model.statistics.TempStatsQnsModel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.model.task.TaskList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": " * Duplicates are not allowed (by .isSameNote comparison)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBook implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    private final UniqueNoteList notes;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    private final UniqueQuestionList questions;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    private final QuizQuestionList quiz;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    private final QuizResultList quizResults;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    private final TaskList tasks;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * among constructors."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        notes \u003d new UniqueNoteList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        questions \u003d new UniqueQuestionList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        quiz \u003d new QuizQuestionList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        quizResults \u003d new QuizResultList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public AddressBook() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * Creates an AddressBook using the Notes in {@code toBeCopied}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook(ReadOnlyAddressBook toBeCopied) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    // list overwrite operations"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * Replaces the contents of the note list with {@code notes}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * {@code notes} must not contain duplicate titles."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void setNotes(List\u003cNote\u003e notes) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        this.notes.setNotes(notes);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * Replaces the contents of the question list with {@code questions}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * {@code questions} must not contain duplicate questions."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public void setQuestions(List\u003cQuestion\u003e questions) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        this.questions.setQuestions(questions);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        setNotes(newData.getNoteList());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        setQuestions(newData.getQuestionList());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        setTasks(newData.getTaskList());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    // note-level operations"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * Returns true if a lecture note with the same title as {@code note} exists."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public boolean hasNote(Note note) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        requireNonNull(note);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        return notes.contains(note);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * Adds a lecture note; its title must not already exist."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void addNote(Note p) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        notes.add(p);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * Replaces the given lecture note {@code target} in the list with {@code editedNote}."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * {@code target} must exist beforehand and titles must remain unique."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void setNote(Note target, Note editedNote) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        requireNonNull(editedNote);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        notes.setNote(target, editedNote);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * Retrieves {@code title} from the note list. The note must exists."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * @param title The note with the same tile to be retrieved."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * @return The note with the same title as specified in input."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public Note getNote(Note title) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        return notes.get(title);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * Removes {@code title} from the lecture note list. This title must exist."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void removeNote(Note title) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        notes.remove(title);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    //// question operations"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public boolean hasQuestion(Question question) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        requireNonNull(question);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        return questions.contains(question);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * Adds a question to NUStudy."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * The question must not already exist in NUStudy."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public void addQuestion(Question q) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        questions.add(q);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * Replaces the given question {@code target} in the list with {@code editedQuestion}."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * {@code target} must exist in NUStudy."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * The question body of {@code editedQuestion} must not be the same as another existing question in NUStudy."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public void setQuestion(Question target, Question editedQuestion) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        requireNonNull(editedQuestion);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        questions.setQuestion(target, editedQuestion);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public void removeQuestion(Question key) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        questions.remove(key);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    // quiz operations"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * Returns a list with questions for quiz with {@code numOfQuestions}, {@code subject} and {@code difficulty}."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public ObservableList\u003cQuestion\u003e getQuizQuestions(int numOfQuestions, Subject subject, Difficulty difficulty) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        ObservableList\u003cQuestion\u003e quizQuestions \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        List\u003cQuestion\u003e filteredQuestions \u003d getQuestionList()"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "                .filter(question -\u003e subject.equals(question.getSubject())"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "                        \u0026\u0026 difficulty.equals(question.getDifficulty()))"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        Random random \u003d new Random();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        for (int i \u003d 0; i \u003c numOfQuestions; i++) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            int randomIndex \u003d random.nextInt(filteredQuestions.size());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            Question question \u003d filteredQuestions.get(randomIndex);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            quizQuestions.add(question);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            filteredQuestions.remove(randomIndex);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        return quizQuestions;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * Sets the question list in quiz as {@code quizQuestionList}."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public void setQuizQuestionList(ObservableList\u003cQuestion\u003e quizQuestionList) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        quiz.setQuizQuestionList(quizQuestionList);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * Returns an answer for the question in quiz with specific {@code index}."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public Answer showQuizAnswer(int index) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        return quiz.showAnswer(index);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * Checks the answer input by user and return a boolean value as the result."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public boolean checkQuizAnswer(int index, Answer answer) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        return quiz.checkQuizAnswer(index, answer);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * Clears the quiz question list."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public void clearQuizQuestionList() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        quiz.clearQuizQuestionList();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public void addQuizResult(QuizResult quizResult) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        quizResults.add(quizResult);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public boolean hasQuizResult(QuizResult quizResult) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        return quizResults.contains(quizResult);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    // util methods"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        return notes.asUnmodifiableObservableList().size() + \" lecture notes\";"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public ObservableList\u003cNote\u003e getNoteList() {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        return notes.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public ObservableList\u003cQuestion\u003e getQuestionList() {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        return questions.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public ObservableList\u003cQuestion\u003e getQuizQuestionList() {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        return quiz.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public ObservableList\u003cQuizResult\u003e getQuizResultList() {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        return quizResults.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public int getTotalQuestionsDone() {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        return quizResults.getTotalQuestionsDone();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public int getTotalQuestionsCorrect() {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        return quizResults.getTotalQuestionsCorrect();"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public int getTotalQuestionsIncorrect() {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        return quizResults.getTotalQuestionsIncorrect();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public ObservableList\u003cTempStatsQnsModel\u003e getCorrectQns() {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        return quizResults.getCorrectQns();"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public ObservableList\u003cTempStatsQnsModel\u003e getIncorrectQns() {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        return quizResults.getIncorrectQns();"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                \u0026\u0026 notes.equals(((AddressBook) other).notes)"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                \u0026\u0026 questions.equals(((AddressBook) other).questions)"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "                \u0026\u0026 tasks.equals(((AddressBook) other).tasks));"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        return Objects.hash(notes, quiz, questions, tasks);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public ObservableList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        return tasks.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * Replaces the contents of the task list with {@code tasks}."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public void setTasks(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        this.tasks.setTasks(tasks);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    // note-level operations"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * Returns true if a revision task with the same note / question, same date and time, and same status"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * as {@code task} exists."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        requireNonNull(task);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        return tasks.contains(task);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * Adds a revision task."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * Replaces the given task {@code target} in the list with {@code editedTask}."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * {@code target} must exist beforehand."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public void setTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        requireNonNull(editedTask);"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        tasks.setTask(target, editedTask);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * Removes {@code toRemove} from the revision task list. This task must exist."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public void removeTask(Task toRemove) {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        tasks.remove(toRemove);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public void markTaskAsDone(Task taskDone) {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        tasks.markTaskAsDone(taskDone);"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public void clearTaskList() {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        tasks.clear();"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 34,
      "shuiyao-sg": 67,
      "Auxinnn": 69,
      "irene-lly": 34,
      "ShirleyWangxt": 36,
      "-": 109
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import javafx.scene.chart.PieChart;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.model.question.Answer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.model.question.Difficulty;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.model.question.Question;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.model.question.Subject;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.model.quiz.QuizResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.model.statistics.TempStatsQnsModel;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * {@code Predicate} that always evaluate to true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    Predicate\u003cNote\u003e PREDICATE_SHOW_ALL_NOTES \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * {@code Predicate} that always evaluate to false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    Predicate\u003cNote\u003e PREDICATE_SHOW_NO_NOTES \u003d unused -\u003e false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    Predicate\u003cTask\u003e PREDICATE_SHOW_ALL_TASKS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * {@code Predicate} that always evaluate to true"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    Predicate\u003cQuestion\u003e PREDICATE_SHOW_ALL_QUESTIONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBookFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces address book data with the data in {@code addressBook}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBook(ReadOnlyAddressBook addressBook);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * Returns the AddressBook"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * Returns true if a note with the same identity as {@code note} exists in the address book."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    boolean hasNote(Note note);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * Deletes the given existing lecture note."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    void deleteNote(Note target);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * Adds the given (not yet existing) lecture note."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    void addNote(Note note);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    boolean hasTask(Task task);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    void deleteTask(Task target);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    void addTask(Task task);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * Replaces the given lecture note {@code target} with {@code editedNote}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * The title of {@code editedNote} must not be the same as another existing lecture note in the address book."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    void setNote(Note target, Note editedNote);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * Returns an unmodifiable view of the filtered note list"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    ObservableList\u003cNote\u003e getFilteredNoteList();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * Returns an unmodifiable view of the filtered task list"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    ObservableList\u003cTask\u003e getFilteredTaskList();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * Updates the filter of the filtered note list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    void updateFilteredNoteList(Predicate\u003cNote\u003e predicate);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * Updates the filter of the filtered task list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    void updateFilteredTaskList(Predicate\u003cTask\u003e predicate);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    Note getNote(Note note);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * Returns true if a question with the same identity as {@code question} exists in NUStudy."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    boolean hasQuestion(Question question);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * Adds the given question."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * {@code question} must not already exist in NUStudy."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    void addQuestion(Question question);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * Deletes the given question."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * The question must exist in NUStudy."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    void deleteQuestion(Question target);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * Replaces the given question {@code target} with {@code editedQuestion}."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * {@code target} must exist in NUStudy."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * The question body of {@code editedQuestion} must not be the same as another existing question in NUStudy."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    void setQuestion(Question target, Question editedQuestion);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * Returns an unmodifiable view of the filtered question list"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    ObservableList\u003cQuestion\u003e getFilteredQuestionList();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * Updates the filter of the filtered question list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    void updateFilteredQuestionList(Predicate\u003cQuestion\u003e predicate);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * Returns a question list with specific {@code numOfQuestions}, {@code subject} and {@code difficulty}."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    ObservableList\u003cQuestion\u003e getQuizQuestions(int numOfQuestions, Subject subject, Difficulty difficulty);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * Sets the question list in quiz as {@code quizQuestionList}."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    void setQuizQuestionList(ObservableList\u003cQuestion\u003e quizQuestionList);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    void setTask(Task target, Task editedTask);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * Returns an unmodifiable view of the filtered quiz question list."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    ObservableList\u003cQuestion\u003e getFilteredQuizQuestionList();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     * Returns an unmodifiable view of the filtered quiz result list."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    ObservableList\u003cQuizResult\u003e getFilteredQuizResultList();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * Checks the an answer input by user and return the boolean value as the result."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    boolean checkQuizAnswer(int index, Answer answer);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    void addQuizResult(QuizResult quizResult);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * Clears the quiz question list."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    void clearQuizQuestionList();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    void markTaskAsDone(Task taskDone);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    void clearTaskList();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * Returns an answer for question in quiz with specific {@code index}."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    Answer showQuizAnswer(int index);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     * Returns the total number of questions answered."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    int getTotalQuestionsDone();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     * Returns the total number of questions answered correctly."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    int getTotalQuestionsCorrect();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     * Returns the total number of questions answered incorrectly."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    int getTotalQuestionsIncorrect();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     * Returns an unmodifiable view of a list correct questions."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    void setCorrectQnsList();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     * Returns an unmodifiable view of a list incorrect questions."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    void setIncorrectQnsList();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     * Returns an unmodifiable view of the pie chart data."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    ObservableList\u003cPieChart.Data\u003e getStatsChartData();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    ObservableList\u003cTempStatsQnsModel\u003e getStatsQnsList();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 15,
      "shuiyao-sg": 26,
      "Auxinnn": 52,
      "irene-lly": 44,
      "ShirleyWangxt": 29,
      "-": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import javafx.scene.chart.PieChart;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.model.question.Answer;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.model.question.Difficulty;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.model.question.Question;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.model.question.Subject;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.model.quiz.QuizResult;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.model.statistics.TempStatsQnsModel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    private final FilteredList\u003cNote\u003e filteredNotes;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    private final FilteredList\u003cQuestion\u003e filteredQuestions;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    private final FilteredList\u003cQuestion\u003e filteredQuizQuestions;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    private final FilteredList\u003cQuizResult\u003e filteredQuizResults;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    private final FilteredList\u003cTask\u003e filteredTasks;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    private ObservableList\u003cTempStatsQnsModel\u003e statsQnsList;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d new AddressBook(addressBook);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        filteredNotes \u003d new FilteredList\u003c\u003e(this.addressBook.getNoteList());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        filteredQuestions \u003d new FilteredList\u003c\u003e(this.addressBook.getQuestionList());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        filteredQuizQuestions \u003d new FilteredList\u003c\u003e(this.addressBook.getQuizQuestionList());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        filteredQuizResults \u003d new FilteredList\u003c\u003e(this.addressBook.getQuizResultList());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        filteredTasks \u003d new FilteredList\u003c\u003e(this.addressBook.getTaskList());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new AddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getAddressBookFilePath();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(addressBookFilePath);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBook(ReadOnlyAddressBook addressBook) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook.resetData(addressBook);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    // note"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public boolean hasNote(Note note) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        requireNonNull(note);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        return addressBook.hasNote(note);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void deleteNote(Note target) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        addressBook.removeNote(target);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void addNote(Note note) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        addressBook.addNote(note);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        updateFilteredNoteList(PREDICATE_SHOW_ALL_NOTES);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void setNote(Note target, Note editedNote) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        requireAllNonNull(target, editedNote);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        addressBook.setNote(target, editedNote);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    // question"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public boolean hasQuestion(Question question) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        requireNonNull(question);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        return addressBook.hasQuestion(question);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public void deleteQuestion(Question target) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        addressBook.removeQuestion(target);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public void addQuestion(Question question) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        addressBook.addQuestion(question);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        updateFilteredQuestionList(PREDICATE_SHOW_ALL_QUESTIONS);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public void setQuestion(Question target, Question editedQuestion) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        requireAllNonNull(target, editedQuestion);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        addressBook.setQuestion(target, editedQuestion);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public Note getNote(Note note) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        requireNonNull(note);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        return addressBook.getNote(note);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    //quiz"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public ObservableList\u003cQuestion\u003e getQuizQuestions(int numOfQuestions, Subject subject, Difficulty difficulty) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        requireAllNonNull(subject, difficulty);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        return addressBook.getQuizQuestions(numOfQuestions, subject, difficulty);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public void setQuizQuestionList(ObservableList\u003cQuestion\u003e quizQuestionList) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        requireNonNull(quizQuestionList);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        addressBook.setQuizQuestionList(quizQuestionList);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public Answer showQuizAnswer(int index) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        return addressBook.showQuizAnswer(index);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public boolean checkQuizAnswer(int index, Answer answer) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        requireNonNull(answer);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        return addressBook.checkQuizAnswer(index, answer);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public void addQuizResult(QuizResult quizResult) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        requireNonNull(quizResult);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        addressBook.addQuizResult(quizResult);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public void clearQuizQuestionList() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        addressBook.clearQuizQuestionList();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Note List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Note}s backed by the internal list of"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public ObservableList\u003cNote\u003e getFilteredNoteList() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        return filteredNotes;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void updateFilteredNoteList(Predicate\u003cNote\u003e predicate) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        filteredNotes.setPredicate(predicate);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Question List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Question} backed by the internal list of"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public ObservableList\u003cQuestion\u003e getFilteredQuestionList() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        return filteredQuestions;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public void updateFilteredQuestionList(Predicate\u003cQuestion\u003e predicate) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        filteredQuestions.setPredicate(predicate);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Quiz Question List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public ObservableList\u003cQuestion\u003e getFilteredQuizQuestionList() {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        return filteredQuizQuestions;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public ObservableList\u003cQuizResult\u003e getFilteredQuizResultList() {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        return filteredQuizResults;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Task List accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        requireNonNull(task);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        return addressBook.hasTask(task);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public void deleteTask(Task target) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        addressBook.removeTask(target);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        addressBook.addTask(task);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public void setTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        requireAllNonNull(target, editedTask);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        addressBook.setTask(target, editedTask);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public void markTaskAsDone(Task taskDone) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        addressBook.markTaskAsDone(taskDone);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Task}s backed by the internal list of"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public ObservableList\u003cTask\u003e getFilteredTaskList() {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        return filteredTasks;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public void updateFilteredTaskList(Predicate\u003cTask\u003e predicate) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        filteredTasks.setPredicate(predicate);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public void clearTaskList() {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        addressBook.clearTaskList();"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.equals(other.addressBook)"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                \u0026\u0026 filteredNotes.equals(other.filteredNotes)"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                \u0026\u0026 filteredQuestions.equals(other.filteredQuestions)"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "                \u0026\u0026 filteredTasks.equals(other.filteredTasks);"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Statistics \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    /*@Override"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public void setStatistics() {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        filteredQuizResults \u003d new FilteredList\u003c\u003e(this.addressBook.getQuizResultList());"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public ObservableList\u003cTempStatsQnsModel\u003e getStatsQnsList() {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        return statsQnsList;"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public int getTotalQuestionsDone() {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        return addressBook.getTotalQuestionsDone();"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public int getTotalQuestionsCorrect() {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        return addressBook.getTotalQuestionsCorrect();"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public int getTotalQuestionsIncorrect() {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        return addressBook.getTotalQuestionsIncorrect();"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public void setCorrectQnsList() {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        statsQnsList \u003d addressBook.getCorrectQns();"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public void setIncorrectQnsList() {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        statsQnsList \u003d addressBook.getIncorrectQns();"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public ObservableList\u003cPieChart.Data\u003e getStatsChartData() {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        ObservableList\u003cPieChart.Data\u003e pieChartData \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        pieChartData.add(new PieChart.Data(\"Correct\", getTotalQuestionsCorrect()));"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        pieChartData.add(new PieChart.Data(\"Incorrect\", getTotalQuestionsIncorrect()));"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        return pieChartData;"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 21,
      "shuiyao-sg": 47,
      "Auxinnn": 43,
      "irene-lly": 62,
      "ShirleyWangxt": 47,
      "-": 144
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyAddressBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.model.question.Question;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.model.quiz.QuizResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": " * Unmodifiable view of a lecture note list and a question list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * Returns an unmodifiable view of the lecture note list."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * This list will not contain any duplicate titles."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    ObservableList\u003cNote\u003e getNoteList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * Returns an unmodifiable view of the questions list."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * This list will not contain any duplicate questions."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    ObservableList\u003cQuestion\u003e getQuestionList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * Returns an unmodifiable view of the quiz question list."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    ObservableList\u003cQuestion\u003e getQuizQuestionList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * Returns an unmodifiable view of the quiz result list."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    ObservableList\u003cQuizResult\u003e getQuizResultList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * Returns an unmodifiable view of the task list."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    List\u003cTask\u003e getTaskList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 4,
      "shuiyao-sg": 7,
      "Auxinnn": 8,
      "ShirleyWangxt": 8,
      "-": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    private Path addressBookFilePath \u003d Paths.get(\"data\" , \"data.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        setAddressBookFilePath(newUserPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookFilePath;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookFilePath \u003d addressBookFilePath;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 addressBookFilePath.equals(o.addressBookFilePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(guiSettings, addressBookFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 1,
      "-": 86
    }
  },
  {
    "path": "src/main/java/seedu/address/model/note/Content.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "package seedu.address.model.note;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": " * Represents a lecture note\u0027s contents. They are only guaranteed immutable and non-blank;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": " * in particular there can be duplicates."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "public class Content {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"The contents can take any non-blank value\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public final String content;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * Constructs a {@code Content} object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * @param content Valid content."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public Content(String content) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        requireNonNull(content);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        checkArgument(isValidContent(content), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        this.content \u003d content;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * Returns true if a given string represents valid content."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public static boolean isValidContent(String test) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        return test.trim().length() \u003e 0;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        return content;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                || (other instanceof Content // instanceof handles nulls"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                \u0026\u0026 content.equals(((Content) other).content)); // state check"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        return content.hashCode();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/model/note/Note.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "package seedu.address.model.note;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": " * Represents an NUStudy lecture note. Its title and content are guaranteed non-null."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "public class Note {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    private final Title title;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    private final Content content;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * Constructs a new lecture note. Both fields must be present and non-null."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * @param title The lecture note\u0027s title, which must be unique among all lecture notes."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * @param content The lecture note\u0027s content (newlines are supported), which do not have to be unique."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public Note(Title title, Content content) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        requireAllNonNull(title, content);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        this.content \u003d content;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public Title getTitle() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public Content getContent() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        return content;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * Returns true if both lecture notes have the same title."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * This defines a weaker notion of equality."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public boolean isSameNote(Note other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        return other !\u003d null \u0026\u0026 other.getTitle().equals(getTitle());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * Returns true if both lecture notes have the same title and content."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * This defines a stronger notion of equality."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        if (!(other instanceof Note)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        Note otherNote \u003d (Note) other;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        return otherNote.getTitle().equals(getTitle()) \u0026\u0026 otherNote.getContent().equals(getContent());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        return Objects.hash(title, content);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        return getTitle() + \"\\n\" + getContent();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 29,
      "-": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/model/note/Title.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "package seedu.address.model.note;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": " * Represents a lecture note\u0027s title. Titles are guaranteed to be unique among lecture notes."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": " * They are also immutable and guaranteed to be valid as declared in {@link #isValidTitle(String)}."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "public class Title {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Titles should begin with a non-whitespace character \""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            + \"and not contain newlines or tabs, but are otherwise unrestricted\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    private static final String VALIDATION_REGEX \u003d \"\\\\S[ \\\\S]*\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public final String title;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * Constructs a {@code Title}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * @param title A valid title."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public Title(String title) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        requireNonNull(title);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        checkArgument(isValidTitle(title), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * Returns true if a given string is a valid title."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public static boolean isValidTitle(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                || (other instanceof Title // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                \u0026\u0026 title.equals(((Title) other).title)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        return title.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/model/note/TitleContainsKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "package seedu.address.model.note;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": " * Tests that a {@code Note}\u0027s {@code Title} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "public class TitleContainsKeywordsPredicate implements Predicate\u003cNote\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public TitleContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public boolean test(Note note) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(note.getTitle().title, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                || (other instanceof TitleContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                \u0026\u0026 keywords.equals(((TitleContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 8,
      "-": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/model/note/UniqueNoteList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "package seedu.address.model.note;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.note.exceptions.DuplicateTitleException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.note.exceptions.NoteNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": " * A list of lecture notes that enforces uniqueness between their titles, using {@code Note#isSameNote(Note)}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": " * for adding/updating and {@code Note#equals(Object)} for deleting. Supports a minimal set of list operations."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": " * @see Note#isSameNote(Note)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "public class UniqueNoteList implements Iterable\u003cNote\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    private final ObservableList\u003cNote\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    private final ObservableList\u003cNote\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * Returns true if the list contains a lecture note sharing title with the given argument."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public boolean contains(Note toCheck) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameNote);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * Adds a lecture note to the list. The title must be different from all existing ones."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void add(Note toAdd) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            throw new DuplicateTitleException();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * Replaces the existing lecture note {@code target} in the list with {@code edited}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * The new title must be different from all existing ones."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void setNote(Note target, Note edited) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        requireAllNonNull(target, edited);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            throw new NoteNotFoundException();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        if (!target.isSameNote(edited) \u0026\u0026 contains(edited)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            throw new DuplicateTitleException();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        internalList.set(index, edited);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * Removes the equivalent, existing lecture note from the list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void remove(Note toRemove) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            throw new NoteNotFoundException();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public Note get(Note note) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        for (Note toGet : internalList) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            if (toGet.isSameNote(note)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "                return toGet;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        throw new NoteNotFoundException();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void setNotes(UniqueNoteList replacement) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * Replaces the contents of this list with {@code notes} containing no duplicates."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void setNotes(List\u003cNote\u003e notes) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        requireAllNonNull(notes);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        if (!notesAreUnique(notes)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            throw new DuplicateTitleException();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        internalList.setAll(notes);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public ObservableList\u003cNote\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public Iterator\u003cNote\u003e iterator() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                || (other instanceof UniqueNoteList // instanceof handles nulls"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueNoteList) other).internalList));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * Returns true if {@code note} contains only unique notes."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    private boolean notesAreUnique(List\u003cNote\u003e notes) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        for (int i \u003d 0; i \u003c notes.size() - 1; i++) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            for (int j \u003d i + 1; j \u003c notes.size(); j++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                if (notes.get(i).isSameNote(notes.get(j))) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 127,
      "shuiyao-sg": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/model/note/exceptions/DuplicateTitleException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "package seedu.address.model.note.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": " * Signals that the operation will result in lecture notes with duplicate titles."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "public class DuplicateTitleException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public DuplicateTitleException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        super(\"Operation would result in lecture notes with duplicate titles\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/note/exceptions/NoteNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "package seedu.address.model.note.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": " * Signals that the operation is unable to find the specified lecture note."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "public class NoteNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/question/Answer.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "package seedu.address.model.question;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": " * Represents a question\u0027s answer. Answers are guaranteed to be unique among questions."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": " * They are also immutable and guaranteed to be valid."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "public class Answer {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"The answers can take any non-blank value.\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public final String answer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * Constructs a {@code Answer} object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * @param answer Valid answer."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public Answer(String answer) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        requireNonNull(answer);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        checkArgument(isValidAnswer(answer), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        this.answer \u003d answer;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * Returns true if a given string represents valid answer."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public static boolean isValidAnswer(String test) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        return test.trim().length() \u003e 0;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        return answer;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "                || (other instanceof Answer // instanceof handles nulls"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "                \u0026\u0026 answer.equals(((Answer) other).answer)); // state check"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        return answer.hashCode();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Auxinnn": 47,
      "ShirleyWangxt": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/question/Difficulty.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "package seedu.address.model.question;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": " * Represents a question\u0027s difficulty. Difficulties are only guaranteed immutable and non-blank;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": " * in particular there can be duplicates."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "public class Difficulty {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Difficulty should begin with a non-white space character \""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            + \"and only covers the existed difficulty in the database\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public final String difficulty;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * Constructs a {@code Difficulty}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * @param difficulty Valid difficulty"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public Difficulty(String difficulty) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        requireNonNull(difficulty);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        checkArgument(isValidDifficulty(difficulty), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        this.difficulty \u003d difficulty;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * Returns true if a given string is a valid difficulty."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public static boolean isValidDifficulty(String test) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        return test.trim().length() \u003e 0;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        return difficulty;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "                || (other instanceof Difficulty)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "                \u0026\u0026 difficulty.equals(((Difficulty) other).difficulty);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        return difficulty.hashCode();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Auxinnn": 48,
      "ShirleyWangxt": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/question/Question.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "package seedu.address.model.question;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": " * Represents a question. Its contents, answers, difficulty and subjects are guaranteed non-null."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "public class Question {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    private final QuestionBody questionBody;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    private final Answer answer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    private final Subject subject;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    private final Difficulty difficulty;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * Constructs a new question. All fields must be present and non-null."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * @param questionBody    The questions\u0027s content, which must be unique."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * @param answer     The question\u0027s answer, which do not have to be unique."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * @param subject    The question\u0027s subject, which do not have to be unique."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * @param difficulty The question\u0027s difficulty, which do not have to be unique."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public Question(QuestionBody questionBody, Answer answer, Subject subject, Difficulty difficulty) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        requireAllNonNull(questionBody, answer, subject, difficulty);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        this.questionBody \u003d questionBody;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        this.answer \u003d answer;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        this.subject \u003d subject;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        this.difficulty \u003d difficulty;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public QuestionBody getQuestionBody() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        return questionBody;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public Answer getAnswer() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        return answer;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public Subject getSubject() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        return subject;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public Difficulty getDifficulty() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        return difficulty;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * Returns true if both questions have the same content."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public boolean isSameQuestion(Question other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        return other !\u003d null \u0026\u0026 other.getQuestionBody().equals(getQuestionBody());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * Returns true if both questions have the same identity and data fields."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * This defines a stronger notion of equality between two questions."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        if (!(other instanceof Question)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        Question otherQuestion \u003d (Question) other;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        return otherQuestion.getQuestionBody().equals(getQuestionBody())"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                \u0026\u0026 otherQuestion.getAnswer().equals(getAnswer())"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                \u0026\u0026 otherQuestion.getSubject().equals(getSubject())"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                \u0026\u0026 otherQuestion.getDifficulty().equals(getDifficulty());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        return Objects.hash(questionBody, answer, subject, difficulty);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        return \"Question: \" + getQuestionBody() + \"\\n\" + \"Answer: \" + getAnswer() + \"\\n\""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                + \"Subject: \" + getSubject() + \"\\n\" + \"Difficulty: \" + getDifficulty();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Auxinnn": 50,
      "ShirleyWangxt": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/model/question/QuestionBody.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "package seedu.address.model.question;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": " * Represents a question\u0027s content body. Bodies are guaranteed to be unique among questions."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": " * They are also immutable and guaranteed to be valid."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "public class QuestionBody {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"The question bodies can take any non-blank value.\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public final String body;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * Constructs a {@code Content} object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * @param body Valid body."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public QuestionBody(String body) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        requireNonNull(body);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        checkArgument(isValidQuestionBody(body), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        this.body \u003d body;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * Returns true if a given string represents valid body."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public static boolean isValidQuestionBody(String test) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        return test.trim().length() \u003e 0;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        return body;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                || (other instanceof QuestionBody // instanceof handles nulls"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                \u0026\u0026 body.equals(((QuestionBody) other).body)); // state check"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        return body.hashCode();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShirleyWangxt": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/model/question/Subject.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "package seedu.address.model.question;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": " * Represents a question\u0027s subject. Subjects are only guaranteed immutable and non-blank;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": " * in particular there can be duplicates."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "public class Subject {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Subjects should begin with a non-white space character \""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            + \"and only covers the existed subjects in the database\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public final String subject;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * Constructs a {@code Subject} object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * @param subject A valid subject."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public Subject(String subject) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        requireNonNull(subject);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        checkArgument(isValidSubject(subject), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        this.subject \u003d subject;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * Returns true if a given string is a valid subject."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public static boolean isValidSubject(String test) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        return test.trim().length() \u003e 0;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        return subject;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "                || (other instanceof Subject // instanceof handles nulls"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "                \u0026\u0026 subject.equals(((Subject) other).subject)); // state check"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        return subject.hashCode();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Auxinnn": 48,
      "ShirleyWangxt": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/question/UniqueQuestionList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "package seedu.address.model.question;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.model.question.exceptions.DuplicateQuestionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.model.question.exceptions.QuestionNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": " * A list of questions that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": " * A question is considered unique by comparing using {@code Question#isSameQuestion(Question)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": " * As such, adding and updating of questions uses Question#isSameQuestion(Question) for equality so as to ensure that"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": " * the question being added or updated is unique in terms of identity in the UniqueQuestionList."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": " * However, the removal of a question uses Question#equals(Object) so as to ensure that the question"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": " * with exactly the same fields will be removed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": " * todo: relevant modification methods will be implemented later."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": " *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": " * @see Question#isSameQuestion(Question)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "public class UniqueQuestionList implements Iterable\u003cQuestion\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    private final ObservableList\u003cQuestion\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    private final ObservableList\u003cQuestion\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * Returns true if the list contains an equivalent question as the given argument."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public boolean contains(Question toCheck) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameQuestion);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * Adds a question to the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * The question must not already exist in the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public void add(Question toAdd) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            throw new DuplicateQuestionException();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * Replaces the question {@code target} in the list with {@code editedQuestion}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * The question body of {@code editedPerson} must not be the same as another existing question in the list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public void setQuestion(Question target, Question editedQuestion) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        requireAllNonNull(target, editedQuestion);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            throw new QuestionNotFoundException();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        if (!target.isSameQuestion(editedQuestion) \u0026\u0026 contains(editedQuestion)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            throw new DuplicateQuestionException();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        internalList.set(index, editedQuestion);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * Removes the equivalent question from the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * The question must exist in the list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public void remove(Question toRemove) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            throw new QuestionNotFoundException();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public void setQuestions(UniqueQuestionList replacement) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * Replaces the contents of this list with {@code questions}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * {@code persons} must not contain duplicate questions."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public void setQuestions(List\u003cQuestion\u003e questions) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        requireAllNonNull(questions);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        if (!questionsAreUnique(questions)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            throw new DuplicateQuestionException();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        internalList.setAll(questions);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public ObservableList\u003cQuestion\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public Question get(int index) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        return internalList.get(index);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        return internalList.size();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public Iterator\u003cQuestion\u003e iterator() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                || (other instanceof UniqueQuestionList // instanceof handles nulls"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueQuestionList) other).internalList));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * Returns true if {@code questions} contains only unique questions."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    private boolean questionsAreUnique(List\u003cQuestion\u003e questions) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        for (int i \u003d 0; i \u003c questions.size() - 1; i++) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            for (int j \u003d i + 1; j \u003c questions.size(); j++) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                if (questions.get(i).isSameQuestion(questions.get(j))) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Auxinnn": 27,
      "ShirleyWangxt": 120
    }
  },
  {
    "path": "src/main/java/seedu/address/model/question/exceptions/DuplicateQuestionException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "package seedu.address.model.question.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": " * Signals that the operation will result in questions with duplicate bodies. (Persons are considered duplicates"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": " * if they have the same body)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "public class DuplicateQuestionException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public DuplicateQuestionException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        super(\"Operation would result in duplicate questions\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShirleyWangxt": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/question/exceptions/QuestionNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "package seedu.address.model.question.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": " * Signals that the operation is unable to find the specified question."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "public class QuestionNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShirleyWangxt": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/quiz/QuizQuestionList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "package seedu.address.model.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.model.question.Answer;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.model.question.Question;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": " * A list of quiz questions."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "public class QuizQuestionList implements Iterable\u003cQuestion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    private final ObservableList\u003cQuestion\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    private final ObservableList\u003cQuestion\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * Sets the question list in quiz as {@code quizQuestionList}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public void setQuizQuestionList(ObservableList\u003cQuestion\u003e quizQuestionList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        internalList.setAll(quizQuestionList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public Question get(int index) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        return internalList.get(index);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * Returns an answer for the question in quiz with specific {@code index}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public Answer showAnswer(int index) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        return get(index).getAnswer();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * Checks if the answer input by user is correct and return a boolean value to show the result."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public boolean checkQuizAnswer(int index, Answer answer) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        requireAllNonNull(answer);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        return get(index).getAnswer().equals(answer);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * Clears the quiz question list."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public void clearQuizQuestionList() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        internalList.clear();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public ObservableList\u003cQuestion\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public Iterator\u003cQuestion\u003e iterator() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "                || (other instanceof QuizQuestionList // instanceof handles nulls"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "                \u0026\u0026 internalList.equals(((QuizQuestionList) other).internalList));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Auxinnn": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/model/quiz/QuizResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "package seedu.address.model.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.model.question.Answer;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.model.question.QuestionBody;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "irene-lly"
        },
        "content": " * Represents a question. Its answer, questionBody, quizTime and result are guaranteed non-null."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "irene-lly"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "public class QuizResult {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    private final Answer answer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    private final QuestionBody questionBody;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    private final String quizTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    private final boolean result;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public QuizResult(Answer answer, QuestionBody questionBody, String quizTime, boolean result) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        this.answer \u003d answer;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        this.questionBody \u003d questionBody;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        this.quizTime \u003d quizTime;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        this.result \u003d result;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public Answer getAnswer() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        return answer;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public QuestionBody getQuestionBody() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        return questionBody;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public String getQuizTime() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        return quizTime;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public boolean getResult() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        if (!(other instanceof QuizResult)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        QuizResult otherQuizResult \u003d (QuizResult) other;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        return otherQuizResult.getQuizTime().equals(getQuizTime());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        return Objects.hash(answer, questionBody, quizTime, result);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        return answer.toString() + \" \" + questionBody.toString();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Auxinnn": 1,
      "irene-lly": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/model/quiz/QuizResultList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "package seedu.address.model.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.model.statistics.TempStatsQnsModel;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "irene-lly"
        },
        "content": " * Represents a quiz result list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "irene-lly"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "public class QuizResultList implements Iterable\u003cQuizResult\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    private final ObservableList\u003cQuizResult\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    private final ObservableList\u003cQuizResult\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    //will be changed to \u003cQuestion\u003e later"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    private final ObservableList\u003cTempStatsQnsModel\u003e correctQns \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    private final ObservableList\u003cTempStatsQnsModel\u003e incorrectQns \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    private int totalQuestionsCorrect \u003d 0;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    private int totalQuestionsIncorrect \u003d 0;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     * Adds a quiz result to the result list. The result must be different from all existing ones."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public void add(QuizResult quizResult) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        requireNonNull(quizResult);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        if (quizResult.getResult()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            totalQuestionsCorrect++;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            correctQns.add(new TempStatsQnsModel(quizResult.getQuestionBody(), quizResult.getAnswer()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            totalQuestionsIncorrect++;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            incorrectQns.add(new TempStatsQnsModel(quizResult.getQuestionBody(), quizResult.getAnswer()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        internalList.add(quizResult);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     * Returns true if the list contains a quiz result which equals with the given argument."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public boolean contains(QuizResult toCheck) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::equals);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public QuizResult get(int index) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        return internalList.get(index);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public ObservableList\u003cQuizResult\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public int getTotalQuestionsDone() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        return internalList.size();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public int getTotalQuestionsCorrect() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        return totalQuestionsCorrect;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public int getTotalQuestionsIncorrect() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        return totalQuestionsIncorrect;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public ObservableList\u003cTempStatsQnsModel\u003e getCorrectQns() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        return FXCollections.unmodifiableObservableList(correctQns);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public ObservableList\u003cTempStatsQnsModel\u003e getIncorrectQns() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        return FXCollections.unmodifiableObservableList(incorrectQns);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public Iterator\u003cQuizResult\u003e iterator() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Auxinnn": 3,
      "irene-lly": 82
    }
  },
  {
    "path": "src/main/java/seedu/address/model/statistics/Statistics.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "package seedu.address.model.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "irene-lly"
        },
        "content": " * Represents a statistics object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "irene-lly"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "public class Statistics {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public final double correct;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public final double incorrect;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public final List\u003cDouble\u003e statistics;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public Statistics() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        this.correct \u003d 0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        this.incorrect \u003d 0;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        this.statistics \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public Statistics(double correct, double incorrect) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        requireNonNull(correct);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        requireNonNull(incorrect);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        this.correct \u003d correct;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        this.incorrect \u003d incorrect;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        this.statistics \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        statistics.add(correct);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        statistics.add(incorrect);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public boolean hasStatistics() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        return !(correct \u003d\u003d 0 \u0026\u0026 incorrect \u003d\u003d 0);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public List\u003cDouble\u003e getStatistics() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        return statistics;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        return \"Correct: \" + correct + \"\\nIncorrect: \" + incorrect;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                || (other instanceof Statistics // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                \u0026\u0026 correct \u003d\u003d ((Statistics) other).correct"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                \u0026\u0026 incorrect \u003d\u003d ((Statistics) other).incorrect); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        return Objects.hash(correct, incorrect);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "irene-lly": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/model/statistics/TempStatsQnsModel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "package seedu.address.model.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.model.question.Answer;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.model.question.QuestionBody;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "irene-lly"
        },
        "content": " * Basic question model derived from quiz results."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "irene-lly"
        },
        "content": " * This class is temporary."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "irene-lly"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "public class TempStatsQnsModel {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    private QuestionBody question;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    private Answer answer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public TempStatsQnsModel(QuestionBody question, Answer answer) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        this.question \u003d question;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        this.answer \u003d answer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public String getQuestion() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        return question.toString();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public String getAnswer() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        return answer.toString();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        return question + \"\\n   \" + answer + \"\\n\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "irene-lly": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/QuestionStub.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.model.note.Content;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.model.note.Title;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": " * Represents a stub for Question class."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "class QuestionStub {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    private final Title title;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    private final Content content;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    QuestionStub(Title title, Content content) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        requireAllNonNull(title, content);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        this.content \u003d content;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    private Title getTitle() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    private Content getContent() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        return content;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        return getTitle() + \"\\n\" + getContent();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shuiyao-sg": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/Task.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.model.task.exceptions.RedundantOperationException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": " * Represents a NUStudy revision task. Its"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public static final String MESSAGE_DATE_CONSTRAINT \u003d \"Please follow Singapore local date format \u0027dd/MM/yyyy\u0027,\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            + \"with 1 \u003c\u003d dd \u003c\u003d 31, 1 \u003c\u003d MM \u003c\u003d 12, -9999 \u003c yyyy \u003c 9999\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public static final String MESSAGE_TIME_CONSTRAINT \u003d \"Please follow Singapore local time format \u0027HH/mm\u0027,\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            + \"with 00 \u003c\u003d HH \u003c\u003d 23, 00 \u003c\u003d mm \u003c\u003d 59\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public static final DateTimeFormatter FORMAT_FILE_DATE_STRING \u003d DateTimeFormatter.ofPattern(\"dd MMMM yyyy\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public static final DateTimeFormatter FORMAT_FILE_TIME_STRING \u003d DateTimeFormatter.ofPattern(\"HH:mm\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public static final DateTimeFormatter FORMAT_USER_INPUT_DATE \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public static final DateTimeFormatter FORMAT_USER_INPUT_TIME \u003d DateTimeFormatter.ofPattern(\"HHmm\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    private LocalTime time;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    Task(LocalDate date, LocalTime time) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public Task(LocalDate date, LocalTime time, boolean isDone) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public static boolean isValidStatusIcon(String status) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        return status.equals(\"[Y]\") || status.equals(\"[N]\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * Gets status icon."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * @return \"Y\" if done. \"N\" if not done."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        return (isDone ? \"[\" + \"Y\" + \"]\" : \"[\" + \"N\" + \"]\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public abstract String toString();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public LocalTime getTime() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public abstract boolean equals(Object other);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public abstract Note getNote();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public abstract void setNote(Note note);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * Marks the task as done."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * @return The done task object."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public Task markAsDone() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        if (this.isDone) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            throw new RedundantOperationException(\"The task has already been marked done\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shuiyao-sg": 87
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/TaskForNote.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": " * Represents a task for revision of notes."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "public class TaskForNote extends Task {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    private Note note;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * Constructs a new revision task for lecture notes. Date field must be non-null."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * @param note The lecture notes to be revised."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * @param date The date by when the task should be done."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * @param time The time in a day by which the task should be done."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public TaskForNote(Note note, LocalDate date, LocalTime time) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        super(date, time);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        this.note \u003d note;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public TaskForNote(Note note, LocalDate date, LocalTime time, boolean isDone) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        super(date, time, isDone);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        this.note \u003d note;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public void setNote(Note note) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        requireNonNull(note);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        this.note \u003d note;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public Note getNote() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        return this.note;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        return super.getStatusIcon() + \" \" + note.toString() + \" by: \" + super.getDate().format(FORMAT_FILE_DATE_STRING)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "                + \" \" + super.getTime().format(FORMAT_FILE_TIME_STRING);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        if (!(other instanceof TaskForNote)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        TaskForNote otherTask \u003d (TaskForNote) other;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        return this.note.isSameNote(otherTask.note)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "                \u0026\u0026 super.getDate().equals(otherTask.getDate())"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "                \u0026\u0026 super.getTime().equals(otherTask.getTime())"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "                \u0026\u0026 super.getStatusIcon().equals(otherTask.getStatusIcon());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shuiyao-sg": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/TaskList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.model.note.exceptions.NoteNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.model.task.exceptions.DuplicateTaskException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.model.task.exceptions.TaskNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": " * Represents a task list."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "public class TaskList implements Iterable\u003cTask\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    private final ObservableList\u003cTask\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    private final ObservableList\u003cTask\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * Returns true if the list contains a task which equals with the given argument."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public boolean contains(Task toCheck) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::equals);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * Adds a revision task to the task list. The task must be different from all existing ones."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public void add(Task toAdd) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            throw new DuplicateTaskException();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * Replaces the existing revision task {@code target} in the list with {@code edited}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * The new task must be different from all existing ones."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public void setTask(Task target, Task edited) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        requireAllNonNull(target, edited);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            throw new NoteNotFoundException();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        if (!target.equals(edited) \u0026\u0026 contains(edited)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            throw new DuplicateTaskException();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        internalList.set(index, edited);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * Removes the equivalent, existing revision task from the list."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public void remove(Task toRemove) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            throw new TaskNotFoundException();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public Task get(int index) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        return internalList.get(index);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public void setTasks(TaskList replacement) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * Replaces the contents of this list with {@code tasks} containing no duplicates."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public void setTasks(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        requireAllNonNull(tasks);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        //if (!notesAreUnique(tasks)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        //    throw new DuplicateTitleException();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        //}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        internalList.setAll(tasks);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public ObservableList\u003cTask\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public Iterator\u003cTask\u003e iterator() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "                || (other instanceof TaskList // instanceof handles nulls"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "                \u0026\u0026 internalList.equals(((TaskList) other).internalList));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * Marks the selected task as done."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * @param taskDone The task to be marked as done."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public void markTaskAsDone(Task taskDone) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        requireNonNull(taskDone);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        int index \u003d internalList.indexOf(taskDone);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            throw new TaskNotFoundException();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        setTask(taskDone, taskDone.markAsDone());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        internalList.clear();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shuiyao-sg": 134
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/exceptions/DuplicateTaskException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "package seedu.address.model.task.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": " * Signals that the operation will result in duplicate tasks."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "public class DuplicateTaskException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public DuplicateTaskException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        super(\"Operation would result in duplicate tasks\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shuiyao-sg": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/exceptions/RedundantOperationException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "package seedu.address.model.task.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": " * Represents an exception thrown for redundant operations."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "public class RedundantOperationException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public RedundantOperationException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shuiyao-sg": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/exceptions/TaskNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "package seedu.address.model.task.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": " * Signals that the operation is unable to find the specified revision task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "public class TaskNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shuiyao-sg": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.note.Content;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.note.Title;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public static Note[] getSampleNotes() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        return new Note[] {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            new Note(new Title(\"Magnus Carlsen\"), new Content(\"World Chess Champion as of 2012\")),"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            new Note(new Title(\"Russell\u0027s paradox\"), new Content(\"arises in naive set theory\")),"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            new Note(new Title(\"An AVL tree\"), new Content(\"Self-balancing binary search tree. Needs rotations \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                    + \"when adding or deleting. Suitable for the lazy variant of Dijkstra\u0027s algorithm\"))"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook sampleAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        for (Note sampleNote: getSampleNotes()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            sampleAb.addNote(sampleNote);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 11,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedNote.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.note.Content;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.note.Title;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": " * Jackson-friendly version of {@link Note}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "class JsonAdaptedNote {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Lecture note\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    private final String title;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    private final String content;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * Constructs a {@code JsonAdaptedNote} with the given lecture note details."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public JsonAdaptedNote(@JsonProperty(\"title\") String title, @JsonProperty(\"content\") String content) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        this.content \u003d content;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * Converts a given {@code Note} into this class for Jackson use."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public JsonAdaptedNote(Note source) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        title \u003d source.getTitle().title;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        content \u003d source.getContent().content;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * Converts this Jackson-friendly adapted lecture note object into the model\u0027s {@code Note} object."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted note."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public Note toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        if (title \u003d\u003d null) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Title.class.getSimpleName()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        if (!Title.isValidTitle(title)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            throw new IllegalValueException(Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        final Title modelTitle \u003d new Title(title);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        if (content \u003d\u003d null) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Content.class.getSimpleName()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        if (!Content.isValidContent(content)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            throw new IllegalValueException(Content.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        final Content modelContent \u003d new Content(content);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        return new Note(modelTitle, modelContent);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 30,
      "-": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedQuestion.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.model.question.Answer;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.model.question.Difficulty;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.model.question.Question;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.model.question.QuestionBody;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.model.question.Subject;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": " * Jackson-friendly version of {@link Question}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "public class JsonAdaptedQuestion {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Question\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    private final String questionBody;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    private final String answer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    private final String subject;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    private final String difficulty;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * Constructs a {@code JsonAdaptedQuestion} with the given question details."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public JsonAdaptedQuestion(@JsonProperty(\"questionBody\") String questionBody,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                               @JsonProperty(\"answer\") String answer, @JsonProperty(\"subject\") String subject,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                               @JsonProperty(\"difficulty\") String difficulty) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        this.questionBody \u003d questionBody;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        this.answer \u003d answer;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        this.subject \u003d subject;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        this.difficulty \u003d difficulty;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * Converts a given {@code Question} into this class for Jackson use."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public JsonAdaptedQuestion(Question source) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        questionBody \u003d source.getQuestionBody().body;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        answer \u003d source.getAnswer().answer;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        subject \u003d source.getSubject().subject;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        difficulty \u003d source.getDifficulty().difficulty;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * Converts this Jackson-friendly adapted question object into the model\u0027s {@code Question} object."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted question."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public Question toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        if (questionBody \u003d\u003d null) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                    QuestionBody.class.getSimpleName()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        if (!QuestionBody.isValidQuestionBody(questionBody)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            throw new IllegalValueException(QuestionBody.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        final QuestionBody modelQuestionBody \u003d new QuestionBody(questionBody);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        if (answer \u003d\u003d null) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Answer.class.getSimpleName()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        if (!Answer.isValidAnswer(answer)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            throw new IllegalValueException(Answer.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        final Answer modelAnswer \u003d new Answer(answer);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        if (subject \u003d\u003d null) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Subject.class.getSimpleName()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        if (!Subject.isValidSubject(subject)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            throw new IllegalValueException(Subject.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        final Subject modelSubject \u003d new Subject(subject);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        if (difficulty \u003d\u003d null) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                    Difficulty.class.getSimpleName()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        if (!Difficulty.isValidDifficulty(difficulty)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            throw new IllegalValueException(Difficulty.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        final Difficulty modelDifficulty \u003d new Difficulty(difficulty);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        return new Question(modelQuestionBody, modelAnswer, modelSubject, modelDifficulty);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShirleyWangxt": 91
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedQuizResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.model.question.Answer;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.model.question.QuestionBody;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.model.quiz.QuizResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": " * Jackson-friendly version of {@link QuizResult}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "class JsonAdaptedQuizResult {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Quiz result\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    private final String answer;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    private final String questionBody;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    private final String quizTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    private final String result;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * Constructs a {@code JsonAdaptedQuizResult} with the given quiz results."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public JsonAdaptedQuizResult(@JsonProperty(\"answer\") String answer,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "                                 @JsonProperty(\"questionBody\") String questionBody,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "                                 @JsonProperty(\"quizTime\") String quizTime, @JsonProperty(\"result\") String result) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        this.answer \u003d answer;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        this.questionBody \u003d questionBody;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        this.quizTime \u003d quizTime;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        this.result \u003d result;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * Converts a given {@code QuizResult} into this class for Jackson use."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public JsonAdaptedQuizResult(QuizResult source) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        answer \u003d source.getAnswer().toString();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        questionBody \u003d source.getQuestionBody().toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        quizTime \u003d source.getQuizTime();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        result \u003d String.valueOf(source.getResult());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * Converts this Jackson-friendly adapted quiz result object into the model\u0027s {@code QuizResult} object."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted quiz result."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public QuizResult toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        if (answer \u003d\u003d null) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Answer.class.getSimpleName()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        final Answer modelAnswer \u003d new Answer(answer);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        if (questionBody \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "                    QuestionBody.class.getSimpleName()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        final QuestionBody modelQuestionBody \u003d new QuestionBody(questionBody);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        if (quizTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"quizTime\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        final String modelQuizTime \u003d quizTime;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        if (result \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"result\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        final boolean modelResult \u003d Boolean.parseBoolean(result);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        return new QuizResult(modelAnswer, modelQuestionBody, modelQuizTime, modelResult);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Auxinnn": 74
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedTaskForNote.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.model.note.Content;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.model.note.Title;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.model.task.TaskForNote;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": " * Jackson-friendly version of {@link Task}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "class JsonAdaptedTaskForNote {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Revision task\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    private final String title;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    private final String content;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    private final String status;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    private final String date;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    private final String time;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * Constructs a {@code JsonAdaptedTaskForNote} with the given revision task details."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public JsonAdaptedTaskForNote(@JsonProperty(\"title\") String title, @JsonProperty(\"content\") String content,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "                                  @JsonProperty(\"isDone\") String status, @JsonProperty(\"date\") LocalDate date,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "                                  @JsonProperty(\"time\") LocalTime time) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        this.content \u003d content;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        this.date \u003d date.format(Task.FORMAT_FILE_DATE_STRING);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        this.time \u003d time.format(Task.FORMAT_FILE_TIME_STRING);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * Converts a given {@code Task} into this class for Jackson use."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public JsonAdaptedTaskForNote(Task source) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        title \u003d source.getNote().getTitle().title;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        content \u003d source.getNote().getContent().content;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        status \u003d source.getStatusIcon();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        date \u003d source.getDate().toString();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        time \u003d source.getTime().toString();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * Converts this Jackson-friendly adapted task object into the model\u0027s {@code Task} object."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted note."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public Task toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        if (title \u003d\u003d null) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Title.class.getSimpleName()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        if (!Title.isValidTitle(title)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            throw new IllegalValueException(Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        final Title modelTitle \u003d new Title(title);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        if (content \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Content.class.getSimpleName()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        if (!Content.isValidContent(content)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            throw new IllegalValueException(Content.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        final Content modelContent \u003d new Content(content);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        if (status \u003d\u003d null) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Status icon\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        if (!Task.isValidStatusIcon(status)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            throw new IllegalValueException(\"Status icon can either [Y] or [N] only\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        final boolean isDone \u003d status.equals(\"[Y]\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        if (date \u003d\u003d null) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"date\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        final LocalDate modelDate \u003d LocalDate.parse(date, Task.FORMAT_FILE_DATE_STRING);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        if (time \u003d\u003d null) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"time\"));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        final LocalTime modelTime \u003d LocalTime.parse(time, Task.FORMAT_FILE_TIME_STRING);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        final Note modelNote \u003d new Note(modelTitle, modelContent);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        return new TaskForNote(modelNote, modelDate, modelTime, isDone);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shuiyao-sg": 100
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableAddressBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.model.question.Question;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.model.quiz.QuizResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * An Immutable AddressBook that is serializable to JSON format."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "@JsonRootName(value \u003d \"data\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonSerializableAddressBook {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TITLE \u003d \"Lecture note list contains duplicate titles.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TASK \u003d \"Task list contains duplicate tasks.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_QUESTION \u003d \"Question list contains duplicate questions.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_RESULT \u003d \"Quiz result contains duplicate results.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    private final List\u003cJsonAdaptedNote\u003e notes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    private final List\u003cJsonAdaptedTaskForNote\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    private final List\u003cJsonAdaptedQuestion\u003e questions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    private final List\u003cJsonAdaptedQuizResult\u003e quizResults \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * Constructs a {@code JsonSerializableAddressBook} with the given lecture notes, tasks and questions."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public JsonSerializableAddressBook(@JsonProperty(\"notes\") List\u003cJsonAdaptedNote\u003e notes,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                                       @JsonProperty(\"tasks\") List\u003cJsonAdaptedTaskForNote\u003e tasks,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "                                       @JsonProperty(\"questions\") List\u003cJsonAdaptedQuestion\u003e questions,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "                                       @JsonProperty(\"quizResults\") List\u003cJsonAdaptedQuizResult\u003e quizResults) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        this.notes.addAll(notes);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        this.tasks.addAll(tasks);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        this.questions.addAll(questions);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        this.quizResults.addAll(quizResults);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        notes.addAll(source.getNoteList().stream().map(JsonAdaptedNote::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        tasks.addAll(source.getTaskList().stream().map(JsonAdaptedTaskForNote::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        questions.addAll(source.getQuestionList().stream().map(JsonAdaptedQuestion::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        quizResults.addAll(source.getQuizResultList().stream().map(JsonAdaptedQuizResult::new)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this address book into the model\u0027s {@code AddressBook} object."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        for (JsonAdaptedNote jsonAdaptedNote : notes) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            Note note \u003d jsonAdaptedNote.toModelType();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            if (addressBook.hasNote(note)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_TITLE);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            addressBook.addNote(note);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        for (JsonAdaptedTaskForNote jsonAdaptedTaskForNote : tasks) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            Task task \u003d jsonAdaptedTaskForNote.toModelType();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            if (addressBook.hasTask(task)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            addressBook.addTask(task);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        for (JsonAdaptedQuestion jsonAdaptedQuestion : questions) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            Question question \u003d jsonAdaptedQuestion.toModelType();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            if (addressBook.hasQuestion(question)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_QUESTION);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            addressBook.addQuestion(question);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        for (JsonAdaptedQuizResult jsonAdaptedQuizResult : quizResults) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            QuizResult quizResult \u003d jsonAdaptedQuizResult.toModelType();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            if (addressBook.hasQuizResult(quizResult)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_RESULT);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            addressBook.addQuizResult(quizResult);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 11,
      "shuiyao-sg": 13,
      "Auxinnn": 15,
      "ShirleyWangxt": 15,
      "-": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HelpWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://ay1920s1-cs2103t-f11-4.github.io/main/UserGuide.html\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 1,
      "-": 101
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import javafx.scene.control.Tooltip;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import javafx.util.Duration;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.logic.commands.statistics.Type;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.ui.statistics.StatsChart;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.ui.statistics.StatsQnsList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    private NoteListPanel noteListPanel;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    private TaskListPanel taskListPanel;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    private QuestionListPanel questionListPanel;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    private QuizQuestionListPanel quizQuestionListPanel;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    private StatsChart statsChart;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    private StatsQnsList statsQnsList;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    private StackPane noteListPanelPlaceholder;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    private StackPane taskListPanelPlaceholder;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    private StackPane statsPanelPlaceholder;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    private StackPane questionListPanelPlaceholder;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    private StackPane quizQuestionListPanelPlaceholder;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    private HBox mainPanel;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    private VBox stats;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        stats.setVisible(false);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        noteListPanel \u003d new NoteListPanel(logic.getFilteredNoteList());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        noteListPanelPlaceholder.getChildren().add(noteListPanel.getRoot());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        taskListPanel \u003d new TaskListPanel(logic.getFilteredTaskList());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        taskListPanelPlaceholder.getChildren().add(taskListPanel.getRoot());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        questionListPanel \u003d new QuestionListPanel(logic.getFilteredQuestionList());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        questionListPanelPlaceholder.getChildren().add(questionListPanel.getRoot());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        quizQuestionListPanel \u003d new QuizQuestionListPanel(logic.getFilteredQuizQuestionList());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        quizQuestionListPanelPlaceholder.getChildren().add(quizQuestionListPanel.getRoot());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     * Shows a pie chart and returns the value of the data"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     * in each slice of the chart when the mouse hovers over it."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    private void showStats(Type type) throws ParseException {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        mainPanel.setVisible(false);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        stats.setVisible(true);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        case CHART:"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            statsChart \u003d new StatsChart(logic.getStatsChartData(), logic.getTotalQuestionsDone());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            statsPanelPlaceholder.getChildren().add(statsChart.getRoot());"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            statsChart.getChart().getData().forEach(data -\u003e {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                String value \u003d \"\" + (int) data.getPieValue();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                Tooltip toolTip \u003d new Tooltip(value);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                toolTip.setStyle(\"-fx-font-size: 20\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                toolTip.setShowDelay(Duration.seconds(0));"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                Tooltip.install(data.getNode(), toolTip);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            });"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        case QUESTIONS:"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            statsPanelPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            statsQnsList \u003d new StatsQnsList(logic.getStatsQnsList());"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            statsPanelPlaceholder.getChildren().add(statsQnsList.getLabel());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            throw new ParseException(\"Invalid type: \" + type);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     * Remove the pie chart from the noteListPanel."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    private void removeStats() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        mainPanel.setVisible(true);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        stats.setVisible(false);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public NoteListPanel getNoteListPanel() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        return noteListPanel;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            //if (commandResult.isQuiz()) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            //"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            //}"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            if (commandResult.isShowStats()) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                showStats(commandResult.getType());"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                removeStats();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 6,
      "shuiyao-sg": 7,
      "Auxinnn": 10,
      "irene-lly": 68,
      "ShirleyWangxt": 5,
      "-": 173
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/NoteCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": " * An UI component that displays information of a {@code Note}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "public class NoteCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    private static final String FXML \u003d \"NoteListCard.fxml\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public final Note note;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    private Label title;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    private Label content;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public NoteCard(Note note, int displayedIndex) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        this.note \u003d note;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        title.setText(note.getTitle().title);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        content.setText(note.getContent().content);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        if (!(other instanceof NoteCard)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        NoteCard card \u003d (NoteCard) other;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                \u0026\u0026 note.equals(card.note);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 14,
      "-": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/NoteListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": " * Panel containing the list of lecture notes."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "public class NoteListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    private static final String FXML \u003d \"NoteListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(NoteListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    private ListView\u003cNote\u003e noteListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public NoteListPanel(ObservableList\u003cNote\u003e noteList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        noteListView.setItems(noteList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        noteListView.setCellFactory(listView -\u003e new NoteListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Note} using a {@code NoteCard}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    class NoteListViewCell extends ListCell\u003cNote\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        protected void updateItem(Note note, boolean empty) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            super.updateItem(note, empty);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            if (empty || note \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                setGraphic(new NoteCard(note, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 15,
      "-": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/QuestionListCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.model.question.Question;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": " * An UI component that displays information of a {@code Question}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "public class QuestionListCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    private static final String FXML \u003d \"QuestionListCard.fxml\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public final Question question;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    private Label questionBody;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    private Label answer;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    private Label subject;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    private Label difficulty;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public QuestionListCard(Question question, int displayedIndex) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        this.question \u003d question;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        questionBody.setText(question.getQuestionBody().body);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        answer.setText(question.getAnswer().answer);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        subject.setText(question.getSubject().subject);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        difficulty.setText(question.getDifficulty().difficulty);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        if (!(other instanceof QuestionListCard)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        QuestionListCard card \u003d (QuestionListCard) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                \u0026\u0026 question.equals(card.question);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShirleyWangxt": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/QuestionListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.model.question.Question;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": " * Panel containing the list of questions."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "public class QuestionListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    private static final String FXML \u003d \"QuestionListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(QuestionListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    private ListView\u003cQuestion\u003e questionListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public QuestionListPanel(ObservableList\u003cQuestion\u003e questionList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        questionListView.setItems(questionList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        questionListView.setCellFactory(listView -\u003e new QuestionListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Question} using a {@code QuestionCard}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    class QuestionListViewCell extends ListCell\u003cQuestion\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        protected void updateItem(Question question, boolean empty) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            super.updateItem(question, empty);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            if (empty || question \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                setGraphic(new QuestionListCard(question, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShirleyWangxt": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/QuizQuestionListCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.model.question.Question;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": " * An UI component that displays information of a {@code Question} in quiz."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "public class QuizQuestionListCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    private static final String FXML \u003d \"QuizQuestionListCard.fxml\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public final Question question;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    private Label subject;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    private Label questionBody;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public QuizQuestionListCard(Question question, int displayedIndex) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        this.question \u003d question;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        subject.setText(question.getSubject().toString());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        questionBody.setText(question.getQuestionBody().toString());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        if (!(other instanceof QuizQuestionListCard)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        QuizQuestionListCard card \u003d (QuizQuestionListCard) other;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "                \u0026\u0026 question.equals(card.question);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Auxinnn": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/QuizQuestionListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.model.question.Question;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": " * Panel containing the list of quiz questions."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "public class QuizQuestionListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    private static final String FXML \u003d \"QuizQuestionListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(QuizQuestionListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    private ListView\u003cQuestion\u003e quizQuestionListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public QuizQuestionListPanel(ObservableList\u003cQuestion\u003e quizQuestionList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        quizQuestionListView.setItems(quizQuestionList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        quizQuestionListView.setCellFactory(listView -\u003e new QuizQuestionListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Question} using a {@code QuizQuestionListCard}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    class QuizQuestionListViewCell extends ListCell\u003cQuestion\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        protected void updateItem(Question question, boolean empty) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            super.updateItem(question, empty);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            if (empty || question \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "                setGraphic(new QuizQuestionListCard(question, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Auxinnn": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/TaskListCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": " * An UI component that displays information of a {@code Task}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "public class TaskListCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    private static final String FXML \u003d \"TaskListCard.fxml\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public final Task task;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    private Label title;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    //@FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    //private Label content;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    private Label status;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    private Label date;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    private Label time;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public TaskListCard(Task task, int displayedIndex) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        title.setText(task.getNote().getTitle().title);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        //content.setText(note.getContent().content);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        status.setText(task.getStatusIcon());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        date.setText(task.getDate().toString());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        time.setText(task.getTime().toString());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        if (!(other instanceof TaskListCard)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        TaskListCard card \u003d (TaskListCard) other;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "                \u0026\u0026 task.equals(card.task);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "shuiyao-sg": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/TaskListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": " * Panel containing the list of revision tasks."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "public class TaskListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    private static final String FXML \u003d \"TaskListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(NoteListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    private ListView\u003cTask\u003e taskListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public TaskListPanel(ObservableList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        taskListView.setItems(taskList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        taskListView.setCellFactory(listView -\u003e new TaskListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Task} using a {@code TaskListCard}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    class TaskListViewCell extends ListCell\u003cTask\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        protected void updateItem(Task task, boolean empty) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            super.updateItem(task, empty);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            if (empty || task \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "                setGraphic(new TaskListCard(task, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "shuiyao-sg": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/statistics/StatsChart.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "package seedu.address.ui.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import javafx.geometry.Side;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import javafx.scene.chart.PieChart;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "irene-lly"
        },
        "content": " * A UI component that displays statistics."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "irene-lly"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "public class StatsChart extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    private static final String FXML \u003d \"StatsChart.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    private PieChart pc;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    private Label overview;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public StatsChart(ObservableList\u003cPieChart.Data\u003e data, int totalQns) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        pc.setLegendSide(Side.LEFT);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        pc.setData(data);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        overview.setText(\"The total number of questions answered so far: \" + totalQns + \"\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                + \"Number of questions answered correctly: \" + (int) data.get(0).getPieValue() + \"\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                + \"Number of questions answered incorrectly: \" + (int) data.get(1).getPieValue() + \"\\n\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public PieChart getChart() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        return pc;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "irene-lly": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/statistics/StatsQnsList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "package seedu.address.ui.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.model.statistics.TempStatsQnsModel;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "irene-lly"
        },
        "content": " * Temporary panel for returning correct/incorrect questions."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "irene-lly"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "public class StatsQnsList extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    private static final String FXML \u003d \"StatsQnsList.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    private Label qnsListLabel;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public StatsQnsList(ObservableList\u003cTempStatsQnsModel\u003e qnsList) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        qnsListLabel.setText(createLabel(qnsList));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public Label getLabel() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        return qnsListLabel;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     * Returns a string object from a question list."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     * @param qnsList The question list."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     * @return string A string object for the label."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    private String createLabel(List\u003cTempStatsQnsModel\u003e qnsList) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        String qnsListInString \u003d \"\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        int i \u003d 1;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        for (TempStatsQnsModel qnsModel : qnsList) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            qnsListInString +\u003d i + \". \" + qnsModel.toString() + \"\\n\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        return qnsListInString;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "irene-lly": 44
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "         title\u003d\"NUStudy\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        \u003cStackPane minWidth\u003d\"450\" prefWidth\u003d\"450\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "          \u003cHBox fx:id\u003d\"mainPanel\" minWidth\u003d\"450\" prefWidth\u003d\"450\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            \u003cVBox fx:id\u003d\"noteList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"440\" prefWidth\u003d\"440\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cpadding\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003c/padding\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "              \u003cStackPane fx:id\u003d\"noteListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            \u003cVBox fx:id\u003d\"taskList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"440\" prefWidth\u003d\"440\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "              \u003cpadding\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "                \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "              \u003c/padding\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "              \u003cStackPane fx:id\u003d\"taskListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "              \u003cVBox fx:id\u003d\"questionList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"440\" prefWidth\u003d\"440\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                  \u003cpadding\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                      \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                  \u003c/padding\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                  \u003cStackPane fx:id\u003d\"questionListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "              \u003c/VBox\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "              \u003cVBox fx:id\u003d\"quizQuestionList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"440\" prefWidth\u003d\"440\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "                  \u003cpadding\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "                      \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "                  \u003c/padding\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "                  \u003cStackPane fx:id\u003d\"quizQuestionListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "              \u003c/VBox\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "          \u003c/HBox\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "          \u003cVBox fx:id\u003d\"stats\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"450\" prefWidth\u003d\"450\"\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            \u003cStackPane fx:id\u003d\"statsPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 2,
      "shuiyao-sg": 10,
      "Auxinnn": 7,
      "irene-lly": 9,
      "ShirleyWangxt": 7,
      "-": 57
    }
  },
  {
    "path": "src/main/resources/view/NoteListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\"/\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\"/\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            \u003cHBox spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\"/\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                \u003cLabel fx:id\u003d\"title\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" wrapText\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\"/\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            \u003cLabel fx:id\u003d\"content\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$content\" wrapText\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 3,
      "-": 31
    }
  },
  {
    "path": "src/main/resources/view/NoteListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "  \u003cListView fx:id\u003d\"noteListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 1,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/QuestionListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "\u003cHBox id\u003d\"listCardPane\" fx:id\u003d\"listCardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                \u003cLabel fx:id\u003d\"questionBody\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            \u003c!--            \u003cLabel fx:id\u003d\"content\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$content\" /\u003e--\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            \u003cLabel fx:id\u003d\"answer\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$answer\"/\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            \u003cLabel fx:id\u003d\"subject\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$subject\"/\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            \u003cLabel fx:id\u003d\"difficulty\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$difficulty\"/\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "ShirleyWangxt": 37
    }
  },
  {
    "path": "src/main/resources/view/QuestionListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    \u003cListView fx:id\u003d\"questionListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "ShirleyWangxt": 8
    }
  },
  {
    "path": "src/main/resources/view/QuizQuestionListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "\u003cHBox id\u003d\"quizQuestionListCardPane\" fx:id\u003d\"quizQuestionListCardPane\" xmlns\u003d\"http://javafx.com/javafx/8\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "      xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\"/\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\"/\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\"/\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "                \u003cLabel fx:id\u003d\"subject\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\"/\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\"/\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            \u003cLabel fx:id\u003d\"questionBody\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$questionBody\"/\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Auxinnn": 35
    }
  },
  {
    "path": "src/main/resources/view/QuizQuestionListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    \u003cListView fx:id\u003d\"quizQuestionListView\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Auxinnn": 8
    }
  },
  {
    "path": "src/main/resources/view/StatsChart.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "\u003c?import javafx.scene.chart.PieChart?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "\u003cScrollPane fitToHeight\u003d\"true\" fitToWidth\u003d\"true\" styleClass\u003d\"stats-pane-color\" xmlns\u003d\"http://javafx.com/javafx/11.0.0\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    \u003ccontent\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        \u003cAnchorPane styleClass\u003d\"stats-pane-color\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                \u003cPieChart fx:id\u003d\"pc\" styleClass\u003d\"chart-pie-label\" AnchorPane.rightAnchor\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                \u003cLabel fx:id\u003d\"overview\" styleClass\u003d\"label-bright\" text\u003d\"Label\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                  \u003cInsets top\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "               \u003c/padding\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            \u003c/children\u003e\u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    \u003c/content\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "\u003c/ScrollPane\u003e"
      }
    ],
    "authorContributionMap": {
      "irene-lly": 20
    }
  },
  {
    "path": "src/main/resources/view/StatsQnsList.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "\u003cScrollPane fitToHeight\u003d\"true\" fitToWidth\u003d\"true\" styleClass\u003d\"stats-pane-color\" xmlns\u003d\"http://javafx.com/javafx/11.0.0\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "   \u003ccontent\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "      \u003cAnchorPane styleClass\u003d\"stats-pane-color\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            \u003cLabel fx:id\u003d\"qnsListLabel\" styleClass\u003d\"label-bright\" text\u003d\"Label\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"6.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                  \u003cInsets top\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "               \u003c/padding\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "         \u003c/children\u003e\u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "   \u003c/content\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "\u003c/ScrollPane\u003e"
      }
    ],
    "authorContributionMap": {
      "irene-lly": 18
    }
  },
  {
    "path": "src/main/resources/view/TaskListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "\u003cHBox id\u003d\"listCardPane\" fx:id\u003d\"listCardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "                \u003cLabel fx:id\u003d\"title\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "\u003c!--            \u003cLabel fx:id\u003d\"content\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$content\" /\u003e--\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            \u003cLabel fx:id\u003d\"status\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$status\"/\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            \u003cLabel fx:id\u003d\"date\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$date\"/\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            \u003cLabel fx:id\u003d\"time\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$time\"/\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "\u003c/HBox\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "shuiyao-sg": 38
    }
  },
  {
    "path": "src/main/resources/view/TaskListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    \u003cListView fx:id\u003d\"taskListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "shuiyao-sg": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_NOTE_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CONTENT_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TITLE_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.logic.commands.AddNoteCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.logic.commands.ListNoteCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookStorage(temporaryFolder.resolve(\"addressBook.json\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        String deleteCommand \u003d \"deletenote 9\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_NOTE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        String listCommand \u003d ListNoteCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertCommandSuccess(listCommand, ListNoteCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        String addCommand \u003d AddNoteCommand.COMMAND_WORD + TITLE_DESC_AMY + CONTENT_DESC_AMY;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        Note expectedNote \u003d new PersonBuilder(AMY).build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        expectedModel.addNote(expectedNote);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredNoteList().remove(0));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 14,
      "-": 145
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddNoteCommandIntegrationTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddNoteCommand}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "public class AddNoteCommandIntegrationTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_newPerson_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        Note validNote \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        expectedModel.addNote(validNote);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertCommandSuccess(new AddNoteCommand(validNote), model,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                String.format(AddNoteCommand.MESSAGE_SUCCESS, validNote), expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        Note noteInList \u003d model.getAddressBook().getNoteList().get(0);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertCommandFailure(new AddNoteCommand(noteInList), model, AddNoteCommand.MESSAGE_DUPLICATE_TITLE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 9,
      "-": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddNoteCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import javafx.scene.chart.PieChart;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.model.question.Answer;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.model.question.Difficulty;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.model.question.Question;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.model.question.Subject;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.model.quiz.QuizResult;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.model.statistics.TempStatsQnsModel;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "public class AddNoteCommandTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddNoteCommand(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        Note validNote \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        CommandResult commandResult \u003d new AddNoteCommand(validNote).execute(modelStub);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertEquals(String.format(AddNoteCommand.MESSAGE_SUCCESS, validNote), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertEquals(Arrays.asList(validNote), modelStub.personsAdded);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        Note validNote \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        AddNoteCommand addNoteCommand \u003d new AddNoteCommand(validNote);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPerson(validNote);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                AddNoteCommand.MESSAGE_DUPLICATE_TITLE, () -\u003e addNoteCommand.execute(modelStub));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        Note alice \u003d new PersonBuilder().withTitle(\"Alice\").build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        Note bob \u003d new PersonBuilder().withTitle(\"Bob\").build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        AddNoteCommand addAliceCommand \u003d new AddNoteCommand(alice);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        AddNoteCommand addBobCommand \u003d new AddNoteCommand(bob);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertEquals(addAliceCommand, addAliceCommand);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        AddNoteCommand addAliceCommandCopy \u003d new AddNoteCommand(alice);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertEquals(addAliceCommand, addAliceCommandCopy);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertNotEquals(1, addAliceCommand);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertNotNull(addAliceCommand);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        // different note -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertNotEquals(addAliceCommand, addBobCommand);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        public void addNote(Note note) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        public void deleteTask(Task target) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        public void addTask(Task task) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBook(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        public boolean hasNote(Note note) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        public void deleteNote(Note target) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        public void setNote(Note target, Note editedNote) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        public ObservableList\u003cNote\u003e getFilteredNoteList() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        public ObservableList\u003cTask\u003e getFilteredTaskList() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        public void updateFilteredNoteList(Predicate\u003cNote\u003e predicate) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        public ObservableList\u003cPieChart.Data\u003e getStatsChartData() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        public void updateFilteredTaskList(Predicate\u003cTask\u003e predicate) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        public boolean hasQuestion(Question question) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        public Note getNote(Note note) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        public void addQuestion(Question question) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        public void setTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        public boolean checkQuizAnswer(int index, Answer answer) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        public void deleteQuestion(Question target) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        public void setQuestion(Question target, Question editedQuestion) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        public ObservableList\u003cQuestion\u003e getFilteredQuestionList() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        public void updateFilteredQuestionList(Predicate\u003cQuestion\u003e predicate) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        public void clearQuizQuestionList() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        public ObservableList\u003cQuestion\u003e getQuizQuestions(int numOfQuestions, Subject subject, Difficulty difficulty) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        public void markTaskAsDone(Task taskDone) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        public void setQuizQuestionList(ObservableList\u003cQuestion\u003e quizQuestionList) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        public void clearTaskList() {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        public ObservableList\u003cQuestion\u003e getFilteredQuizQuestionList() {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        public Answer showQuizAnswer(int index) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        public void addQuizResult(QuizResult quizResult) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        public ObservableList getFilteredQuizResultList() {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        public int getTotalQuestionsDone() {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        public int getTotalQuestionsCorrect() {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        public int getTotalQuestionsIncorrect() {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        public void setCorrectQnsList() {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        public void setIncorrectQnsList() {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        public ObservableList\u003cTempStatsQnsModel\u003e getStatsQnsList() {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * A Model stub that contains a single note."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        private final Note note;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        ModelStubWithPerson(Note note) {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            requireNonNull(note);"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            this.note \u003d note;"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        public boolean hasNote(Note note) {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            requireNonNull(note);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            return this.note.isSameNote(note);"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * A Model stub that always accept the note being added."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        final ArrayList\u003cNote\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        public boolean hasNote(Note note) {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            requireNonNull(note);"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            return personsAdded.stream().anyMatch(note::isSameNote);"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        public void addNote(Note note) {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            requireNonNull(note);"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            personsAdded.add(note);"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 48,
      "shuiyao-sg": 45,
      "Auxinnn": 44,
      "irene-lly": 37,
      "ShirleyWangxt": 31,
      "-": 147
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearNoteCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "public class ClearNoteCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertCommandSuccess(new ClearNoteCommand(), model, ClearNoteCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertCommandSuccess(new ClearNoteCommand(), model, ClearNoteCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 3,
      "-": 29
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandResultTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false, false, false)));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false, false, false)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true, false, false)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true, false, false, false).hashCode());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, true, false, false).hashCode());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Auxinnn": 5,
      "-": 49
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONTENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.note.TitleContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.testutil.EditNoteDescriptorBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public static final String VALID_TITLE_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public static final String VALID_TITLE_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public static final String VALID_CONTENT_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public static final String VALID_CONTENT_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public static final String TITLE_DESC_AMY \u003d \" \" + PREFIX_TITLE + VALID_TITLE_AMY;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public static final String TITLE_DESC_BOB \u003d \" \" + PREFIX_TITLE + VALID_TITLE_BOB;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public static final String CONTENT_DESC_AMY \u003d \" \" + PREFIX_CONTENT + VALID_CONTENT_AMY;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public static final String CONTENT_DESC_BOB \u003d \" \" + PREFIX_CONTENT + VALID_CONTENT_BOB;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public static final String INVALID_TITLE_DESC \u003d \" \" + PREFIX_TITLE + \"f\\nsecond\"; // \\n not allowed for titles"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public static final String INVALID_CONTENT_DESC \u003d \" \" + PREFIX_CONTENT; // empty not allowed for content"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public static final EditNoteCommand.EditNoteDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public static final EditNoteCommand.EditNoteDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        DESC_AMY \u003d new EditNoteDescriptorBuilder().withTitle(VALID_TITLE_AMY).withContent(VALID_CONTENT_AMY).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        DESC_BOB \u003d new EditNoteDescriptorBuilder().withTitle(VALID_TITLE_BOB).withContent(VALID_CONTENT_BOB).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        List\u003cNote\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredNoteList());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredNoteList());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredNoteList().size());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        Note note \u003d model.getFilteredNoteList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        final String[] splitName \u003d note.getTitle().title.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        model.updateFilteredNoteList(new TitleContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertEquals(1, model.getFilteredNoteList().size());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 27,
      "-": 78
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteNoteCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": " * {@code DeleteNoteCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "public class DeleteNoteCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        Note noteToDelete \u003d model.getFilteredNoteList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        DeleteNoteCommand deleteNoteCommand \u003d new DeleteNoteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteNoteCommand.MESSAGE_DELETE_NOTE_SUCCESS, noteToDelete);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        expectedModel.deleteNote(noteToDelete);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertCommandSuccess(deleteNoteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredNoteList().size() + 1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        DeleteNoteCommand deleteNoteCommand \u003d new DeleteNoteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertCommandFailure(deleteNoteCommand, model, Messages.MESSAGE_INVALID_NOTE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        Note noteToDelete \u003d model.getFilteredNoteList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        DeleteNoteCommand deleteNoteCommand \u003d new DeleteNoteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteNoteCommand.MESSAGE_DELETE_NOTE_SUCCESS, noteToDelete);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        expectedModel.deleteNote(noteToDelete);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertCommandSuccess(deleteNoteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getNoteList().size());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        DeleteNoteCommand deleteNoteCommand \u003d new DeleteNoteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertCommandFailure(deleteNoteCommand, model, Messages.MESSAGE_INVALID_NOTE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        DeleteNoteCommand deleteFirstCommand \u003d new DeleteNoteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        DeleteNoteCommand deleteSecondCommand \u003d new DeleteNoteCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        DeleteNoteCommand deleteFirstCommandCopy \u003d new DeleteNoteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        model.updateFilteredNoteList(p -\u003e false);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertTrue(model.getFilteredNoteList().isEmpty());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 24,
      "-": 85
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditNoteCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.logic.commands.EditNoteCommand.EditNoteDescriptor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.testutil.EditNoteDescriptorBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": " * and unit tests for EditNoteCommand."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "public class EditNoteCommandTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        Note editedNote \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        EditNoteDescriptor descriptor \u003d new EditNoteDescriptorBuilder(editedNote).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        EditNoteCommand editNoteCommand \u003d new EditNoteCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        String expectedMessage \u003d String.format(EditNoteCommand.MESSAGE_EDIT_NOTE_SUCCESS, editedNote);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        expectedModel.setNote(model.getFilteredNoteList().get(0), editedNote);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertCommandSuccess(editNoteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredNoteList().size());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        Note lastNote \u003d model.getFilteredNoteList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        PersonBuilder personInList \u003d new PersonBuilder(lastNote);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        Note editedNote \u003d personInList.withTitle(VALID_TITLE_BOB).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        EditNoteCommand.EditNoteDescriptor descriptor \u003d new EditNoteDescriptorBuilder()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                .withTitle(VALID_TITLE_BOB).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        EditNoteCommand editNoteCommand \u003d new EditNoteCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        String expectedMessage \u003d String.format(EditNoteCommand.MESSAGE_EDIT_NOTE_SUCCESS, editedNote);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        expectedModel.setNote(lastNote, editedNote);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertCommandSuccess(editNoteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        EditNoteCommand editNoteCommand \u003d new EditNoteCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                new EditNoteCommand.EditNoteDescriptor());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        Note editedNote \u003d model.getFilteredNoteList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        String expectedMessage \u003d String.format(EditNoteCommand.MESSAGE_EDIT_NOTE_SUCCESS, editedNote);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertCommandSuccess(editNoteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        Note noteInFilteredList \u003d model.getFilteredNoteList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        Note editedNote \u003d new PersonBuilder(noteInFilteredList).withTitle(VALID_TITLE_BOB).build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        EditNoteCommand editNoteCommand \u003d new EditNoteCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                new EditNoteDescriptorBuilder().withTitle(VALID_TITLE_BOB).build());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        String expectedMessage \u003d String.format(EditNoteCommand.MESSAGE_EDIT_NOTE_SUCCESS, editedNote);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        expectedModel.setNote(model.getFilteredNoteList().get(0), editedNote);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertCommandSuccess(editNoteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        Note firstNote \u003d model.getFilteredNoteList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        EditNoteCommand.EditNoteDescriptor descriptor \u003d new EditNoteDescriptorBuilder(firstNote).build();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        EditNoteCommand editNoteCommand \u003d new EditNoteCommand(INDEX_SECOND_PERSON, descriptor);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertCommandFailure(editNoteCommand, model, EditNoteCommand.MESSAGE_DUPLICATE_NOTE);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit person in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        Note noteInList \u003d model.getAddressBook().getNoteList().get(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        EditNoteCommand editNoteCommand \u003d new EditNoteCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                new EditNoteDescriptorBuilder(noteInList).build());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertCommandFailure(editNoteCommand, model, EditNoteCommand.MESSAGE_DUPLICATE_NOTE);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredNoteList().size() + 1);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        EditNoteDescriptor descriptor \u003d new EditNoteDescriptorBuilder().withTitle(VALID_TITLE_BOB).build();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        EditNoteCommand editNoteCommand \u003d new EditNoteCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertCommandFailure(editNoteCommand, model, Messages.MESSAGE_INVALID_NOTE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getNoteList().size());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        EditNoteCommand editNoteCommand \u003d new EditNoteCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                new EditNoteDescriptorBuilder().withTitle(VALID_TITLE_BOB).build());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertCommandFailure(editNoteCommand, model, Messages.MESSAGE_INVALID_NOTE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        final EditNoteCommand standardCommand \u003d new EditNoteCommand(INDEX_FIRST_PERSON, DESC_AMY);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        EditNoteDescriptor copyDescriptor \u003d new EditNoteCommand.EditNoteDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        EditNoteCommand commandWithSameValues \u003d new EditNoteCommand(INDEX_FIRST_PERSON, copyDescriptor);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearNoteCommand()));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertFalse(standardCommand.equals(new EditNoteCommand(INDEX_SECOND_PERSON, DESC_AMY)));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertFalse(standardCommand.equals(new EditNoteCommand(INDEX_FIRST_PERSON, DESC_BOB)));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 57,
      "-": 113
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditNoteDescriptorTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CONTENT_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.logic.commands.EditNoteCommand.EditNoteDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.testutil.EditNoteDescriptorBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "public class EditNoteDescriptorTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        EditNoteDescriptor descriptorWithSameValues \u003d new EditNoteDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(DESC_AMY));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        // different title -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        EditNoteCommand.EditNoteDescriptor editedAmy \u003d new EditNoteDescriptorBuilder(DESC_AMY)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                .withTitle(VALID_TITLE_BOB).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        // different content -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        editedAmy \u003d new EditNoteDescriptorBuilder(DESC_AMY).withContent(VALID_CONTENT_BOB).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 11,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ExitCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "                true, false, false);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Auxinnn": 2,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindNoteCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_NOTES_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ELLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.FIONA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.note.TitleContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindNoteCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "public class FindNoteCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        TitleContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                new TitleContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        TitleContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                new TitleContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        FindNoteCommand findFirstCommand \u003d new FindNoteCommand(firstPredicate);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        FindNoteCommand findSecondCommand \u003d new FindNoteCommand(secondPredicate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        FindNoteCommand findFirstCommandCopy \u003d new FindNoteCommand(firstPredicate);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_zeroKeywords_noPersonFound() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_NOTES_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        TitleContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        FindNoteCommand command \u003d new FindNoteCommand(predicate);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        expectedModel.updateFilteredNoteList(predicate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredNoteList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_multipleKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_NOTES_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        TitleContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        FindNoteCommand command \u003d new FindNoteCommand(predicate);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        expectedModel.updateFilteredNoteList(predicate);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredNoteList());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * Parses {@code userInput} into a {@code TitleContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    private TitleContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        return new TitleContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 24,
      "-": 59
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/HelpCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false, false, false);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Auxinnn": 1,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListNoteCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListNoteCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "public class ListNoteCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertCommandSuccess(new ListNoteCommand(), model, ListNoteCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertCommandSuccess(new ListNoteCommand(), model, ListNoteCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 4,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddNoteCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CONTENT_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CONTENT_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_CONTENT_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TITLE_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TITLE_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TITLE_DESC_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CONTENT_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_BOB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.logic.commands.AddNoteCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.note.Content;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.note.Title;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "public class AddNoteCommandParserTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    private AddNoteCommandParser parser \u003d new AddNoteCommandParser();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        Note expectedNote \u003d new PersonBuilder(BOB).build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + TITLE_DESC_BOB + CONTENT_DESC_BOB,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                new AddNoteCommand(expectedNote));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        // multiple titles, last accepted"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertParseSuccess(parser, TITLE_DESC_AMY + TITLE_DESC_BOB + CONTENT_DESC_BOB,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                new AddNoteCommand(expectedNote));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        // multiple contents, last accepted"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertParseSuccess(parser, TITLE_DESC_BOB + CONTENT_DESC_AMY + CONTENT_DESC_BOB,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                new AddNoteCommand(expectedNote));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddNoteCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        // missing title prefix"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertParseFailure(parser, VALID_TITLE_BOB + CONTENT_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        // missing content prefix"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertParseFailure(parser, TITLE_DESC_BOB + VALID_CONTENT_BOB, expectedMessage);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertParseFailure(parser, VALID_TITLE_BOB + VALID_CONTENT_BOB, expectedMessage);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        // invalid title"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertParseFailure(parser, INVALID_TITLE_DESC + CONTENT_DESC_BOB, Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        // invalid content"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertParseFailure(parser, TITLE_DESC_BOB + INVALID_CONTENT_DESC, Content.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertParseFailure(parser, INVALID_TITLE_DESC + INVALID_CONTENT_DESC, Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + TITLE_DESC_BOB + CONTENT_DESC_BOB,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddNoteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 37,
      "-": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddressBookParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.logic.commands.AddNoteCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.logic.commands.ClearNoteCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.logic.commands.DeleteNoteCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.logic.commands.EditNoteCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.logic.commands.FindNoteCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.logic.commands.ListNoteCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.note.TitleContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.testutil.EditNoteDescriptorBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParserTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser parser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        Note note \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        AddNoteCommand command \u003d (AddNoteCommand) parser.parseCommand(PersonUtil.getAddCommand(note));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertEquals(new AddNoteCommand(note), command);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertTrue(parser.parseCommand(ClearNoteCommand.COMMAND_WORD) instanceof ClearNoteCommand);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertTrue(parser.parseCommand(ClearNoteCommand.COMMAND_WORD + \" 3\") instanceof ClearNoteCommand);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        DeleteNoteCommand command \u003d (DeleteNoteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                DeleteNoteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertEquals(new DeleteNoteCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        Note note \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        EditNoteCommand.EditNoteDescriptor descriptor \u003d new EditNoteDescriptorBuilder(note).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        EditNoteCommand command \u003d (EditNoteCommand) parser.parseCommand(EditNoteCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertEquals(new EditNoteCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        FindNoteCommand command \u003d (FindNoteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                FindNoteCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertEquals(new FindNoteCommand(new TitleContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertTrue(parser.parseCommand(ListNoteCommand.COMMAND_WORD) instanceof ListNoteCommand);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertTrue(parser.parseCommand(ListNoteCommand.COMMAND_WORD + \" 3\") instanceof ListNoteCommand);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 26,
      "-": 74
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteNoteCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.logic.commands.DeleteNoteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": " * outside of the DeleteNoteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": " * same path through the DeleteNoteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "public class DeleteNoteCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    private DeleteNoteCommandParser parser \u003d new DeleteNoteCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteNoteCommand(INDEX_FIRST_PERSON));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteNoteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 7,
      "-": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditNoteCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CONTENT_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CONTENT_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_CONTENT_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TITLE_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TITLE_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TITLE_DESC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CONTENT_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CONTENT_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_BOB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.logic.commands.EditNoteCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.logic.commands.EditNoteCommand.EditNoteDescriptor;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.note.Content;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.note.Title;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.testutil.EditNoteDescriptorBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "public class EditNoteCommandParserTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditNoteCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    private EditNoteCommandParser parser \u003d new EditNoteCommandParser();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertParseFailure(parser, VALID_TITLE_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertParseFailure(parser, \"1\", EditNoteCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertParseFailure(parser, \"-5\" + TITLE_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertParseFailure(parser, \"0\" + TITLE_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TITLE_DESC, Title.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_CONTENT_DESC, Content.MESSAGE_CONSTRAINTS); // invalid address"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TITLE_DESC + VALID_CONTENT_AMY, Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + CONTENT_DESC_AMY + TITLE_DESC_AMY;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        EditNoteCommand.EditNoteDescriptor descriptor \u003d new EditNoteDescriptorBuilder().withTitle(VALID_TITLE_AMY)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                .withContent(VALID_CONTENT_AMY).build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        EditNoteCommand expectedCommand \u003d new EditNoteCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + CONTENT_DESC_AMY;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        EditNoteCommand.EditNoteDescriptor descriptor \u003d new EditNoteDescriptorBuilder()"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                .withContent(VALID_CONTENT_AMY).build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        EditNoteCommand expectedCommand \u003d new EditNoteCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TITLE_DESC_AMY;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        EditNoteDescriptor descriptor \u003d new EditNoteDescriptorBuilder().withTitle(VALID_TITLE_AMY).build();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        EditNoteCommand expectedCommand \u003d new EditNoteCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + CONTENT_DESC_AMY;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        descriptor \u003d new EditNoteDescriptorBuilder().withContent(VALID_CONTENT_AMY).build();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        expectedCommand \u003d new EditNoteCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + CONTENT_DESC_AMY + CONTENT_DESC_AMY + CONTENT_DESC_BOB;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        EditNoteCommand.EditNoteDescriptor descriptor \u003d new EditNoteDescriptorBuilder()"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                .withContent(VALID_CONTENT_BOB).build();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        EditNoteCommand expectedCommand \u003d new EditNoteCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_CONTENT_DESC + CONTENT_DESC_BOB;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        EditNoteCommand.EditNoteDescriptor descriptor \u003d new EditNoteDescriptorBuilder()"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                .withContent(VALID_CONTENT_BOB).build();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        EditNoteCommand expectedCommand \u003d new EditNoteCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + INVALID_TITLE_DESC + CONTENT_DESC_BOB + TITLE_DESC_BOB;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        descriptor \u003d new EditNoteDescriptorBuilder().withTitle(VALID_TITLE_BOB)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                .withContent(VALID_CONTENT_BOB).build();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        expectedCommand \u003d new EditNoteCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 51,
      "-": 89
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FindNoteCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.logic.commands.FindNoteCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.note.TitleContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "public class FindNoteCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    private FindNoteCommandParser parser \u003d new FindNoteCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                FindNoteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        FindNoteCommand expectedFindNoteCommand \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                new FindNoteCommand(new TitleContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedFindNoteCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindNoteCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 10,
      "-": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.note.Content;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.note.Title;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    private static final String INVALID_TITLE \u003d \"a\\nb\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    private static final String INVALID_CONTENT \u003d \" \";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    private static final String VALID_TITLE \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    private static final String VALID_CONTENT \u003d \"123 Main Street #0505\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void parseTitle_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTitle((String) null));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void parseTitle_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTitle(INVALID_TITLE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void parseTitle_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        Title expectedTitle \u003d new Title(VALID_TITLE);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertEquals(expectedTitle, ParserUtil.parseTitle(VALID_TITLE));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void parseTitle_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_TITLE + WHITESPACE;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        Title expectedTitle \u003d new Title(VALID_TITLE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertEquals(expectedTitle, ParserUtil.parseTitle(nameWithWhitespace));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void parseContent_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseContent((String) null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void parseContent_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseContent(INVALID_CONTENT));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void parseContent_validValueWithoutWhitespace_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        Content expectedContent \u003d new Content(VALID_CONTENT);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertEquals(expectedContent, ParserUtil.parseContent(VALID_CONTENT));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void parseContent_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        String addressWithWhitespace \u003d WHITESPACE + VALID_CONTENT + WHITESPACE;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        Content expectedContent \u003d new Content(VALID_CONTENT);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertEquals(expectedContent, ParserUtil.parseContent(addressWithWhitespace));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 29,
      "-": 59
    }
  },
  {
    "path": "src/test/java/seedu/address/model/AddressBookTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CONTENT_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE_QUESTION;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE_RESULT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.note.exceptions.DuplicateTitleException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.model.question.Question;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.model.quiz.QuizResult;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.model.task.TaskForNote;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertEquals(Collections.emptyList(), addressBook.getNoteList());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.resetData(null));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook newData \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(newData, addressBook);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        // Two notes with the same identity fields"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        Note editedAlice \u003d new PersonBuilder(ALICE).withContent(VALID_CONTENT_BOB).build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        List\u003cNote\u003e newNotes \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        LocalDate date \u003d LocalDate.parse(\"06/07/2019\", Task.FORMAT_USER_INPUT_DATE);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        LocalTime time \u003d LocalTime.parse(\"1500\", Task.FORMAT_USER_INPUT_TIME);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        Task task \u003d new TaskForNote(editedAlice, date, time);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        List\u003cTask\u003e newTasks \u003d Arrays.asList(task);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        List\u003cQuestion\u003e newQuestions \u003d Arrays.asList(ALICE_QUESTION);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        List\u003cQuizResult\u003e newQuizResults \u003d Arrays.asList(ALICE_RESULT);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        AddressBookStub newData \u003d new AddressBookStub(newNotes, newTasks, newQuestions, newQuizResults);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertThrows(DuplicateTitleException.class, () -\u003e addressBook.resetData(newData));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.hasNote(null));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertFalse(addressBook.hasNote(ALICE));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        addressBook.addNote(ALICE);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertTrue(addressBook.hasNote(ALICE));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        addressBook.addNote(ALICE);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        Note editedAlice \u003d new PersonBuilder(ALICE).withContent(VALID_CONTENT_BOB).build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertTrue(addressBook.hasNote(editedAlice));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e addressBook.getNoteList().remove(0));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * A stub ReadOnlyAddressBook whose notes list can violate interface constraints."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class AddressBookStub implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        private final ObservableList\u003cNote\u003e notes \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        private final ObservableList\u003cQuestion\u003e questions \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        private final ObservableList\u003cQuestion\u003e quizQuestions \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        private final ObservableList\u003cQuizResult\u003e quizResults \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        private final ObservableList\u003cTask\u003e tasks \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        AddressBookStub(Collection\u003cNote\u003e notes, Collection\u003cTask\u003e tasks, Collection\u003cQuestion\u003e questions,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "                        Collection\u003cQuizResult\u003e quizResults) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            this.notes.setAll(notes);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            this.tasks.setAll(tasks);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            this.questions.setAll(questions);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            this.quizResults.setAll(quizResults);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        public ObservableList\u003cNote\u003e getNoteList() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            return notes;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        public ObservableList\u003cQuestion\u003e getQuestionList() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            return questions;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        public ObservableList\u003cQuestion\u003e getQuizQuestionList() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            return quizQuestions;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        public ObservableList\u003cQuizResult\u003e getQuizResultList() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            return quizResults;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "         * Returns an unmodifiable view of the task list."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "         */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        public List\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            return tasks;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 21,
      "shuiyao-sg": 18,
      "Auxinnn": 20,
      "ShirleyWangxt": 7,
      "-": 80
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_NOTES;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.note.TitleContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddressBook(), new AddressBook(modelManager.getAddressBook()));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setAddressBookFilePath(null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setAddressBookFilePath(path);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(path, modelManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasNote(null));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertFalse(modelManager.hasNote(ALICE));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        modelManager.addNote(ALICE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertTrue(modelManager.hasNote(ALICE));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredNoteList().remove(0));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook differentAddressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        String[] keywords \u003d ALICE.getTitle().title.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        modelManager.updateFilteredNoteList(new TitleContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        modelManager.updateFilteredNoteList(PREDICATE_SHOW_ALL_NOTES);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 10,
      "-": 122
    }
  },
  {
    "path": "src/test/java/seedu/address/model/note/ContentTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "package seedu.address.model.note;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "public class ContentTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Content(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidAddress_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidAddress \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Content(invalidAddress));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidAddress() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null address"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Content.isValidContent(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid addresses"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertFalse(Content.isValidContent(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertFalse(Content.isValidContent(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid addresses"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertTrue(Content.isValidContent(\"Blk 456, Den Road, #01-355\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertTrue(Content.isValidContent(\"-\")); // one character"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertTrue(Content.isValidContent(\"Leng Inc; 1234 Market St; San Francisco CA 2349879; USA\")); // long address"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 10,
      "-": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/model/note/NoteTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "package seedu.address.model.note;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CONTENT_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "public class NoteTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isSamePerson() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertTrue(ALICE.isSameNote(ALICE));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertFalse(ALICE.isSameNote(null));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        // different title -\u003e returns false"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        Note editedAlice \u003d new PersonBuilder(ALICE).withTitle(VALID_TITLE_BOB).build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertFalse(ALICE.isSameNote(editedAlice));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        // only different content -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withContent(VALID_CONTENT_BOB).build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertTrue(ALICE.isSameNote(editedAlice));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        Note aliceCopy \u003d new PersonBuilder(ALICE).build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        Note editedAlice \u003d new PersonBuilder(ALICE).withTitle(VALID_TITLE_BOB).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withContent(VALID_CONTENT_BOB).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 15,
      "-": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/model/note/TitleContainsKeywordsPredicateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "package seedu.address.model.note;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "public class TitleContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        TitleContainsKeywordsPredicate firstPredicate \u003d new TitleContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        TitleContainsKeywordsPredicate secondPredicate \u003d new TitleContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        TitleContainsKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                new TitleContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        TitleContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                new TitleContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withTitle(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        predicate \u003d new TitleContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withTitle(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        predicate \u003d new TitleContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withTitle(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        predicate \u003d new TitleContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withTitle(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        TitleContainsKeywordsPredicate predicate \u003d new TitleContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withTitle(\"Alice\").build()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        predicate \u003d new TitleContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withTitle(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        // Keywords match phone, email and address, but does not match name"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        predicate \u003d new TitleContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withTitle(\"Alice\").withContent(\"Main Street\").build()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 76
    }
  },
  {
    "path": "src/test/java/seedu/address/model/note/TitleTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "package seedu.address.model.note;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "public class TitleTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Title(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Title(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        // null title"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Title.isValidTitle(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        // invalid title"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertFalse(Title.isValidTitle(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertFalse(Title.isValidTitle(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertFalse(Title.isValidTitle(\"a\\nb\")); // newlines"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        // valid title"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertTrue(Title.isValidTitle(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertTrue(Title.isValidTitle(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertTrue(Title.isValidTitle(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertTrue(Title.isValidTitle(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertTrue(Title.isValidTitle(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/model/note/UniqueNoteListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "package seedu.address.model.note;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CONTENT_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.note.exceptions.DuplicateTitleException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.note.exceptions.NoteNotFoundException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "public class UniqueNoteListTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    private final UniqueNoteList uniqueNoteList \u003d new UniqueNoteList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void contains_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueNoteList.contains(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void contains_personNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertFalse(uniqueNoteList.contains(ALICE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void contains_personInList_returnsTrue() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        uniqueNoteList.add(ALICE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertTrue(uniqueNoteList.contains(ALICE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        uniqueNoteList.add(ALICE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        Note editedAlice \u003d new PersonBuilder(ALICE).withContent(VALID_CONTENT_BOB).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertTrue(uniqueNoteList.contains(editedAlice));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void add_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueNoteList.add(null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void add_duplicatePerson_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        uniqueNoteList.add(ALICE);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertThrows(DuplicateTitleException.class, () -\u003e uniqueNoteList.add(ALICE));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void setPerson_nullTargetPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueNoteList.setNote(null, ALICE));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void setPerson_nullEditedPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueNoteList.setNote(ALICE, null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertThrows(NoteNotFoundException.class, () -\u003e uniqueNoteList.setNote(ALICE, ALICE));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void setPerson_editedPersonIsSamePerson_success() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        uniqueNoteList.add(ALICE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        uniqueNoteList.setNote(ALICE, ALICE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        UniqueNoteList expectedUniqueNoteList \u003d new UniqueNoteList();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        expectedUniqueNoteList.add(ALICE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertEquals(expectedUniqueNoteList, uniqueNoteList);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void setPerson_editedPersonHasSameIdentity_success() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        uniqueNoteList.add(ALICE);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        Note editedAlice \u003d new PersonBuilder(ALICE).withContent(VALID_CONTENT_BOB).build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        uniqueNoteList.setNote(ALICE, editedAlice);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        UniqueNoteList expectedUniqueNoteList \u003d new UniqueNoteList();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        expectedUniqueNoteList.add(editedAlice);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertEquals(expectedUniqueNoteList, uniqueNoteList);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void setPerson_editedPersonHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        uniqueNoteList.add(ALICE);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        uniqueNoteList.setNote(ALICE, BOB);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        UniqueNoteList expectedUniqueNoteList \u003d new UniqueNoteList();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        expectedUniqueNoteList.add(BOB);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertEquals(expectedUniqueNoteList, uniqueNoteList);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        uniqueNoteList.add(ALICE);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        uniqueNoteList.add(BOB);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertThrows(DuplicateTitleException.class, () -\u003e uniqueNoteList.setNote(ALICE, BOB));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void remove_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueNoteList.remove(null));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void remove_personDoesNotExist_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertThrows(NoteNotFoundException.class, () -\u003e uniqueNoteList.remove(ALICE));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void remove_existingPerson_removesPerson() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        uniqueNoteList.add(ALICE);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        uniqueNoteList.remove(ALICE);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        UniqueNoteList expectedUniqueNoteList \u003d new UniqueNoteList();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertEquals(expectedUniqueNoteList, uniqueNoteList);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void setPersons_nullUniquePersonList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueNoteList.setNotes((UniqueNoteList) null));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        uniqueNoteList.add(ALICE);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        UniqueNoteList expectedUniqueNoteList \u003d new UniqueNoteList();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        expectedUniqueNoteList.add(BOB);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        uniqueNoteList.setNotes(expectedUniqueNoteList);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertEquals(expectedUniqueNoteList, uniqueNoteList);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void setPersons_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueNoteList.setNotes((List\u003cNote\u003e) null));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void setPersons_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        uniqueNoteList.add(ALICE);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        List\u003cNote\u003e noteList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        uniqueNoteList.setNotes(noteList);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        UniqueNoteList expectedUniqueNoteList \u003d new UniqueNoteList();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        expectedUniqueNoteList.add(BOB);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertEquals(expectedUniqueNoteList, uniqueNoteList);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        List\u003cNote\u003e listWithDuplicateNotes \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertThrows(DuplicateTitleException.class, () -\u003e uniqueNoteList.setNotes(listWithDuplicateNotes));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            -\u003e uniqueNoteList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 167
    }
  },
  {
    "path": "src/test/java/seedu/address/model/task/TaskTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.model.note.Content;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.model.note.Title;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "public class TaskTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    void getStatusIcon_default_returnN() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        NoteStub note \u003d new NoteStub(new Title(\"Lecture 1\"), new Content(\"Hello World\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        LocalDate date \u003d LocalDate.parse(\"06/07/2019\", Task.FORMAT_USER_INPUT_DATE);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        LocalTime time \u003d LocalTime.parse(\"1500\", Task.FORMAT_USER_INPUT_TIME);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        assertEquals(new TaskForNote(note, date, time).getStatusIcon(),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "                \"[N]\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        NoteStub note \u003d new NoteStub(new Title(\"Lecture 1\"), new Content(\"Hello World\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        LocalTime time \u003d LocalTime.parse(\"1500\", Task.FORMAT_USER_INPUT_TIME);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TaskForNote(note, null, time));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    private class NoteStub extends Note {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        private NoteStub(Title title, Content content) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            super(title, content);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shuiyao-sg": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedNoteTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.storage.JsonAdaptedNote.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.note.Content;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.note.Title;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "public class JsonAdaptedNoteTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    private static final String INVALID_TITLE \u003d \"a\\nb\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    private static final String INVALID_CONTENT \u003d \" \";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    private static final String VALID_TITLE \u003d BENSON.getTitle().toString();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    private static final String VALID_CONTENT \u003d BENSON.getContent().toString();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        JsonAdaptedNote person \u003d new JsonAdaptedNote(BENSON);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BENSON, person.toModelType());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        JsonAdaptedNote person \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                new JsonAdaptedNote(INVALID_TITLE, VALID_CONTENT);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        String expectedMessage \u003d Title.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        JsonAdaptedNote person \u003d new JsonAdaptedNote(null, VALID_CONTENT);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Title.class.getSimpleName());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        JsonAdaptedNote person \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                new JsonAdaptedNote(VALID_TITLE, INVALID_CONTENT);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        String expectedMessage \u003d Content.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        JsonAdaptedNote person \u003d new JsonAdaptedNote(VALID_TITLE, null);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Content.class.getSimpleName());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 19,
      "-": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAddressBookStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.HOON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.IDA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAddressBookStorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonAddressBookStorageTest\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readAddressBook(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private java.util.Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonAddressBookStorage(Paths.get(filePath)).readAddressBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readAddressBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"notJsonFormatAddressBook.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidPersonAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidPersonAddressBook.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidAndValidPersonAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidAndValidPersonAddressBook.json\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempAddressBook.json\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage jsonAddressBookStorage \u003d new JsonAddressBookStorage(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        original.addNote(HOON);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        original.removeNote(ALICE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        original.addNote(IDA);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original); // file path not specified"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readAddressBook().get(); // file path not specified"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonAddressBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(new AddressBook(), null));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 3,
      "-": 107
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableAddressBookTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonSerializableAddressBookTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableAddressBookTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TYPICAL_PERSONS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalPersonsAddressBook.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path INVALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPersonAddressBook.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path DUPLICATE_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicatePersonAddressBook.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_typicalPersonsFile_success() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_PERSONS_FILE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook typicalPersonsAddressBook \u003d TypicalPersons.getTypicalAddressBook();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(addressBookFromFile, typicalPersonsAddressBook);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_PERSON_FILE,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_PERSON_FILE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableAddressBook.MESSAGE_DUPLICATE_TITLE,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 1,
      "-": 46
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"data.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 1,
      "-": 122
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/AddressBookBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Addressbook objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " *     {@code AddressBook ab \u003d new AddressBookBuilder().withPerson(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBook addressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder(AddressBook addressBook) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d addressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * Adds a new {@code Note} to the {@code AddressBook} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public AddressBookBuilder withPerson(Note note) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        addressBook.addNote(note);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 4,
      "-": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditNoteDescriptorBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.logic.commands.EditNoteCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.logic.commands.EditNoteCommand.EditNoteDescriptor;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.note.Content;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.note.Title;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": " * A utility class to help with building EditNoteDescriptor objects."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "public class EditNoteDescriptorBuilder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    private EditNoteDescriptor descriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public EditNoteDescriptorBuilder() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        descriptor \u003d new EditNoteDescriptor();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public EditNoteDescriptorBuilder(EditNoteCommand.EditNoteDescriptor descriptor) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        this.descriptor \u003d new EditNoteCommand.EditNoteDescriptor(descriptor);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * Returns an {@code EditNoteDescriptor} with fields containing {@code note}\u0027s details"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public EditNoteDescriptorBuilder(Note note) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        descriptor \u003d new EditNoteDescriptor();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        descriptor.setTitle(note.getTitle());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        descriptor.setContent(note.getContent());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * Sets the {@code Title} of the {@code EditNoteDescriptor} that we are building."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public EditNoteDescriptorBuilder withTitle(String name) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        descriptor.setTitle(new Title(name));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * Sets the {@code Content} of the {@code EditNoteDescriptor} that we are building."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public EditNoteDescriptorBuilder withContent(String address) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        descriptor.setContent(new Content(address));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public EditNoteDescriptor build() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 52
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.note.Content;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.note.Title;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": " * A utility class to help with building Note objects."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonBuilder {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public static final String DEFAULT_TITLE \u003d \"A lecture note\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public static final String DEFAULT_CONTENT \u003d \"Lorem ipsum dolor sit amet\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    private Title title;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    private Content content;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        title \u003d new Title(DEFAULT_TITLE);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        content \u003d new Content(DEFAULT_CONTENT);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code noteToCopy}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public PersonBuilder(Note noteToCopy) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        title \u003d noteToCopy.getTitle();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        content \u003d noteToCopy.getContent();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * Sets the {@code Title} of the {@code Note} that we are building."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public PersonBuilder withTitle(String title) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        this.title \u003d new Title(title);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * Sets the {@code Content} of the {@code Note} that we are building."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public PersonBuilder withContent(String content) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        this.content \u003d new Content(content);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public Note build() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        return new Note(title, content);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 22,
      "-": 27
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONTENT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.logic.commands.AddNoteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.logic.commands.EditNoteCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": " * A utility class for Note."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * Returns an add command string for adding the {@code note}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public static String getAddCommand(Note note) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        return AddNoteCommand.COMMAND_WORD + \" \" + getPersonDetails(note);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * Returns the part of command string for the given {@code note}\u0027s details."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public static String getPersonDetails(Note note) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        sb.append(PREFIX_TITLE + note.getTitle().title + \" \");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        sb.append(PREFIX_CONTENT + note.getContent().content + \" \");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * Returns the part of command string for the given {@code EditNoteDescriptor}\u0027s details."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public static String getEditPersonDescriptorDetails(EditNoteCommand.EditNoteDescriptor descriptor) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        descriptor.getTitle().ifPresent(name -\u003e sb.append(PREFIX_TITLE).append(name.title).append(\" \"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        descriptor.getContent().ifPresent(address -\u003e sb.append(PREFIX_CONTENT).append(address.content).append(\" \"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 17,
      "-": 24
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/QuestionBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.model.question.Answer;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.model.question.Difficulty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.model.question.Question;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.model.question.QuestionBody;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.model.question.Subject;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": " * A utility class to help with building Question objects."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "public class QuestionBuilder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public static final String DEFAULT_QUESTION_BODY \u003d \"A question\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public static final String DEFAULT_ANSWER \u003d \"An answer\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public static final String DEFAULT_SUBJECT \u003d \"CS2103T\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public static final String DEFAULT_DIFFICULTY \u003d \"easy\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    private QuestionBody questionBody;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    private Answer answer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    private Subject subject;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    private Difficulty difficulty;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public QuestionBuilder() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        questionBody \u003d new QuestionBody(DEFAULT_QUESTION_BODY);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        answer \u003d new Answer(DEFAULT_ANSWER);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        subject \u003d new Subject(DEFAULT_SUBJECT);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        difficulty \u003d new Difficulty(DEFAULT_DIFFICULTY);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * Initializes the QuestionBuilder with the data of {@code questionToCopy}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public QuestionBuilder(Question questionToCopy) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        questionBody \u003d questionToCopy.getQuestionBody();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        answer \u003d questionToCopy.getAnswer();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * Sets the {@code QuestionBody} of the {@code Question} that we are building."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public QuestionBuilder withQuestionBody(String questionBody) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        this.questionBody \u003d new QuestionBody(questionBody);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * Sets the {@code Answer} of the {@code Question} that we are building."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public QuestionBuilder withAnswer(String answer) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        this.answer \u003d new Answer(answer);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * Sets the {@code Subject} of the {@code Question} that we are building."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public QuestionBuilder withSubject(String subject) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        this.subject \u003d new Subject(subject);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * Sets the {@code Difficulty} of the {@code Question} that we are building."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public QuestionBuilder withDifficulty(String difficulty) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        this.difficulty \u003d new Difficulty(difficulty);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public Question build() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        return new Question(questionBody, answer, subject, difficulty);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShirleyWangxt": 74
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/QuizResultBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.model.question.Answer;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.model.question.QuestionBody;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.model.quiz.QuizResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": " * A utility class to help with building Quiz Result objects."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "public class QuizResultBuilder {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public static final String DEFAULT_ANSWER \u003d \"An answer\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public static final String DEFAULT_QUESTION_BODY \u003d \"A question\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public static final String DEFAULT_TIME \u003d \"2019/10/10 12:00\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public static final String DEFAULT_RESULT \u003d \"true\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    private Answer answer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    private QuestionBody questionBody;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    private String quizTime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    private boolean result;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public QuizResultBuilder() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        answer \u003d new Answer(DEFAULT_ANSWER);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        questionBody \u003d new QuestionBody(DEFAULT_QUESTION_BODY);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        quizTime \u003d DEFAULT_TIME;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        result \u003d Boolean.parseBoolean(DEFAULT_RESULT);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * Initializes the QuizResultBuilder with the data of {@code quizResultToCopy}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public QuizResultBuilder(QuizResult quizResultToCopy) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        answer \u003d quizResultToCopy.getAnswer();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        questionBody \u003d quizResultToCopy.getQuestionBody();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        quizTime \u003d quizResultToCopy.getQuizTime();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        result \u003d quizResultToCopy.getResult();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * Sets the {@code Answer} of the {@code QuizResult} that we are building."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public QuizResultBuilder withAnswer(String answer) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        this.answer \u003d new Answer(answer);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * Sets the {@code QuestionBody} of the {@code QuizResult} that we are building."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public QuizResultBuilder withQuestionBody(String questionBody) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        this.questionBody \u003d new QuestionBody(questionBody);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * Sets the {@code QuizTime} of the {@code QuizResult} that we are building."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public QuizResultBuilder withQuizTime(String quizTime) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        this.quizTime \u003d quizTime;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * Sets the {@code Result} of the {@code QuizResult} that we are building."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public QuizResultBuilder withResult(String result) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        this.result \u003d Boolean.parseBoolean(result);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public QuizResult build() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        return new QuizResult(answer, questionBody, quizTime, result);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Auxinnn": 73
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the middle index of the person in the {@code model}\u0027s person list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        return Index.fromOneBased(model.getFilteredNoteList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last index of the person in the {@code model}\u0027s person list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        return Index.fromOneBased(model.getFilteredNoteList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the person in the {@code model}\u0027s person list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public static Note getPerson(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        return model.getFilteredNoteList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 5,
      "-": 50
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalPersons.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CONTENT_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CONTENT_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.model.question.Question;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.model.quiz.QuizResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.model.task.TaskForNote;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": " * A utility class containing a list of {@code Note} objects to be used in tests."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalPersons {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public static final Note ALICE \u003d new PersonBuilder().withTitle(\"Alice Pauline\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            .withContent(\"123, Jurong West Ave 6, #08-111\").build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public static final Note BENSON \u003d new PersonBuilder().withTitle(\"Benson Meier\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            .withContent(\"311, Clementi Ave 2, #02-25\").build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public static final Note CARL \u003d new PersonBuilder().withTitle(\"Carl Kurz\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            .withContent(\"wall street\").build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public static final Note DANIEL \u003d new PersonBuilder().withTitle(\"Daniel Meier\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            .withContent(\"10th street\").build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public static final Note ELLE \u003d new PersonBuilder().withTitle(\"Elle Meyer\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            .withContent(\"michegan ave\").build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public static final Note FIONA \u003d new PersonBuilder().withTitle(\"Fiona Kunz\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            .withContent(\"little tokyo\").build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public static final Note GEORGE \u003d new PersonBuilder().withTitle(\"George Best\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            .withContent(\"4th street\").build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public static final Task ALICE_TASK \u003d new TaskForNote(ALICE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            LocalDate.parse(\"06/08/2019\", Task.FORMAT_USER_INPUT_DATE),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            LocalTime.parse(\"1600\", Task.FORMAT_USER_INPUT_TIME));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public static final Question ALICE_QUESTION \u003d new QuestionBuilder().withQuestionBody(\"(  ) is a measure of the \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            + \"degree of dependence between components, classes, methods, etc.\").withAnswer(\"Coupling\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            .withSubject(\"CS2103T\").withDifficulty(\"easy\").build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public static final QuizResult ALICE_RESULT \u003d new QuizResultBuilder().withAnswer(\"Coupling\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            .withQuestionBody(\"(  ) is a measure of the degree of dependence between components, classes, methods, \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "                    + \"etc.\").withQuizTime(\"2019/10/10 12:00\").withResult(\"true\").build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public static final Note HOON \u003d new PersonBuilder().withTitle(\"Hoon Meier\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            .withContent(\"little india\").build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public static final Note IDA \u003d new PersonBuilder().withTitle(\"Ida Mueller\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            .withContent(\"chicago ave\").build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    // Manually added - Note\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public static final Note AMY \u003d new PersonBuilder().withTitle(VALID_TITLE_AMY)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            .withContent(VALID_CONTENT_AMY).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public static final Note BOB \u003d new PersonBuilder().withTitle(VALID_TITLE_BOB)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            .withContent(VALID_CONTENT_BOB).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    private TypicalPersons() {} // prevents instantiation"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        for (Note note : getTypicalPersons()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            ab.addNote(note);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        for (Task task : getTypicalTasks()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            ab.addTask(task);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        for (Question question : getTypicalQuestions()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            ab.addQuestion(question);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public static List\u003cNote\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public static List\u003cTask\u003e getTypicalTasks() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE_TASK));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public static List\u003cQuestion\u003e getTypicalQuestions() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE_QUESTION));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 32,
      "shuiyao-sg": 16,
      "Auxinnn": 4,
      "ShirleyWangxt": 13,
      "-": 35
    }
  }
]
