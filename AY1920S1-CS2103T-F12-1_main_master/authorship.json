[
  {
    "path": "README.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "\u003d Horo"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "https://travis-ci.org/AY1920S1-CS2103T-F12-1/main[image:https://travis-ci.org/AY1920S1-CS2103T-F12-1/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "https://ci.appveyor.com/project/marcusteh1238/main[image:https://ci.appveyor.com/api/projects/status/clgkon6uh8hw678u?svg\u003dtrue[Build status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "https://coveralls.io/github/AY1920S1-CS2103T-F12-1/main?branch\u003dmaster[image:https://coveralls.io/repos/github/AY1920S1-CS2103T-F12-1/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "https://gitter.im/se-edu/Lobby[image:https://badges.gitter.im/se-edu/Lobby.svg[Gitter chat]]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "Ever forget to go for a group meeting or need reminders for your assignment date? Fret not anymore."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "Horo provides you the ability to store your Events and Tasks, while providing a reminder for whenever you set it."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "You can even tag it to sort by a certain order, as well as import or export your calendar to transfer between computers! +"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "{empty}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "* This is a desktop Reminder application. It has a GUI but most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "* It is a Java application *written in an OOP fashion*, developed and intended for students that need reminders for their Events and Tasks."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://openjfx.io/[JavaFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "* The application was based of *AddressBook-Level3* project created by SE-EDU initiative at https://se-education.org"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "ChengGeng97": 9,
      "marcusteh1238": 3,
      "-": 27
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    String javaFxVersion \u003d \u002711.0.1\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveName \u003d \u0027addressbook.jar\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-name\u0027: \u0027AddressBook-Level3\u0027,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/se-edu/addressbook-level3\u0027,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "Kyzure": 1,
      "-": 154
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "Horo was developed by a team of 5-man. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "\u003d\u003d\u003d Marcus Teh"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "image::marcusteh1238.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "{empty}[https://github.com/marcusteh1238[github]] [\u003c\u003cmarcusteh1238#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "Responsibilities: Testing, Integration and Git Expert"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "\u003d\u003d\u003d Timothy Yu Zhiwen"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "image::kyzure.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "{empty}[https://github.com/Kyzure[github]] [\u003c\u003ckyzure#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "Responsibilities: Documentation and UI"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "\u003d\u003d\u003d Denis"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "image::weomucat.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "{empty}[http://github.com/WeomuCat[github]] [\u003c\u003cweomucat#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "Responsibilities: Logic, Model and Intellij Expert"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "\u003d\u003d\u003d Bruce Ong"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "image::bruceskellator.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "{empty}[http://github.com/bruceskellator[github]] [\u003c\u003cbruceskellator#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "Responsibilities: Code quality, Undo and Redo"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "\u003d\u003d\u003d Ong Cheng Geng"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "image::chenggeng97.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "{empty}[http://github.com/ChengGeng97[github]] [\u003c\u003cchenggeng97#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "Responsibilities: Scheduling and tracking, Reminder and Notification"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "Kyzure": 23,
      "-": 33
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/AY1920S1-CS2103T-F12-1/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "* *Email us* : You can also reach us at `e0310405 [at] u.nus.edu`"
      }
    ],
    "authorContributionMap": {
      "ChengGeng97": 2,
      "-": 5
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "\u003d Horo - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-F12-1/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "By: `Team AY1920S1-CS2103T-F12-1`      Since: `Sept 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cSettingUp#, here\u003e\u003e."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureDiagram.png[]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has two classes called link:{repoURL}/src/main/java/seedu/address/Main.java[`Main`] and link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to the hard disk."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureSequenceDiagram.png[]"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ".  `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeleteSequenceDiagram.png[]"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the Address Book data."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `Address Book`, which `Person` can reference. This would allow `Address Book` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "image:BetterModelClassDiagram.png[]"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[]"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the Address Book data in json format and read it back."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Undo/Redo feature"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Proposed Implementation"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "The undo/redo mechanism is facilitated by `UndoableHistory`."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "It contains an undo/redo history, stored internally as an `eventListStateList` and a `currentStateIndex`."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "`UndoableHistory` also contains a `mainEventList`, which is the `EventList` that the GUI is in sync with."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "It is important that the `Model` works only with the `mainEventList` (and not duplicates) for this reason."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "This `mainEventList` is updated every time an undo or redo occurs."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "* `UndoableHistory#commit()` -- Creates a deep-copy of the `mainEventList` state and saves that copy to its history."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "* `UndoableHistory#undo()` -- Retrieve `mainEventList` \u0027s previous state data from its duplicate and restore `mainEventList`"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "* `UndoableHistory#redo()` -- Retrieve `mainEventList` \u0027s future state data from its duplicate and restore `mainEventList`"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "* `UndoableHistory#clearFutureHistory()` -- Delete all duplicates of `mainEventList` that occur after the index given by the `currentStateIndex`"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "in `eventListStateList`"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitToHistory()`, `Model#undoFromHistory()` and `Model#redoFromHistory()`, and `Model#clearFutureHistory()` respectively."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "Step 1. The user launches the application for the first time. The `UndoableHistory` will be initialized with the initial `mainEventList`. A duplicate of `mainEventList` will be added to `eventListStateList`"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "and the `currentStateIndex` will point to that single `EventList` state in the list."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState0.png[]"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "Step 2. The user executes `delete_event 5` command to delete the 5th event in the event list. The `delete` command calls `Model#commitToHistory()`, causing the modified state of the event list after the `delete 5` command executes to be saved in the `eventListStateList`, and the `currentStatePointer` is shifted to the newly inserted event list state."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState1.png[]"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "Step 3. The user executes `add_task “Celebrate Horo’s Birthday”` to add a new task. The `add` command also calls `Model#commitToHistory()`, causing another modified event list state to be saved into the `eventListStateList`."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState2.png[]"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "If a command fails its execution, it will not call `Model#commitToHistory()`, so the event list state will not be saved into the `eventListStateList`."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "Step 4. The user now decides that adding the task was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoFromHistory()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous event list state, and restores the event list to that state."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState3.png[]"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "If the `currentStateIndex` is 0, pointing to the initial event list state, then there are no previous event list states to restore. The `undo` command uses `Model#canUndoHistory()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoSequenceDiagram.png[]"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoFromHistory()`, which shifts the `currentStateIndex` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "If the `currentStateIndex` is `eventListStateList.size() - 1`, pointing to the latest event list state, then there are no undone address book states to restore. The `redo` command uses `Model#canRedoHistory()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the event list, such as `list`, will usually not call `Model#commitToHistory()`, `Model#undoFromHistory()` or `Model#redoFromHistory()`. Thus, the `eventListStateList` remains unchanged."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState4.png[]"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#clearFutureHistory` and then Model#commitToHistory()`."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "Since the `currentStateIndex` is not pointing at the end of the `eventListStateList`, all event list states after the `currentStateIndex` will be purged. We designed it this way because it no longer makes sense to redo the `add_task “Celebrate Horo’s Birthday”` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState5.png[]"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "image::CommitActivityDiagram.png[]"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of address book states."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedAddressBook`."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Data Encryption"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data encryption feature will be implemented}_"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDocumentation#, here\u003e\u003e."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cTesting#, here\u003e\u003e."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDevOps#, here\u003e\u003e."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "* is a student"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "* has a need to manage their Events and Tasks for visualization."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "* requires reminders for their Events and Tasks."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "*Value proposition*: manage Reminders as well as viewing Events and Tasks much faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |new user |see usage instructions |refer to instructions when I forget how to use the App"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "|`* * *` |user |add an Event or Task |keep track of an Event or Task that I have in the future"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "|`* * *` |user |delete an Event or Task |remove the Event or Task I no longer need."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "|`* * *` |user |find an Event or Task by name |locate the details of the Event or Task without having to go through the entire list"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "|`* * *` |user |find an Event or Task by tags|remember the details of the Event or Task that I forget about"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "|`* * *` |user|undo and redo commands |undo any commands which wrongly inputted"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "|`* * *` |user|edit my Events and Tasks |change the details of the event, be it location, date or time"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "|`* * *` |user that works on multiple computer |port my data between computers |keep track on all my computers."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "|`* * *` |student |have constant reminders to track the deadline of my assignments |not forget to complete and submit them"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "|`* * *` |student |keep track of how long it takes for me to complete a task |gauge how long I will need to take for future similar tasks"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "|`* * *` |student with weekly assignments and lectures |have my reminders to be recurring | be reminded without having to input the information in again"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "|`* * *` |busy student |have a convenient way to visually see my assignments and projects |complete them in the right priority"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "|`* * *` |busy user |be informed if any different events clash with each other |understand which event to prioritize or reschedule"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "|`* *` |user |add a contacts | add them into Events to remind myself who I am meeting up with"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "|`* *` |user |archive my completed Tasks | remind myself if I complete a task but forgot about it"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "|`* *` |user |create custom commands that contain the execution of multiple sub-commands |quickly input in a command without the need to edit it"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "|`* *` |student |visualize my timetable |plan for when it is time to take a break from studying"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "|`* *` |student |find a time for my project teammates to meet up |schedule a meeting without clashing together with other events"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "|`*` |user |import contacts in vCard format| integrate them with my events"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "|`*` |user |export contacts in vCard format | integrate them with my other computers"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "|`*` |student |keep track of sub-tasks in a main task | know my current progress in a report"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "(For all use cases below, the *System* is the `Horo` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "\u003d\u003d\u003d Use case 1: Add a Task"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "1.  User requests to add a Task"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "2.  Horo replies that the Task has been added"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "* 1a. The user adds additional sub-commands to the Task command"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "+"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "* 2a. The given add Task command is of the wrong format."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "+"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "** 2a1. Horo displays an error message."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "+"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "\u003d\u003d\u003d Use case 2: Delete a Task"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "1.  User requests to delete a specific Task from the already displayed list"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "2.  Horo deletes the Task"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "* 2a. The given delete Task command is of the wrong format."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "** 2a1. Horo displays an error message."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "\u003d\u003d\u003d Use case 3: Find a Task by name"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "1.  User requests to find a Task"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "2.  Horo displays the list of Task with the keywords found in its name"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "+"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "* 2a. The given find Task command is of the wrong format."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "+"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "** 2a1. Horo displays an error message."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "+"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "\u003d\u003d\u003d Use case 4: Undo and Redo commands"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "1.  User requests to add an Task"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "2.  Horo replies that the Task has been added"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "3.  User requests to undo the command"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "4.  Horo replies that the previous command has been undone"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "* 1a. The user adds additional sub-commands to the Task command"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "+"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "* 2a. The given add Task command is of the wrong format."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "+"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "** 2a1. Horo displays an error message."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "Use case resumes at step 1"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "* 4a. User decides the to Redo the added Task"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "+"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "** 3a1. Horo replies that the added Task has been redone"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "+"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "\u003d\u003d\u003d Use case 5: Edit a Task"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "1.  User requests to add a Task"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "2.  Horo replies that the Task has been added"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "3.  User request to edit a Task with the sub-commands"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "4.  Horo replies that the Task has been edited"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "+"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "* 1a. The user adds additional sub-commands to the Task command"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "* 2a. The given add Task command is of the wrong format."
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "** 2a1. Horo displays an error message."
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "* 4a. The given edit Task command is of the wrong format."
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "+"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "** 4a1. Horo displays an error message."
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "+"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "Use case resumes at step 3."
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "+"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ".  Should be able to hold up to 1000 Events and Tasks without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ".  Should function on both `32-bit environment` and `64-bit environment`"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ".  Should work without any internet required."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "."
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "[[event]] Event::"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "A thing that happens or takes place during a certain period of time, or of a general time."
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "[[task]] Task::"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "A piece of work that is to be completed or taken note of."
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "*reminder-bot on Discord*"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "Author: JellyWX"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "* A reminder bot on a popular voice and text chat application"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "* Capable of parsing english language as compared to CLI styled commands"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "* Lack of visualization of the Events and Tasks"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "* Parsing english language makes it slower to type with a longer requirement as compared to CLI styled commands"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Kyzure": 150,
      "bruceskellator": 25,
      "-": 376
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "\u003d Horo - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-F12-1/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "By: `Team AY1920S1-CS2103T-F12-1`      Since: `Sept 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "*Horo* is for those who want to use a Command-Line-Interface (CLI) desktop application to manage one’s schedule and reminders. However, it is not just a fully implemented CLI program, but it also includes a Graphical User Interface (GUI) to make it visually appealing. If you are able to remember the commands, *Horo* is definitely an efficient solution to help you store your Events and Reminders. Forgetful person or not, *Horo* will help you remember and remind you, as well as provide a visual aid for what the next most important task coming up is and when it occurs. Continue reading to find out what *Horo* has to offer!"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": ".  Download the latest `horo.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for your Address Book."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ".  Some example commands you can try:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "* `**add_event** Celebrate Rori’s Birthday`: adds an event to the event book."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "* `**delete** -task 3` : deletes the 3rd event shown in the event book."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "* *`exit`* : exits the application."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "*Command Format for Horo*"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "* The first word of any command should be a non-capitalized command, followed by the necessary arguments of the command itself."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "  - E.g. `help`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "  - E.g. `done 1`"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "* If the argument contains more than 1 blank space, it should be contained in a double apostrophe."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "  - E.g. `delete 1`"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "  - E.g. `add_event \"Celebrate Rori\u0027s Birthday\"`"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "* Any sub-commands should be after the main command, and require a `--` before the sub-command itself. Sub commands should"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "  - E.g. `add_event \"Celebrate Horo\u0027s Birthday\" --at 17/09/2019 23:59`"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "*Command Format specifically for this User Guide*"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "* Words that are fully capitalized are the terms supplied by you."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "  - E.g. `event EVENT`"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "* Words in square brackets, `[]`, are optional terms."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "  - E.g. `event EVENT [--at DATE_TIME]"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "* Words with ellipsis, `...`, can be used multiple times including zero times."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "  - E.g. `event EVENT [--at DATE_TIME] [--tag TAG_1] [--tag TAG_2]...`"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "\u003d\u003d\u003d Asking for help : `help` **`[coming in v2.0]`**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "Provides a guide for you if you have problems with commands and it’s format."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "Format and Example: +"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "`help`"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "\u003d\u003d\u003d Calendar, Events and Task"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "The  following commands are related to Events and Tasks which revolves around a calendar. Here are the clarification for Events and Tasks:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "* Event:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "  - Will show up on the Calendar."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "  - Unable to be marked as done."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "  - If past the specified date, it is removed from the Calendar, unless it is recurring."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "* Task **`[coming in v2.0]`**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "  - May show up on the Calendar if time is specified."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "  - Able to be marked as done."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "  - If past the specified date, it is archived into an undone list, which subsequently able to be unarchived."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "\u003d\u003d\u003d\u003d Adding Events"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "Adds an event to the event list."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "Format: +"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "`add_event DESCRIPTION DATE_TIME [--end DATE_TIME] [--remind DATE_TIME] [--tag TAG...]`"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "Examples: +"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "`add_event “Celebrate Rori’s Birthday” “18/08/2019 16:00”` +"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "`add_event “Celebrate Rori’s Birthday” “18/08/2019 16:00” --end “18/08/2019 20:00”` +"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "`add_event “Celebrate Rori’s Birthday” “18/08/2019 16:00” --remind “18/08/2019 12:00”` +"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "`add_event “Celebrate Rori’s Birthday” “18/08/2019 16:00” --tag Birthday Rori` +"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "\u003d\u003d\u003d\u003d Deleting Events"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "Deletes event(s) from the event list."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "1. Delete by event indexes"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "2. Delete by tags"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "Format: +"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "`delete_event [INDEX...] [--tag TAG...]`"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "Examples: +"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "`delete_event 1` +"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "`delete_event 1 2 3` +"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "`delete_event --tag Birthday` +"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "`delete_event 1 2 3 --tag Birthday`"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "\u003d\u003d\u003d\u003d Editing Events"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "Edits existing event(s) from the event list. +"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "Edit by event indexes."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "Format: +"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "`edit_event INDEX... [--description DESCRIPTION] [--at DATE_TIME]  [--remind DATE_TIME] [--tag TAG...]`"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "Examples: +"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "`edit_event 1 2 3 --tag Rori` +"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "`edit_event 1 --description “Play Monster Hunter” --at “17/08/2019 19:00” --remind “17/08/2019 12:00” --tag Kyzure`"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "\u003d\u003d\u003d\u003d Adding Tasks **`[coming in v2.0]`**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "Adds a task to the task list."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "Format: +"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "`add_task DESCRIPTION [--remind DATE_TIME] [--tag TAG...]`"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "Examples: +"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "`add_task “Buy Rori a birthday cake”` +"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "`add_task “Buy Rori a birthday cake” --end “18/08/2019 20:00”` +"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "`add_task “Buy Rori a birthday cake” --remind “18/08/2019 12:00”` +"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "`add_task “Buy Rori a birthday cake” --tag Birthday Rori`"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "\u003d\u003d\u003d\u003d Deleting Tasks **`[coming in v2.0]`**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "Deletes Task(s) from the task list."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "1. Delete by task indexes"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "2. Delete by tags"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "Format: +"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "`delete_task [INDEX...] [--tag TAG...]`"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "Examples: +"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "`delete_task 1` +"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "`delete_task 1 2 3` +"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "`delete_task --tag Birthday` +"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "`delete_task 1 2 3 --tag Birthday`"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "\u003d\u003d\u003d\u003d Editing Tasks **`[coming in v2.0]`**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "Edits existing task(s) from the task list. +"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "Edit by task indexes."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "Format: +"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "`edit_task INDEX... [--description DESCRIPTION] [--remind DATE_TIME] [--tag TAG...]`"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "Examples: +"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "`edit_task 1 2 3 --tag Present` +"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "`edit_task 1 --description “Buy Rori a present” --remind “17/08/2019 12:00” --tag Present`"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "\u003d\u003d\u003d\u003d Making recurring Events: `recur` **`[coming in v2.0]`**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "Makes an Event show up repeatedly in the Calendar"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "Format: +"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "`recur INDEX... [-f|--frequency FREQUENCY]`"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "Examples: +"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "`recur 1 2 3 -f daily` +"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "`recur 1 2 3 --frequency daily`"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "* This will make Events 1, 2 and 3 recur daily on the Calendar."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "\u003d\u003d\u003d\u003d Finding Events and Tasks **`[coming in v2.0]`**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "Finds Events and Tasks whose name or tag contains the specified keyword. If unspecified, Rori will search for all events, tasks and tags containing the keyword."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "Format: +"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "`find [KEYWORD] [--event KEYWORD] [--task KEYWORD] [--tag KEYWORD...]`"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "Example: +"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "`find Birthday` +"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "`find --event Rori` +"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "`find --task Rori` +"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "`find --tag Birthday` +"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "`find --tag Birthday Pet`"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "\u003d\u003d\u003d\u003d Completing Tasks **`[coming in v2.0]`**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "Sets task(s) as done using it\u0027s task index as a parameter, so that you can keep track of your progress."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "Format: +"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "`done INDEX...`"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "Example: +"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "`done 1` +"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "`done 1 2 3`"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "\u003d\u003d\u003d Tagging System **`[coming in v2.0]`**"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "\u003d\u003d\u003d\u003d Adding Tags **`[coming in v2.0]`**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "Adds Tags to particular Events or Tasks"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "Format: +"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "`tag INDEX... --tag TAG...`"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "Example: +"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "`tag 1 2 3 --tag Birthday`"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "\u003d\u003d\u003d\u003d Removing Tags **`[coming in v2.0]`**"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "Removes Tags from particular Events or Tasks"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "Format: +"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "`remove_tag INDEX... --tag TAG...`"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "Example: +"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "`remove_tag 1 2 3 --tag Birthdays`"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "\u003d\u003d\u003d\u003d Deleting Events and Tasks **`[coming in v2.0]`**"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "Deletes all events and tasks."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "1. Delete by indexes"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "2. Delete by tags"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "Format: +"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "`delete [INDEX...] [--tag TAG...]`"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "Example: +"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "`delete 1 2 3`"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "`delete --tag Work` +"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "* This will delete all events and tasks that have been tagged as Work."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "`delete --tag Work \"Project Animation\"` +"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "* This will delete all events and tasks that have been tagged as both Work AND Project Animation."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "\u003d\u003d\u003d UI"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "\u003d\u003d\u003d\u003d Switching between List and Calendar view **`[coming in v2.0]`**"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "This will toggle the UI on the right between the List and Calendar view. +"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "Switching between List and Calendar view"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "Format: +"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "`view`"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "\u003d\u003d\u003d Undo Redo"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "\u003d\u003d\u003d\u003d Undo"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "Undoes the previous command. +"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "Commands can be undone up to the starting up of the program"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "Format: +"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "`undo`"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "\u003d\u003d\u003d\u003d Redo **`[coming in v2.0]`**"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "Redoes the previously undone command"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "Format: +"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "`redo`"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "Able to redo commands that have been undone and"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "are not succeeded by any other state-changing commands (e.g. add_event, delete_event, edit)"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "Exits the program."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Address Book folder."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "* *Help* : `help` +"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "* *Adding an Event* : `add_event DESCRIPTION DATE_TIME [--remind DATE_TIME] [--tag TAG...]` +"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "E.g. `add_event \"Celebrate Horo\u0027s Birthday\" --at 17/09/2019 23:59`"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "* *Deleting Events* : `delete_event [INDEX...] [--tag TAG...]` +"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "E.g. `delete_event 1 2 3`"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "* *Editing Events* : `edit_event INDEX... [--description DESCRIPTION] [--at DATE_TIME] [--remind DATE_TIME] [--tag TAG...]` +"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "E.g. `edit_event 1 --description “Play Monster Hunter” --at “17/08/2019 19:00” --remind “17/08/2019 12:00” --tag Kyzure`"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "* *Adding a Task* : `add_task DESCRIPTION [--tag TAG...]` +"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "E.g. `add_task “Celebrate Horo’s Birthday” --tag Birthday`"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "* *Deleting Tasks* : `delete_task [INDEX...] [--tag TAG...]` +"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "E.g. `delete_task 1 2 3`"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "* *Editing Tasks* : `edit_task INDEX... [--description DESCRIPTION] [--remind DATE_TIME] [--tag TAG...]` +"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "E.g. `edit_task 1 --description “Play Monster Hunter” --remind “17/08/2019 12:00” --tag Kyzure`"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "* *Adding a Tag* : `tag INDEX... --tag TAG...` +"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "E.g. `tag 1 2 3 --tag Birthday`"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "* *Removing a Tag* : `remove_tag INDEX... --tag TAG...` +"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "E.g. `remove_tag 1 2 3 --tag Birthday`"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "* *Find* : `find [--tag TAG] KEYWORD...` +"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "E.g. `find --tag homework cs2100`"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "* *Undo* : `undo`"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "* *Redo* : `redo`"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "* *Exiting the Program* : `exit`"
      }
    ],
    "authorContributionMap": {
      "ChengGeng97": 267,
      "bruceskellator": 1,
      "-": 83
    }
  },
  {
    "path": "docs/team/kyzure.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "\u003d Timothy Yu Zhiwen - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "\u003d\u003d PROJECT: Horo"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "Horo is a desktop Reminder application. It has a GUI but most of the user interactions happen using a CLI (Command Line Interface). It is a Java application *written in an OOP fashion*, developed and intended for Students requiring a place to consolidate their Events and Task."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "* *Major enhancement*: enhanced *UI* component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "** What it does: allows the user to interact with the GUI together with CLI, showing the Events and Task to the user as well as outputting the log for what the user did."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "** Justification: This feature is what makes the product visually appealing for the user, making the Events and Tasks compact and concise for the user to see, as well as having a log for what the user previously did."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "** Highlights: This enhancement affects the current and future commands, as it requires several other components for it to show the result to the user. Future commands or addition to Events and Task requires changes to the existing UI, as the GUI and UI component will require further changes."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "** Credits: _[https://top.gg/bot/349920059549941761[Reminder Bot]]_"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "* *Minor enhancement*: _To be implemented_"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "* *Code contributed*: _To be implemented_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "_To be implemented_ +"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "_To be implemented_"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddelete]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "_To be implemented_"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "ChengGeng97": 17,
      "-": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import seedu.address.logic.CommandManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import seedu.address.logic.NotificationManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import seedu.address.logic.UiManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import seedu.address.logic.commands.AddEventCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import seedu.address.logic.commands.DeleteEventCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import seedu.address.logic.commands.EditEventCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import seedu.address.model.events.EventList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "import seedu.address.notification.Notification;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    private static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    private static final String COMMAND_ADD_EVENT \u003d \"add_event\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    private static final String COMMAND_DELETE_EVENT \u003d \"delete_event\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    private static final String COMMAND_EDIT_EVENT \u003d \"edit_event\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    private ModelManager modelManager;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    private UiManager uiManager;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    private Notification notification;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        Config config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        notification \u003d new NotificationManager();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        CommandManager commandManager \u003d new CommandManager();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        modelManager \u003d new ModelManager(new AddressBook(), new EventList(), userPrefs);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        uiManager \u003d new UiManager();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        commandManager.addCommand(COMMAND_ADD_EVENT, () -\u003e AddEventCommand.newBuilder(modelManager));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        commandManager.addCommand(COMMAND_DELETE_EVENT, () -\u003e DeleteEventCommand.newBuilder(modelManager));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        commandManager.addCommand(COMMAND_EDIT_EVENT, () -\u003e EditEventCommand.newBuilder(modelManager));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        commandManager.addUserOutputListener(uiManager);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        modelManager.addEventListListener(uiManager);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        uiManager.addCommandInputListener(commandManager);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook initialData;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        return new ModelManager(initialData, new EventList(), userPrefs);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        uiManager.start(primaryStage);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "        notification.shutDown();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            storage.saveUserPrefs(modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengGeng97": 5,
      "WeomuCat": 30,
      "-": 167
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/GuiSettings.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 720;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 1280;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeomuCat": 2,
      "-": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    public static final String MESSAGE_REQUIRED_COMMAND_ARGUMENT \u003d \"Argument \u0027%s\u0027 is required!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    public static final String MESSAGE_INVALID_DATE_TIME \u003d \"Invalid date time! Please enter in \u0027%s\u0027 format.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Invalid index! Please enter an integer.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    public static final String MESSAGE_INVALID_EVENT_INDEX \u003d \"Invalid index! Event with index \u0027%s\u0027 does not exist.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    public static final String MESSAGE_ADD_EVENT_SUCCESS \u003d \"New event added: %s\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    public static final String MESSAGE_DELETE_EVENT_SUCCESS \u003d \"Events deleted: %s\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    public static final String MESSAGE_EDIT_EVENT_SUCCESS \u003d \"Events edited: %s\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeomuCat": 11,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/ics/IcsException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "package seedu.address.ics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": " * Exception is created within the IcsParser class when something wrong happens while an ICS file is being imported."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "public class IcsException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    public IcsException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeomuCat": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/ics/IcsParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "package seedu.address.ics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import java.util.TimeZone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import seedu.address.model.events.DateTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import seedu.address.model.events.EventSource;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "/***"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": " * Parses an ICS file to allow importing into Horo."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "public class IcsParser {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    private static final String FILE_DOES_NOT_EXIST \u003d \"Sorry, the file path you\u0027ve specified is invalid!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    private static final String FILE_CANNOT_BE_READ \u003d \"Sorry, the file specified cannot be read!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    private static final String FILE_CANNOT_BE_FOUND \u003d \"Sorry, the file specified cannot be found!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    private static final String INVALID_FILE_EXTENSION \u003d \"The file specified is not an ICS file!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    private static final String FILE_IS_CORRUPTED \u003d \"The ICS file is corrupted!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "     * This enum represents the different types of objects the IcsParser could be parsing at any given point in time."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    private enum ParseState { None, Todo, Event }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    private File icsFile;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    private IcsParser(String path) throws IcsException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        this.icsFile \u003d getIcsFile(path);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    private File getIcsFile(String path) throws IcsException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        File file \u003d new File(path);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        if (!file.exists()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            throw new IcsException(FILE_DOES_NOT_EXIST);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        } else if (!file.canRead()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            throw new IcsException(FILE_CANNOT_BE_READ);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        } else if (!file.toString().endsWith(\".ics\")) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            throw new IcsException(INVALID_FILE_EXTENSION);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        return file;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    public static IcsParser parse(String path) throws IcsException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        return new IcsParser(path);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    public ArrayList\u003cEventSource\u003e getEvents() throws IcsException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        ArrayList\u003cEventSource\u003e events \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            ParseState currentlyParsing \u003d ParseState.None;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            BufferedReader br \u003d new BufferedReader(new FileReader(icsFile));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            StringBuilder stringBuilder \u003d new StringBuilder(\"\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            while (br.ready()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                String line \u003d br.readLine();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                if (currentlyParsing \u003d\u003d ParseState.Event) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                    if (line.startsWith(\"END:VEVENT\")) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                        currentlyParsing \u003d ParseState.None;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                        EventSource eventSource \u003d createEvent(stringBuilder.toString());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                        events.add(eventSource);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                        stringBuilder.append(line).append(\"\\n\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                    if (line.equals(\"BEGIN:VEVENT\")) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                        if (currentlyParsing !\u003d ParseState.None) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                            throw new IcsException(FILE_IS_CORRUPTED);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                            currentlyParsing \u003d ParseState.Event;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                            stringBuilder \u003d new StringBuilder(\"\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            return events;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            throw new IcsException(FILE_CANNOT_BE_FOUND);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            throw new IcsException(FILE_CANNOT_BE_READ);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "     * Converts the timestamp from the format given in the ICS file to a DateTime object."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "     * @param timestamp A timestamp in the default ICS file specification format."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "     * @return A DateTime object representing the timestamp."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "     * @throws IcsException Thrown when the timestamp provided is invalid."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    private DateTime parseTimeStamp(String timestamp) throws IcsException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            SimpleDateFormat sdf \u003d new SimpleDateFormat(\"yyyyMMdd\u0027T\u0027HHmmss\u0027Z\u0027\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            sdf.setTimeZone(TimeZone.getTimeZone(\"GMT\"));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            return new DateTime(sdf.parse(timestamp).toInstant());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            throw new IcsException(\"The timestamp provided is invalid!\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "     * Creates an EventSource object from the data provided in the ICS File."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "     * Currently it will only parse the Start time and Description of the ICS VEvent."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "     * @param segment A String that represents the Event object in the ICS File."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "     * @return an EventSource object representing the data provided."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "     * @throws IcsException Exception thrown when there was an issue while making the EventSource object."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    public EventSource createEvent(String segment) throws IcsException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        String[] lines \u003d segment.split(\"\\\\r?\\\\n\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        String description \u003d \"\";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        DateTime dateTime \u003d null;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        for (String line : lines) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            if (line.startsWith(\"DESCRIPTION:\")) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                description \u003d line.replaceFirst(\"DESCRIPTION:\", \"\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            } else if (line.startsWith(\"DTSTART:\")) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                String timestamp \u003d line.replaceFirst(\"DTSTART:\", \"\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                dateTime \u003d parseTimeStamp(timestamp);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            } else if (line.equals(\"END:VCALENDAR\")) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                if (description.equals(\"\") || dateTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                    throw new IcsException(FILE_IS_CORRUPTED);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        if (description.equals(\"\")) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            throw new IcsException(\"The description of an event cannot be empty!\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        return new EventSource(description, dateTime);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeomuCat": 133
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/CommandManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import seedu.address.logic.commands.CommandBuilder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import seedu.address.logic.commands.listeners.CommandInputListener;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import seedu.address.logic.parser.CommandKeywordParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import seedu.address.logic.parser.CommandParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import seedu.address.ui.UserOutput;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import seedu.address.ui.listeners.UserOutputListener;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": " * Represents a class that invokes commands based on command input it receives from a Ui."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": " * Represents the invoker class in https://en.wikipedia.org/wiki/Command_pattern."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "public class CommandManager implements CommandInputListener {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(CommandManager.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    private final CommandKeywordParser keywordParser;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    private final CommandParser commandParser;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    private final List\u003cUserOutputListener\u003e userOutputListeners;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    public CommandManager() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        this.keywordParser \u003d new CommandKeywordParser();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        this.commandParser \u003d new CommandParser(this.keywordParser);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        this.userOutputListeners \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "     * Adds a command to be tracked by CommandManager."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "     * @param keyword the command keyword"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "     * @param builder the supplier to invoke"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    public void addCommand(String keyword, Supplier\u003cCommandBuilder\u003e builder) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        this.keywordParser.addCommand(keyword, builder);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    public void addUserOutputListener(UserOutputListener listener) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        this.userOutputListeners.add(listener);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    public void onCommandInput(String input) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            Command command \u003d this.commandParser.parse(input);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            UserOutput output \u003d command.execute();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            userOutputListeners.forEach(l -\u003e l.onUserOutput(output));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            logger.info(\"Invalid command: \" + input);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            userOutputListeners.forEach(l -\u003e l.onUserOutput(new UserOutput(e.getMessage())));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeomuCat": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/NotificationManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "import seedu.address.model.events.ReadOnlyEventList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import seedu.address.notification.EventNotificationThread;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import seedu.address.notification.Notification;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import seedu.address.notification.SystemTrayCommunicator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": " * The implementing class of the Notification interface."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "public class NotificationManager implements Notification {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(NotificationManager.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "    private EventNotificationThread currentEventNotificationThread;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "    private SystemTrayCommunicator systemTrayCommunicator;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "     * Generates a new NotificationManager."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "    public NotificationManager() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "        systemTrayCommunicator \u003d new SystemTrayCommunicator();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "        systemTrayCommunicator.initialise();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "     * Updates the queue of notifications to be posted."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "     * @param readOnlyEventList The list of events for which notifications should be posted"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "    public void updateNotificationQueue(ReadOnlyEventList readOnlyEventList) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "        interruptExistingThread();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "        createNewThread(readOnlyEventList);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "     * Interrupts any ongoing threads so that the program may shutdown gracefully."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "    public void shutDown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "        interruptExistingThread();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "     * Interrupts the currentEventNotificationThread if it exists, and does nothing otherwise."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "    private void interruptExistingThread () {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "        if (currentEventNotificationThread !\u003d null) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "            logger.info(\"Attempting to interrupt current EventNotificationThread.\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "            currentEventNotificationThread.interrupt();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "     * Generates and starts a new EventNotificationThread."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "     * @param readOnlyEventList The ReadOnlyEventList through which notifications can be generated."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "    private void createNewThread(ReadOnlyEventList readOnlyEventList) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "        currentEventNotificationThread \u003d new EventNotificationThread(systemTrayCommunicator, readOnlyEventList);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "        currentEventNotificationThread.setDaemon(true);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "        currentEventNotificationThread.start();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengGeng97": 62,
      "WeomuCat": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/UiManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import seedu.address.logic.commands.listeners.CommandInputListener;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import seedu.address.model.events.EventSource;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import seedu.address.model.listeners.EventListListener;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import seedu.address.ui.MainWindow;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import seedu.address.ui.UserOutput;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import seedu.address.ui.listeners.UserOutputListener;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": " * Responsible for creating and destroying the graphical ui."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "public class UiManager implements Ui, UserOutputListener, EventListListener {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/address_book_32.png\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    private List\u003cCommandInputListener\u003e uiListeners;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    public UiManager() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        this.uiListeners \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, commandInput -\u003e {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                // TODO: Temporary command"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                if (commandInput.equals(\"view\")) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                    this.mainWindow.toggleView();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                    // Notify listeners of new command input."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                    this.uiListeners.forEach(listener -\u003e listener.onCommandInput(commandInput));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            });"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    public void addCommandInputListener(CommandInputListener listener) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        this.uiListeners.add(listener);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    private void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    public void onEventListChange(List\u003cEventSource\u003e events) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        this.mainWindow.onEventListChange(events);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    public void onUserOutput(UserOutput output) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        this.mainWindow.onUserOutput(output);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeomuCat": 38,
      "-": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddEventCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_ADD_EVENT_SUCCESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import seedu.address.model.events.DateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import seedu.address.model.events.EventSource;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import seedu.address.ui.UserOutput;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": " * Represents a Command which adds an EventSource to the Model."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "public class AddEventCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    private final EventSource event;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    AddEventCommand(AddEventCommandBuilder builder) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        String description \u003d Objects.requireNonNull(builder.getDescription());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        DateTime start \u003d Objects.requireNonNull(builder.getStart());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        this.model \u003d builder.getModel();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        this.event \u003d new EventSource(description, start);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    public static CommandBuilder newBuilder(Model model) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        return new AddEventCommandBuilder(model).init();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    public UserOutput execute() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        model.addEvent(this.event);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        return new UserOutput(String.format(MESSAGE_ADD_EVENT_SUCCESS, this.event.getDescription()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeomuCat": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddEventCommandBuilder.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import seedu.address.logic.commands.arguments.DateTimeArgument;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import seedu.address.logic.commands.arguments.DateTimeArgumentBuilder;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import seedu.address.logic.commands.arguments.StringArgument;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import seedu.address.logic.commands.arguments.StringArgumentBuilder;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import seedu.address.logic.commands.arguments.StringVariableArguments;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import seedu.address.logic.commands.arguments.StringVariableArgumentsBuilder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import seedu.address.logic.commands.options.Option;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import seedu.address.logic.commands.options.OptionBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import seedu.address.model.events.DateTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": " * Represents a CommandBuilder responsible for creating {@link AddEventCommand}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "class AddEventCommandBuilder extends CommandBuilder {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    public static final String OPTION_END_DATE_TIME \u003d \"--end\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    public static final String OPTION_REMIND_DATE_TIME \u003d \"--remind\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    public static final String OPTION_TAGS \u003d \"--tag\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    private static final String ARGUMENT_DESCRIPTION \u003d \"DESCRIPTION\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    private static final String ARGUMENT_START_DATE_TIME \u003d \"START_DATE_TIME\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    private static final String ARGUMENT_END_DATE_TIME \u003d \"END_DATE_TIME\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    private static final String ARGUMENT_REMIND_DATE_TIME \u003d \"REMIND_DATE_TIME\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    private static final String ARGUMENT_TAGS \u003d \"TAGS\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    private final StringArgumentBuilder description;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    private final DateTimeArgumentBuilder start;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    private final DateTimeArgumentBuilder end;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    private final DateTimeArgumentBuilder remind;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    private final StringVariableArgumentsBuilder tags;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    AddEventCommandBuilder(Model model) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        this.description \u003d StringArgument.newBuilder(ARGUMENT_DESCRIPTION);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        this.start \u003d DateTimeArgument.newBuilder(ARGUMENT_START_DATE_TIME);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        this.end \u003d DateTimeArgument.newBuilder(ARGUMENT_END_DATE_TIME);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        this.remind \u003d DateTimeArgument.newBuilder(ARGUMENT_REMIND_DATE_TIME);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        this.tags \u003d StringVariableArguments.newBuilder(ARGUMENT_TAGS);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    OptionBuilder getCommandArguments() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        return Option.newBuilder()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            .addArgument(this.description)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            .addArgument(this.start);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    Map\u003cString, OptionBuilder\u003e getCommandOptions() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        return Map.of("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            OPTION_END_DATE_TIME, Option.newBuilder()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                .addArgument(this.end),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            OPTION_REMIND_DATE_TIME, Option.newBuilder()"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                .addArgument(this.remind),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            OPTION_TAGS, Option.newBuilder()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                .setVariableArguments(this.tags)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        );"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    Model getModel() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        return model;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    String getDescription() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        return this.description.getValue();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    DateTime getStart() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        return this.start.getValue();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    Command commandBuild() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        return new AddEventCommand(this);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeomuCat": 84
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import seedu.address.ui.UserOutput;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    public abstract UserOutput execute() throws CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeomuCat": 2,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandBuilder.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import seedu.address.logic.commands.exceptions.ArgumentException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import seedu.address.logic.commands.options.Option;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import seedu.address.logic.commands.options.OptionBuilder;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": " * Represents an object which can build commands."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": " * Responsible for giving the correct user input to the correct {@link Option}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "public abstract class CommandBuilder {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    // Context is the current Option to add arguments to."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    private Option context;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    // Represents the command arguments in a Command."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    private Option arguments;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    private Map\u003cString, Option\u003e options;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "     * This method must be called first."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    CommandBuilder init() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        // Build OptionBuilders"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        this.arguments \u003d this.getCommandArguments().build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        this.options \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        for (Map.Entry\u003cString, OptionBuilder\u003e entry : this.getCommandOptions().entrySet()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            String keyword \u003d entry.getKey();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            OptionBuilder option \u003d entry.getValue();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            this.options.put(keyword, option.build());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        // Set the initial context."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        this.context \u003d this.arguments;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        this.context.setActive();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "     * Accepts a sentence from user input tokens."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "     * A sentence can either be an option or an argument."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "     * @param sentence a sentence from user input"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    public CommandBuilder acceptSentence(String sentence) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        if (this.options.containsKey(sentence)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            // Sets the context."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            this.context \u003d this.options.get(sentence);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            this.context.setActive();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            // Adds an argument to the context."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            this.context.acceptArgument(sentence);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "     * Builds all arguments and returns a Command."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "     * @return the built Command"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "     * @throws ArgumentException if any argument is required but null"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "     * @throws ParseException if any argument is required but null"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    public Command build() throws ArgumentException, ParseException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        this.arguments.build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        for (Option option : this.options.values()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            option.build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        return this.commandBuild();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    abstract OptionBuilder getCommandArguments();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    abstract Map\u003cString, OptionBuilder\u003e getCommandOptions();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    abstract Command commandBuild();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeomuCat": 79
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteEventCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_DELETE_EVENT_SUCCESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_EVENT_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import seedu.address.model.events.EventSource;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import seedu.address.ui.UserOutput;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": " * Represents a Command that deletes EventSources from the Model."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "public class DeleteEventCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    private final List\u003cInteger\u003e indexes;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    private final List\u003cString\u003e tags;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    DeleteEventCommand(DeleteEventCommandBuilder builder) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        this.model \u003d builder.getModel();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        this.indexes \u003d builder.getIndexes();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        this.tags \u003d builder.getTags();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    public static CommandBuilder newBuilder(Model model) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        return new DeleteEventCommandBuilder(model).init();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    public UserOutput execute() throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        ObservableList\u003cEventSource\u003e list \u003d model.getEventList().getReadOnlyList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        List\u003cEventSource\u003e events \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        for (Integer index : indexes) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                events.add(list.get(index));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                throw new CommandException(String.format(MESSAGE_INVALID_EVENT_INDEX, index + 1));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        for (EventSource event : events) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            model.deleteEvent(event);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        return new UserOutput(String.format(MESSAGE_DELETE_EVENT_SUCCESS, events.stream()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            .map(EventSource::getDescription)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            .collect(Collectors.joining(\", \"))));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeomuCat": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteEventCommandBuilder.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import seedu.address.logic.commands.arguments.IndexVariableArguments;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import seedu.address.logic.commands.arguments.IndexVariableArgumentsBuilder;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import seedu.address.logic.commands.arguments.StringVariableArguments;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import seedu.address.logic.commands.arguments.StringVariableArgumentsBuilder;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import seedu.address.logic.commands.options.Option;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import seedu.address.logic.commands.options.OptionBuilder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": " * Represents a CommandBuilder responsible for creating {@link DeleteEventCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "class DeleteEventCommandBuilder extends CommandBuilder {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    public static final String OPTION_TAGS \u003d \"--tag\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    private static final String ARGUMENT_INDEXES \u003d \"INDEXES\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    private static final String ARGUMENT_TAGS \u003d \"TAGS\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    private final IndexVariableArgumentsBuilder indexes;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    private final StringVariableArgumentsBuilder tags;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    DeleteEventCommandBuilder(Model model) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        this.indexes \u003d IndexVariableArguments.newBuilder(ARGUMENT_INDEXES);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        this.tags \u003d StringVariableArguments.newBuilder(ARGUMENT_TAGS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    OptionBuilder getCommandArguments() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        return Option.newBuilder()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            .setVariableArguments(this.indexes);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    Map\u003cString, OptionBuilder\u003e getCommandOptions() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        return Map.of("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            OPTION_TAGS, Option.newBuilder()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                .setVariableArguments(this.tags)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        );"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    Model getModel() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        return model;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    List\u003cInteger\u003e getIndexes() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        return this.indexes.getValues();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    List\u003cString\u003e getTags() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        return this.tags.getValues();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    Command commandBuild() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        return new DeleteEventCommand(this);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeomuCat": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditEventCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_EDIT_EVENT_SUCCESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_EVENT_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import seedu.address.model.events.DateTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import seedu.address.model.events.EventSource;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import seedu.address.ui.UserOutput;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": " * Represents a Command that edits EventSources in the Model."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "public class EditEventCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    private final List\u003cInteger\u003e indexes;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    private final DateTime start;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    private final DateTime end;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    private final DateTime remind;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    private final List\u003cString\u003e tags;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    EditEventCommand(EditEventCommandBuilder builder) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        this.model \u003d builder.getModel();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        this.indexes \u003d Objects.requireNonNull(builder.getIndexes());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        this.description \u003d builder.getDescription();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        this.start \u003d builder.getStart();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        this.end \u003d builder.getEnd();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        this.remind \u003d builder.getRemind();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        this.tags \u003d builder.getTags();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    public static CommandBuilder newBuilder(Model model) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        return new EditEventCommandBuilder(model).init();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    public UserOutput execute() throws CommandException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        ObservableList\u003cEventSource\u003e list \u003d model.getEventList().getReadOnlyList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        List\u003cEventSource\u003e events \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        for (Integer index : indexes) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                events.add(list.get(index));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                throw new CommandException(String.format(MESSAGE_INVALID_EVENT_INDEX, index + 1));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        for (EventSource event : events) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            String description;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            if (this.description \u003d\u003d null) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                description \u003d event.getDescription();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                description \u003d this.description;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            DateTime start;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            if (this.start \u003d\u003d null) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                start \u003d event.getStartDateTime();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                start \u003d this.start;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            model.setEvent(event, new EventSource(description, start));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        return new UserOutput(String.format(MESSAGE_EDIT_EVENT_SUCCESS, events.stream()"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            .map(EventSource::getDescription)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            .collect(Collectors.joining(\", \"))));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeomuCat": 81
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditEventCommandBuilder.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import seedu.address.logic.commands.arguments.DateTimeArgument;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import seedu.address.logic.commands.arguments.DateTimeArgumentBuilder;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import seedu.address.logic.commands.arguments.IndexVariableArguments;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import seedu.address.logic.commands.arguments.IndexVariableArgumentsBuilder;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import seedu.address.logic.commands.arguments.StringArgument;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import seedu.address.logic.commands.arguments.StringArgumentBuilder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import seedu.address.logic.commands.arguments.StringVariableArguments;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import seedu.address.logic.commands.arguments.StringVariableArgumentsBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import seedu.address.logic.commands.options.Option;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import seedu.address.logic.commands.options.OptionBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import seedu.address.model.events.DateTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": " * Represents a CommandBuilder responsible for creating {@link EditEventCommand}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "class EditEventCommandBuilder extends CommandBuilder {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    public static final String OPTION_DESCRIPTION \u003d \"--description\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    public static final String OPTION_START_DATE_TIME \u003d \"--start\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    public static final String OPTION_END_DATE_TIME \u003d \"--end\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    public static final String OPTION_REMIND_DATE_TIME \u003d \"--remind\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    public static final String OPTION_TAGS \u003d \"--tag\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    private static final String ARGUMENT_INDEXES \u003d \"INDEXES\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    private static final String ARGUMENT_DESCRIPTION \u003d \"DESCRIPTION\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    private static final String ARGUMENT_START_DATE_TIME \u003d \"START_DATE_TIME\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    private static final String ARGUMENT_END_DATE_TIME \u003d \"END_DATE_TIME\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    private static final String ARGUMENT_REMIND_DATE_TIME \u003d \"REMIND_DATE_TIME\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    private static final String ARGUMENT_TAGS \u003d \"TAGS\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    private final IndexVariableArgumentsBuilder indexes;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    private final StringArgumentBuilder description;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    private final DateTimeArgumentBuilder start;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    private final DateTimeArgumentBuilder end;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    private final DateTimeArgumentBuilder remind;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    private final StringVariableArgumentsBuilder tags;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    EditEventCommandBuilder(Model model) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        this.indexes \u003d IndexVariableArguments.newBuilder(ARGUMENT_INDEXES);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        this.description \u003d StringArgument.newBuilder(ARGUMENT_DESCRIPTION);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        this.start \u003d DateTimeArgument.newBuilder(ARGUMENT_START_DATE_TIME);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        this.end \u003d DateTimeArgument.newBuilder(ARGUMENT_END_DATE_TIME);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        this.remind \u003d DateTimeArgument.newBuilder(ARGUMENT_REMIND_DATE_TIME);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        this.tags \u003d StringVariableArguments.newBuilder(ARGUMENT_TAGS);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    OptionBuilder getCommandArguments() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        return Option.newBuilder()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            .setVariableArguments(this.indexes);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    Map\u003cString, OptionBuilder\u003e getCommandOptions() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        return Map.of("
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            OPTION_DESCRIPTION, Option.newBuilder()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                .addArgument(this.description),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            OPTION_START_DATE_TIME, Option.newBuilder()"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                .addArgument(this.start),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            OPTION_END_DATE_TIME, Option.newBuilder()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                .addArgument(this.end),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            OPTION_REMIND_DATE_TIME, Option.newBuilder()"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                .addArgument(this.remind),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            OPTION_TAGS, Option.newBuilder()"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                .setVariableArguments(this.tags)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        );"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    Model getModel() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        return model;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    List\u003cInteger\u003e getIndexes() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        return this.indexes.getValues();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    String getDescription() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        return this.description.getValue();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    DateTime getStart() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        return this.start.getValue();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    DateTime getEnd() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        return this.end.getValue();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    DateTime getRemind() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        return this.remind.getValue();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    List\u003cString\u003e getTags() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        return this.tags.getValues();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    Command commandBuild() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        return new EditEventCommand(this);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeomuCat": 111
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/arguments/Argument.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "package seedu.address.logic.commands.arguments;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_REQUIRED_COMMAND_ARGUMENT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import seedu.address.logic.commands.exceptions.ArgumentException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": " * Represents an argument in an Option."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": " * It always has a defined type, and user input entered into this argument will be parsed to the defined type."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": " * @param \u003cT\u003e the type of this argument"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "public abstract class Argument\u003cT\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    private T value;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    private String userInput;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    Argument(ArgumentBuilder\u003cT\u003e builder) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        this.description \u003d builder.getDescription();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "     * Accepts user input."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "     * @param userInput the user input"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "     * @return this instance"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    public Argument\u003cT\u003e accept(String userInput) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        Objects.requireNonNull(userInput);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "     * Builds the argument value, checks if user input is valid and parses it into the defined type."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "     * @param required if the argument is required to have a value"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "     * @return the built value"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "     * @throws ArgumentException if the argument is required but user input is null"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "     * @throws ParseException if the user input is invalid"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    public T build(boolean required) throws ArgumentException, ParseException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        if (this.userInput \u003d\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            if (required) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                throw new ArgumentException(String.format(MESSAGE_REQUIRED_COMMAND_ARGUMENT, this.description));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            this.value \u003d this.parse(userInput);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        return this.value;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    abstract T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    T getValue() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeomuCat": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/arguments/ArgumentBuilder.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "package seedu.address.logic.commands.arguments;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": " * Represents an object that builds arguments."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": " * @param \u003cT\u003e the type of the argument to build"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "public abstract class ArgumentBuilder\u003cT\u003e {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    private Argument\u003cT\u003e argument;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    ArgumentBuilder(String description) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    public T getValue() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        return this.argument.getValue();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "     * Builds the argument."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "     * @return the built argument"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    public Argument\u003cT\u003e build() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        this.argument \u003d argumentBuild();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        return this.argument;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    abstract Argument\u003cT\u003e argumentBuild();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    String getDescription() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeomuCat": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/arguments/DateTimeArgument.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "package seedu.address.logic.commands.arguments;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import seedu.address.logic.parser.DateTimeParser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import seedu.address.model.events.DateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": " * Represents a command argument of type DateTime."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "public class DateTimeArgument extends Argument\u003cDateTime\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    DateTimeArgument(ArgumentBuilder\u003cDateTime\u003e builder) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        super(builder);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    public static DateTimeArgumentBuilder newBuilder(String description) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        return new DateTimeArgumentBuilder(description);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    DateTime parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        return new DateTimeParser().parse(userInput);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeomuCat": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/arguments/DateTimeArgumentBuilder.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "package seedu.address.logic.commands.arguments;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import seedu.address.model.events.DateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": " * Represents an ArgumentBuilder responsible for building {@link DateTimeArgument}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "public class DateTimeArgumentBuilder extends ArgumentBuilder\u003cDateTime\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    DateTimeArgumentBuilder(String description) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    Argument\u003cDateTime\u003e argumentBuild() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        return new DateTimeArgument(this);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeomuCat": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/arguments/IndexVariableArguments.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "package seedu.address.logic.commands.arguments;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import seedu.address.logic.parser.IndexParser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": " * Represents a variable argument of Indexes."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "public class IndexVariableArguments extends VariableArguments\u003cInteger\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    IndexVariableArguments(VariableArgumentsBuilder\u003cInteger\u003e builder) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        super(builder);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    public static IndexVariableArgumentsBuilder newBuilder(String description) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        return new IndexVariableArgumentsBuilder(description);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    Integer parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        return new IndexParser().parse(userInput);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeomuCat": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/arguments/IndexVariableArgumentsBuilder.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "package seedu.address.logic.commands.arguments;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": " * Represents a VariableArgumentsBuilder responsible for building {@link IndexVariableArguments}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "public class IndexVariableArgumentsBuilder extends VariableArgumentsBuilder\u003cInteger\u003e {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    IndexVariableArgumentsBuilder(String description) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    VariableArguments\u003cInteger\u003e argumentBuild() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        return new IndexVariableArguments(this);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeomuCat": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/arguments/StringArgument.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "package seedu.address.logic.commands.arguments;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": " * Represents a command argument of type String."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "public class StringArgument extends Argument\u003cString\u003e {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    StringArgument(ArgumentBuilder\u003cString\u003e builder) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        super(builder);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    public static StringArgumentBuilder newBuilder(String description) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        return new StringArgumentBuilder(description);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    String parse(String userInput) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        return userInput;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeomuCat": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/arguments/StringArgumentBuilder.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "package seedu.address.logic.commands.arguments;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": " * Represents an ArgumentBuilder responsible for building {@link StringArgument}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "public class StringArgumentBuilder extends ArgumentBuilder\u003cString\u003e {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    StringArgumentBuilder(String description) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    Argument\u003cString\u003e argumentBuild() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        return new StringArgument(this);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeomuCat": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/arguments/StringVariableArguments.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "package seedu.address.logic.commands.arguments;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": " * Represents a variable argument of Strings."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "public class StringVariableArguments extends VariableArguments\u003cString\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    StringVariableArguments(VariableArgumentsBuilder\u003cString\u003e builder) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        super(builder);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    public static StringVariableArgumentsBuilder newBuilder(String description) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        return new StringVariableArgumentsBuilder(description);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    String parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        return userInput;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeomuCat": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/arguments/StringVariableArgumentsBuilder.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "package seedu.address.logic.commands.arguments;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": " * Represents a ArgumentBuilder responsible for building {@link StringVariableArguments}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "public class StringVariableArgumentsBuilder extends VariableArgumentsBuilder\u003cString\u003e {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    StringVariableArgumentsBuilder(String description) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    VariableArguments\u003cString\u003e argumentBuild() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        return new StringVariableArguments(this);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeomuCat": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/arguments/VariableArguments.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "package seedu.address.logic.commands.arguments;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": " * Represents a variable argument of a Command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": " * A variable argument can take in 0..* arguments, and it always has a defined argument type."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": " * User input entered into this argument will be parsed to the defined argument type."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": " * @param \u003cT\u003e the type of this variable argument"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "public abstract class VariableArguments\u003cT\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    private final List\u003cT\u003e values;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    private final List\u003cString\u003e userInput;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    VariableArguments(VariableArgumentsBuilder\u003cT\u003e builder) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        this.values \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        this.userInput \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        this.description \u003d builder.getDescription();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "     * Accepts user input."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "     * @param userInput the user input"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "     * @return this instance"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    public VariableArguments\u003cT\u003e accept(String userInput) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        Objects.requireNonNull(userInput);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        this.userInput.add(userInput);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "     * Builds the variable arguments by parsing user input from accept()."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "     * @return the built variable arguments values"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "     * @throws ParseException if the user input is invalid"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    public List\u003cT\u003e build() throws ParseException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        for (String input : this.userInput) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            this.values.add(this.parse(input));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        return this.values;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    abstract T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    List\u003cT\u003e getValues() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        return this.values;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeomuCat": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/arguments/VariableArgumentsBuilder.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "package seedu.address.logic.commands.arguments;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": " * Represents an object that builds variable arguments."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": " * @param \u003cT\u003e the type of variable arguments to build"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "public abstract class VariableArgumentsBuilder\u003cT\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    private VariableArguments\u003cT\u003e argument;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    VariableArgumentsBuilder(String description) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    public List\u003cT\u003e getValues() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        return this.argument.getValues();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "     * Builds the variable arguments."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "     * @return the built variable arguments"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    public VariableArguments\u003cT\u003e build() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        this.argument \u003d argumentBuild();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        return this.argument;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    abstract VariableArguments\u003cT\u003e argumentBuild();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    String getDescription() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeomuCat": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/exceptions/ArgumentException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "package seedu.address.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": " * Represents an exception thrown when creating a command argument."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "public class ArgumentException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    public ArgumentException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeomuCat": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/listeners/CommandInputListener.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "package seedu.address.logic.commands.listeners;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": " * Represents a listener that will be notified with new command input."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": " * Command input flows from user interface -\u003e business logic."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "public interface CommandInputListener {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    void onCommandInput(String input);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeomuCat": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/options/Option.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "package seedu.address.logic.commands.options;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import seedu.address.logic.commands.arguments.Argument;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import seedu.address.logic.commands.arguments.VariableArguments;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import seedu.address.logic.commands.exceptions.ArgumentException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": " * Represents an option in a Command."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": " * It can contain 0..* other arguments, and can contain 0..1 variable arguments."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "public class Option {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    // Determines whether or not this option is used in the Command."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    private boolean active;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    private int argumentIndex;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    private final List\u003cArgument\u003e arguments;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    private final VariableArguments variableArguments;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    Option(List\u003cArgument\u003e arguments, VariableArguments variableArguments) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        this.arguments \u003d arguments;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        this.variableArguments \u003d variableArguments;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    public static OptionBuilder newBuilder() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        return new OptionBuilder();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "     * Accepts user input and passes it to the next argument for parsing."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "     * @param argument the user input"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    public void acceptArgument(String argument) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        if (this.argumentIndex \u003c this.arguments.size()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            this.arguments.get(this.argumentIndex).accept(argument);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            this.argumentIndex++;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        } else if (this.variableArguments !\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            this.variableArguments.accept(argument);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "     * Builds all arguments."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "     * @throws ArgumentException if any argument is required but null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "     * @throws ParseException if any user input is invalid"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    public void build() throws ArgumentException, ParseException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        for (Argument argument : this.arguments) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            argument.build(this.active);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        if (this.variableArguments !\u003d null) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            this.variableArguments.build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    public void setActive() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        this.active \u003d true;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    public boolean isActive() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        return active;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeomuCat": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/options/OptionBuilder.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "package seedu.address.logic.commands.options;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import seedu.address.logic.commands.arguments.Argument;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import seedu.address.logic.commands.arguments.ArgumentBuilder;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import seedu.address.logic.commands.arguments.VariableArguments;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import seedu.address.logic.commands.arguments.VariableArgumentsBuilder;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": " * Represents an object that builds {@link Option}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "public class OptionBuilder {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    private final List\u003cArgument\u003e arguments;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    private VariableArguments variableArguments;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    OptionBuilder() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        this.arguments \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "     * Adds an argument to this option."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "     * @param argument the argument"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "     * @return this instance"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    public OptionBuilder addArgument(ArgumentBuilder argument) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        this.arguments.add(argument.build());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    public OptionBuilder setVariableArguments(VariableArgumentsBuilder variableArguments) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        this.variableArguments \u003d variableArguments.build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    public Option build() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        return new Option(this.arguments, this.variableArguments);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeomuCat": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CommandKeywordParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import seedu.address.logic.commands.CommandBuilder;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": " * Represents a parser that can derive command keywords, and return the appropriate {@link CommandBuilder}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "public class CommandKeywordParser implements Parser\u003cCommandBuilder\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    private final HashMap\u003cString, Supplier\u003cCommandBuilder\u003e\u003e commandKeywordMap;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    public CommandKeywordParser() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        this.commandKeywordMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    public void addCommand(String keyword, Supplier\u003cCommandBuilder\u003e command) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        this.commandKeywordMap.put(keyword, command);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    public CommandBuilder parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        if (!commandKeywordMap.containsKey(userInput)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        return commandKeywordMap.get(userInput).get();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeomuCat": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import java.util.LinkedHashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import seedu.address.logic.commands.CommandBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": " * Represents a parser that can parse user input into a command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": " * Example user input: command_keyword [argument] [arguments...] [--option] [option_argument]"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "public class CommandParser implements Parser\u003cCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    private final CommandKeywordParser keywordParser;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    private CommandBuilder commandBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    public CommandParser(CommandKeywordParser keywordParser) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        this.keywordParser \u003d keywordParser;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    public Command parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        State state1 \u003d new State();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        State state2 \u003d new State();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        State state3 \u003d new State();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        State state4 \u003d new State();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        state1.addPattern(\"\\\\s*\", matches -\u003e state2);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        state2.addPattern(\"[^\\\\s]+\", matches -\u003e {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            this.commandBuilder \u003d this.keywordParser.parse(matches.get(0));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            return state3;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        });"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        state3.addPattern(\"\\\\s+\", matches -\u003e state4);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        state4.addPattern(\"\\\"(.*?)\\\"\", matches -\u003e {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            this.commandBuilder.acceptSentence(matches.get(1));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            return state3;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        });"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        state4.addPattern(\"\u0027(.*?)\u0027\", matches -\u003e {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            this.commandBuilder.acceptSentence(matches.get(1));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            return state3;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        });"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        state4.addPattern(\"[^\\\\s]+\", matches -\u003e {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            this.commandBuilder.acceptSentence(matches.get(0));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            return state3;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        });"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        HashSet\u003cState\u003e exitStates \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        exitStates.add(state3);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        exitStates.add(state4);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        State state \u003d state1;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        while (state !\u003d null) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            // No more user input."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            if (userInput.equals(\"\")) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                // Exit if current state is an exitState."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                if (exitStates.contains(state)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                    throw new ParseException(MESSAGE_INVALID_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            StateResult result \u003d state.apply(userInput);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            assert (result !\u003d null);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            state \u003d result.next;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            userInput \u003d userInput.substring(result.matchLength);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            return this.commandBuilder.build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            throw new ParseException(e.getMessage());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "     * Represents a function that State uses."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "     * Returns the next state to transition to."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    private interface StateFunction {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        State apply(List\u003cString\u003e matches) throws ParseException;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "     * Represents one state of a finite state machine for this parser."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    private class State {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        private Map\u003cPattern, StateFunction\u003e patterns;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        private State() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            this.patterns \u003d new LinkedHashMap\u003c\u003e();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        private void addPattern(String pattern, StateFunction function) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            patterns.put(Pattern.compile(\"^(\" + pattern + \")\"), function);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "         * Gives input to this state and get the next state to transition to."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "         * @param userInput the user input"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "         * @return a StateResult"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "         * @throws ParseException if an exception is thrown in StateFunction for this pattern"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "         */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        private StateResult apply(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            for (Map.Entry\u003cPattern, StateFunction\u003e entry : this.patterns.entrySet()) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                Pattern pattern \u003d entry.getKey();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                StateFunction function \u003d entry.getValue();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                Matcher matcher \u003d pattern.matcher(userInput);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                if (matcher.find()) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                    List\u003cString\u003e matches \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                    // Add group matches"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                    for (int i \u003d 1; i \u003c\u003d matcher.groupCount(); i++) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                        matches.add(matcher.group(i));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                    State next \u003d function.apply(matches);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                    int matchLength \u003d matches.get(0).length();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                    return new StateResult(next, matchLength);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            // Should not reach this. If reached, the state machine is configured wrongly."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "     * Represents the result of State.apply()."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    private class StateResult {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        private State next;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        private int matchLength;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        private StateResult(State next, int matchLength) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            this.next \u003d next;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            this.matchLength \u003d matchLength;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeomuCat": 152
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DateTimeParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_DATE_TIME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import seedu.address.model.events.DateTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": " * Represents a {@link Parser} that can parse user input into a {@link DateTime} object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "public class DateTimeParser implements Parser\u003cDateTime\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    private static final String DATE_TIME_PATTERN \u003d \"dd/MM/yyyy HH:mm\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    private static final DateTimeFormatter DATE_TIME_PARSER \u003d DateTimeFormatter.ofPattern(DATE_TIME_PATTERN)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        .withZone(ZoneId.systemDefault());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    public DateTime parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            Instant instant \u003d Instant.from(DATE_TIME_PARSER.parse(userInput));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            return new DateTime(instant);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_DATE_TIME, DATE_TIME_PATTERN));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeomuCat": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/IndexParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": " * Represents a parser that can parse user input into an Index (Integer)."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "public class IndexParser implements Parser\u003cInteger\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    public Integer parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            return Integer.parseInt(userInput) - 1;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeomuCat": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/Parser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": " * Represents a Parser that is able to parse user input into an object of type {@code T}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "public interface Parser\u003cT\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "     * Parses {@code userInput} into an object of type {@code T} and returns it."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeomuCat": 3,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "import seedu.address.model.events.EventList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import seedu.address.model.events.EventSource;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import seedu.address.model.events.ReadOnlyEventList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "     * {@code Predicate} that always evaluate to true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBookFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "     * Returns the AddressBook"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces address book data with the data in {@code addressBook}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBook(ReadOnlyAddressBook addressBook);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasPerson(Person person);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the given person."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the address book."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    void deletePerson(Person target);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the given person."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code person} must not already exist in the address book."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    void addPerson(Person person);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    void setPerson(Person target, Person editedPerson);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "     * Returns an unmodifiable view of the filtered person list"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    ReadOnlyEventList getEventList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    void setEventList(ReadOnlyEventList eventList);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    boolean hasEvent(EventSource event);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    void deleteEvent(EventSource target);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    void addEvent(EventSource event);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    void setEvent(EventSource target, EventSource editedEvent);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Returns an unmodifiable view of the filtered Event Source List"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    ObservableList\u003cEventSource\u003e getFilteredEventList();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * Creates a deep-copy of the current event list state and saves that copy to the UndoableHistory."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    void commitToHistory(EventList eventList);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * Restores the previous event list state from UndoableHistory."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    void undoFromHistory();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * Restores the previously undone event list state from UndoableHistory."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    void redoFromHistory();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * Returns true if there are previous event list states to restore, and false otherwise."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     *"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    boolean canUndoHistory();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * Clears all future event list states in UndoableHistory beyond the current state."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    void clearFutureHistory();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kyzure": 7,
      "bruceskellator": 29,
      "WeomuCat": 30,
      "-": 78
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import seedu.address.model.events.EventList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import seedu.address.model.events.EventSource;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import seedu.address.model.events.ReadOnlyEventList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import seedu.address.model.listeners.EventListListener;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    private final UndoableHistory undoableHistory;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    private final List\u003cEventListListener\u003e eventListListeners;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyEventList readOnlyEventList,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "            ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        EventList eventList \u003d new EventList(readOnlyEventList);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d new AddressBook(addressBook);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        this.undoableHistory \u003d new UndoableHistory(eventList);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        this.eventListListeners \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        this(new AddressBook(), new EventList(), new UserPrefs());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    public void addEventListListener(EventListListener listener) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        this.eventListListeners.add(listener);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getAddressBookFilePath();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(addressBookFilePath);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    public void setAddressBook(ReadOnlyAddressBook addressBook) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        this.addressBook.resetData(addressBook);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.hasPerson(person);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.removePerson(target);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(person);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d EventsBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    public void addEvent(EventSource event) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        EventList eventList \u003d undoableHistory.getCurrentState();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        eventList.add(event);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        // Save the modified EventList state to the UndoableHistory"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        commitToHistory(eventList);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        eventListListeners.forEach(l -\u003e l.onEventListChange(eventList.getReadOnlyList()));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    public void deleteEvent(EventSource target) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        EventList eventList \u003d undoableHistory.getCurrentState();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        eventList.remove(target);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        // Save the modified EventList state to the UndoableHistory"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        commitToHistory(eventList);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        eventListListeners.forEach(l -\u003e l.onEventListChange(eventList.getReadOnlyList()));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    public ReadOnlyEventList getEventList() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        return undoableHistory.getCurrentState();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    public boolean hasEvent(EventSource event) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        return undoableHistory.getCurrentState().contains(event);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    public void setEvent(EventSource target, EventSource editedEvent) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        EventList eventList \u003d undoableHistory.getCurrentState();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        eventList.replace(target, editedEvent);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        // Save the modified EventList state to the UndoableHistory"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        commitToHistory(eventList);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        eventListListeners.forEach(l -\u003e l.onEventListChange(eventList.getReadOnlyList()));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    public void setEventList(ReadOnlyEventList readOnlyEventList) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        EventList eventList \u003d undoableHistory.getCurrentState();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        eventList.resetData(readOnlyEventList);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        // Save the modified EventList state to the UndoableHistory"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        commitToHistory(eventList);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        eventListListeners.forEach(l -\u003e l.onEventListChange(eventList.getReadOnlyList()));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        return filteredPersons;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    public ObservableList\u003cEventSource\u003e getFilteredEventList() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        return undoableHistory.getCurrentState().getReadOnlyList();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.equals(other.addressBook)"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 filteredPersons.equals(other.filteredPersons);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UndoableHistory \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * Creates a deep-copy of the current event list state and saves that copy to the UndoableHistory."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     */"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    public void commitToHistory(EventList eventList) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        undoableHistory.commit(eventList);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * Restores the previous event list state from UndoableHistory."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     */"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    public void undoFromHistory() {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        undoableHistory.undo();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * Restores the previously undone event list state from UndoableHistory."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     */"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    public void redoFromHistory() {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        undoableHistory.redo();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * Returns true if there are previous event list states to restore, and false otherwise."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     *"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     */"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    public boolean canUndoHistory() {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        return undoableHistory.canUndo();"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * Clears all future event list states in UndoableHistory beyond the current state."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     */"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    public void clearFutureHistory() {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        undoableHistory.clearFutureHistory();"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kyzure": 4,
      "bruceskellator": 76,
      "WeomuCat": 57,
      "-": 143
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UndoableHistory.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "import seedu.address.model.events.EventList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": " * UndoableHistory contains all EventList states"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": " * at different points of time in its eventListStateList"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": " * as well as a currentStateIndex that stores the index of the"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": " * current EventList state in the list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": " * It also contains a mainEventList that represents the current EventList"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": " * state. Duplicates of this mainEventList are stored in the eventListStateList."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": " * Whenever an undo or redo command is executed, mainEventList restores itself to a"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": " * past/future state by copying the data in its duplicate over to itself."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "public class UndoableHistory {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    /** The eventList that the GUI is in sync with."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * This mainEventList is updated every time an"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * undo or redo occurs. It is important that ModelManager"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * works only with the mainEventList object and not"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * duplicates due to its synchronisation with the GUI."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    private EventList mainEventList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * Deep-copies of mainEventList are stored to this list"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * every time a state-changing command is executed."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * This allows mainEventList to retrieve its data"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * from any of these past or future states when an"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * undo or redo command is called."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    private ArrayList\u003cEventList\u003e eventListStateList;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    private int currentStateIndex;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    UndoableHistory(EventList eventList) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        mainEventList \u003d eventList;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        eventListStateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        // Store a deep-copy of the mainEventList to the list"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        eventListStateList.add(new EventList(mainEventList));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        currentStateIndex \u003d 0;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * Returns the current state of the EventList."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * @return EventList mainEventList."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    EventList getCurrentState() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        return mainEventList;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * Creates a deep-copy of the current event list state and saves that copy to the UndoableHistory."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    void commit(EventList eventList) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        // Store a deep-copy of the mainEventList to the list"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        EventList deepCopy \u003d new EventList(eventList);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        assert currentStateIndex \u003e\u003d eventListStateList.size() - 1"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "                : \"Pointer always points to end of list during commit; All future states must have been discarded.\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        eventListStateList.add(deepCopy);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        currentStateIndex++;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * Restores the previous event list state from UndoableHistory."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    void undo() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        currentStateIndex--;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        // Retrieve data from duplicate of its past state"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        mainEventList.resetData(eventListStateList.get(currentStateIndex));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * Restores the previously undone event list state from UndoableHistory."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    void redo() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        currentStateIndex++;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * Returns true if there are previous event list states to restore, and false otherwise."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    boolean canUndo() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        return currentStateIndex \u003e 0;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * Clears all future event list states in eventListStateList beyond the index given by currentStateIndex"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    void clearFutureHistory() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        eventListStateList \u003d"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "                new ArrayList\u003c\u003e(eventListStateList.subList(0, currentStateIndex + 1));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        return eventListStateList.size() + \" states in history\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        if (other \u003d\u003d this) { // short circuit if same object"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "            if (!(other instanceof UndoableHistory)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "            UndoableHistory otherHistory \u003d ((UndoableHistory) other);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "            if (currentStateIndex !\u003d otherHistory.currentStateIndex"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "                    || eventListStateList.size() !\u003d otherHistory.eventListStateList.size()) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "            for (int i \u003d 0; i \u003c eventListStateList.size(); i++) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "                if (!eventListStateList.get(i).equals(otherHistory.eventListStateList.get(i))) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "                }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "            }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bruceskellator": 126
    }
  },
  {
    "path": "src/main/java/seedu/address/model/events/DateTime.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "package seedu.address.model.events;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": " * Represents a date and time."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": " * Internally stored as seconds from epoch, without any timezone information."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "public class DateTime {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    private final Instant dateTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    public DateTime(Instant dateTime) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public Instant getDateTime() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        return this.dateTime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        return dateTime.toString();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "     * Creates a new instance of DateTime according to the clock."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "     * @return A new instance of DateTime according to the clock."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "    public static DateTime now() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "        return new DateTime(Instant.now());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "     * Computes the number of milliseconds between the calling instance of DateTime"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "     *     and the argument instance of Time. If the argument instance of DateTime"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "     *     occurs before the calling instance, the result returned will be negative."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "     * @param futureTime A DateTime that does not have (but is expected) to be in the future."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "     * @return The number of milliseconds between the calling instance of DateTime"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "     *     and the argument instance of DateTime."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "    public long msecsTimeUntil(DateTime futureTime) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "        return futureTime.dateTime.toEpochMilli() - this.dateTime.toEpochMilli();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengGeng97": 24,
      "Kyzure": 4,
      "WeomuCat": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/model/events/EventList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "package seedu.address.model.events;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import seedu.address.model.events.exceptions.EventNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": " * Represents a list of Events."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": " * Does not allow any null values to be in the list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "public class EventList implements ReadOnlyEventList {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    private final ObservableList\u003cEventSource\u003e list;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    public EventList() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        this.list \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    public EventList(ReadOnlyEventList eventList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        this.resetData(eventList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * Returns a deep-copy of an EventList."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * @param oldEventList the EventList to deep-copy."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    public EventList(EventList oldEventList) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        for (EventSource eventSource : oldEventList.list) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "            // Deep-copy an EventSource by calling its copy constructor"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "            this.list.add(new EventSource(eventSource));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "     * Adds an event to this event list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "     * @param event the event to add"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    public void add(EventSource event) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        requireNonNull(event);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        this.list.add(event);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "     * Check if an event is contained in this event list."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "     * @param event the event to check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "     * @return whether or not the event is contained in this event list"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    public boolean contains(EventSource event) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        requireNonNull(event);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        return list.contains(event);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "     * Replace an event in this event list with another event."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "     * @param event the event to replace"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "     * @param replacement the replacement event"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    public void replace(EventSource event, EventSource replacement) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        requireAllNonNull(event, replacement);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        int index \u003d list.indexOf(event);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            throw new EventNotFoundException();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        list.set(index, replacement);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "     * Clears this event list and re-adds events from a given {@link ReadOnlyEventList}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "     * @param eventList the list of events to re-add"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    public void resetData(ReadOnlyEventList eventList) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        requireNonNull(eventList);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        this.list.clear();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        this.list.addAll(eventList.getReadOnlyList());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "     * Removes an event from this event list."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "     * @param event the event to remove"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    public void remove(EventSource event) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        requireNonNull(event);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        if (!list.remove(event)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            throw new EventNotFoundException();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    public ObservableList\u003cEventSource\u003e getReadOnlyList() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        return this.list;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "                || (other instanceof EventList // instanceof handles nulls"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "                \u0026\u0026 list.equals(((EventList) other).list));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kyzure": 1,
      "bruceskellator": 23,
      "WeomuCat": 84
    }
  },
  {
    "path": "src/main/java/seedu/address/model/events/EventSource.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "package seedu.address.model.events;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": " * Represents an EventSource in Horo."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": " * It is immutable."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "public class EventSource {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    // Required"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    private final DateTime start;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    // Optional"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    private DateTime end;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    private Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "     * Creates an EventSource."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "     * All fields must be non null."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    public EventSource(String description, DateTime start) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        requireAllNonNull(description, start);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        this.start \u003d start;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * Returns a deep-copy of an EventSource."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * @param oldEventSource the eventSource to deep-copy."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    public EventSource(EventSource oldEventSource) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        this.description \u003d oldEventSource.description;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        this.start \u003d oldEventSource.start;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        this.end \u003d oldEventSource.end;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    public DateTime getStartDateTime() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        return start;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bruceskellator": 11,
      "WeomuCat": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/model/events/ReadOnlyEventList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "package seedu.address.model.events;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": " * Represents an unmodifiable EventList."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "public interface ReadOnlyEventList {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    ObservableList\u003cEventSource\u003e getReadOnlyList();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeomuCat": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/events/exceptions/EventNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "package seedu.address.model.events.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": " * Signals that the operation is unable to find the specified event."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "public class EventNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeomuCat": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/listeners/EventListListener.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "package seedu.address.model.listeners;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import seedu.address.model.events.EventSource;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": " * Represents a listener that will be notified whenever the EventList in ModelManager changes."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "public interface EventListListener {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    void onEventListChange(List\u003cEventSource\u003e events);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeomuCat": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/notification/EventNotificationThread.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "package seedu.address.notification;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "import java.util.ArrayDeque;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "import java.util.Queue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import seedu.address.logic.NotificationManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "import seedu.address.model.events.DateTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "import seedu.address.model.events.EventSource;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "import seedu.address.model.events.ReadOnlyEventList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": " * A Thread running parallel to the main program that posts notifications to the user\u0027s System Tray."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "public class EventNotificationThread extends Thread {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(NotificationManager.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "    private SystemTrayCommunicator systemTrayCommunicator;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "    private Queue\u003cPopupNotification\u003e notificationQueue \u003d new ArrayDeque\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "     * Creates a new EventNotificationThread. This requires a SystemTrayCommunicator through which notifications"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "     *     can be posted, as well as a ReadOnlyEventList from which notifications can be generated."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "     * @param systemTrayCommunicator The SystemTrayCommunicator through which each notification will be posted."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "     * @param readOnlyEventList A read-only copy of the EventList from which notifications will be generated."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "    public EventNotificationThread(SystemTrayCommunicator systemTrayCommunicator,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "                                   ReadOnlyEventList readOnlyEventList) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "        requireAllNonNull(systemTrayCommunicator, readOnlyEventList);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "        this.systemTrayCommunicator \u003d systemTrayCommunicator;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "        for (EventSource eventSource : readOnlyEventList.getReadOnlyList()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "            String name \u003d eventSource.getDescription();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "            DateTime eventDateTime \u003d eventSource.getStartDateTime();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "            PopupNotification popupNotif \u003d new PopupNotification(name, eventDateTime.toString(), eventDateTime);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "            notificationQueue.offer(popupNotif);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "     * Causes this thread to start running. It will do so until no notifications are left to be posted,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "     *     or if it is otherwise interrupted."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "            while (!notificationQueue.isEmpty()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "                PopupNotification popupNotification \u003d notificationQueue.poll();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "                sleepUntilNotification(popupNotification);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "                systemTrayCommunicator.postNewNotification(popupNotification.name, popupNotification.description);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "        } catch (InterruptedException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "            logger.info(\"EventNotificationThread successfully interrupted.\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "     * Sleeps this thread until the time for the notification to be posted."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "     * @param popupNotification The PopupNotification to be posted to be posted next."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "     * @exception InterruptedException If the thread is interrupted."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "    private void sleepUntilNotification(PopupNotification popupNotification) throws InterruptedException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "        long msecsNowToPopupNotification \u003d DateTime.now().msecsTimeUntil(popupNotification.timeToNotify);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "        if (msecsNowToPopupNotification \u003e 0) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "            Thread.sleep(msecsNowToPopupNotification);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengGeng97": 76,
      "WeomuCat": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/notification/Notification.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "package seedu.address.notification;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "import seedu.address.model.events.ReadOnlyEventList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": " * The interface for the Notification component of the app."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "public interface Notification {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "     * Updates the queue of notifications to be posted."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "     * @param readOnlyEventList The list of events for which notifications should be posted"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "    void updateNotificationQueue(ReadOnlyEventList readOnlyEventList);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "     * Interrupts any ongoing threads so that the program may shutdown gracefully."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "    void shutDown();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengGeng97": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/notification/NotificationClickActionListener.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "package seedu.address.notification;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "import java.awt.event.ActionEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "import java.awt.event.ActionListener;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import seedu.address.logic.NotificationManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": " * The Listener responding to a Notification being clicked."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "public class NotificationClickActionListener implements ActionListener {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(NotificationManager.class);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "     * This Listener\u0027s reaction to an ActionEvent it is listening to being called."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "     *     Specifically for this class, this is called whenever a notification is clicked on."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "     * @param e The ActionEvent that this Listener is listening to."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "    public void actionPerformed(ActionEvent e) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "         This is currently undefined behaviour for the first milestone."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "         In the future, as things get more developed, this should be replaced with opening up the app."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "         */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "        logger.info(\"Notification Clicked\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengGeng97": 29,
      "WeomuCat": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/notification/PopupNotification.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "package seedu.address.notification;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "import seedu.address.model.events.DateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": " * Represents a notification to be posted to the system tray."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "public class PopupNotification {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "    public final String name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "    public final String description;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "    public final DateTime timeToNotify;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "     * Creates a new PopupNotification with the appropriate name, description and time to be posted."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "     * @param name The name to show up when the notification is posted"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "     * @param description The description to accompany the name when the notification is posted"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "     * @param timeToNotify The time at which the notification should be posted"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "    public PopupNotification (String name, String description, DateTime timeToNotify) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "        requireAllNonNull(name, description, timeToNotify);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "        this.timeToNotify \u003d timeToNotify;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengGeng97": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/notification/SystemTrayCommunicator.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "package seedu.address.notification;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "import java.awt.AWTException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "import java.awt.Image;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "import java.awt.MenuItem;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "import java.awt.PopupMenu;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "import java.awt.SystemTray;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "import java.awt.Toolkit;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "import java.awt.TrayIcon;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "import java.awt.TrayIcon.MessageType;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import seedu.address.logic.NotificationManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": " * Controls interactions between the main program and the System Tray."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "public class SystemTrayCommunicator {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(NotificationManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "    private static final String TRAY_ICON_NAME \u003d \"Horo\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "    private static final String TRAY_ICON_IMAGE_PATH \u003d \"/images/system_tray_icon.png\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "    private static TrayIcon trayIcon;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "    private static boolean systemTrayIsSupported;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "     * Sets up the System Tray app, if applicable."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "    public void initialise() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "        systemTrayIsSupported \u003d SystemTray.isSupported();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "        if (systemTrayIsSupported) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "            logger.info(\"System tray is supported.\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "            SystemTray tray \u003d SystemTray.getSystemTray();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "            trayIcon \u003d getTrayIcon();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "                tray.add(trayIcon);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "            } catch (AWTException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "                logger.warning(e.toString());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "            logger.info(\"System tray is not supported.\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "     * Posts a new notification to the System Tray."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "     * @param name The name of the notification."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "     * @param description The description of the notification."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "    public void postNewNotification(String name, String description) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "        if (systemTrayIsSupported) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "            trayIcon.displayMessage(name, description, MessageType.INFO);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "     * Creates a new icon on the System Tray, and returns its reference."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "     * @return The reference to a new System Tray icon."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "    private static TrayIcon getTrayIcon() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "        TrayIcon trayIcon \u003d new TrayIcon(getImage(), TRAY_ICON_NAME, getPopupMenu());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "        trayIcon.addActionListener(getNotificationClickActionListener());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "        return trayIcon;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "     * Locates and returns the image to be used as the Tray Icon."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "     * @return the image to be used as the Tray Icon."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "    private static Image getImage() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "        return Toolkit.getDefaultToolkit().getImage(MainApp.class.getResource(TRAY_ICON_IMAGE_PATH));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "     * Creates and returns the PopupMenu designed for this app."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "     * @return The PopupMenu designed for the System Tray app."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "    private static PopupMenu getPopupMenu() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "        PopupMenu popup \u003d new PopupMenu();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "        // Create pop-up menu items"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "        MenuItem aboutItem \u003d new MenuItem(\"Hi this is Horo.\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "        // Add created items to the pop-up menu"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "        popup.add(aboutItem);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "        return popup;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "     * Creates and returns an instance of the ClickActionListener used for this app."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "     *     The listener will be called whenever the user clicks on a notification."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "     * @return An instance of the ClickActionListener used for this app."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "    private static NotificationClickActionListener getNotificationClickActionListener() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "        return new NotificationClickActionListener();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ChengGeng97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengGeng97": 109,
      "WeomuCat": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CalendarPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import java.time.YearMonth;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import javafx.scene.layout.GridPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import seedu.address.model.events.EventSource;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import seedu.address.model.listeners.EventListListener;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kyzure"
        },
        "content": " * An Ui that stores the logged feedback from the program to the user."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kyzure"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "public class CalendarPanel extends UiPart\u003cRegion\u003e implements EventListListener {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private static final String FXML \u003d \"CalendarPanel.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private UiParser uiParser;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private YearMonth yearMonth;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private LocalDate calendarDate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private ArrayList\u003cDayCard\u003e currentMonthDayCards;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private GridPane calendar;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private Label month;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Constructor for ListPanel. Stores the event list, and task list[in v2.0]."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    public CalendarPanel(UiParser uiParser) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        this.yearMonth \u003d YearMonth.now();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        this.calendarDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        this.currentMonthDayCards \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        this.uiParser \u003d uiParser;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        setCurrentMonth();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        resetCalendar();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Sets the label to be the current Month."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private void setCurrentMonth() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        String currentMonth \u003d yearMonth.getMonth().toString().toLowerCase();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        currentMonth \u003d currentMonth.substring(0, 1).toUpperCase() + currentMonth.substring(1);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        month.setText(currentMonth);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Fills the index of the calendar."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    private void resetCalendar() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        this.currentMonthDayCards.clear();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        int index \u003d 1;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        int startingDay \u003d calendarDate.getDayOfWeek().getValue();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        int totalDays \u003d yearMonth.lengthOfMonth();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        for (int weeks \u003d 0; weeks \u003c 6; weeks++) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            for (int days \u003d 0; days \u003c 7; days++) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                if (weeks \u003d\u003d 0 \u0026\u0026 days \u003d\u003d 0) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                    days \u003d startingDay - 3;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                if (index \u003e totalDays) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                DayCard todayCard \u003d new DayCard(index, yearMonth.getMonthValue(), yearMonth.getYear());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                calendar.add(todayCard.getRoot(), days, weeks);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                currentMonthDayCards.add(todayCard);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                index++;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    public void onEventListChange(List\u003cEventSource\u003e events) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        resetCalendar();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        for (EventSource event : events) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            DayCard dayCard \u003d currentMonthDayCards.get("
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                uiParser.getDay(event.getStartDateTime().getDateTime()) - 1);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            if (dayCard.sameDateAsEvent(event, uiParser)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                dayCard.addDayCardEvent(event);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kyzure": 75,
      "WeomuCat": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CommandBox.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    private final Consumer\u003cString\u003e onCommandInput;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    public CommandBox(Consumer\u003cString\u003e onCommandInput) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        this.onCommandInput \u003d onCommandInput;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        onCommandInput.accept(commandTextField.getText());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeomuCat": 6,
      "-": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/DayCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import seedu.address.model.events.EventSource;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kyzure"
        },
        "content": " * An Ui that represents a box in the calendar itself, containing up to 5 events and the date."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kyzure"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "public class DayCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private static final String FXML \u003d \"DayCard.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private int day;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private int month;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private int year;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private int numDayCardEvent;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private ArrayList\u003cEventSource\u003e eventList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private UiParser uiParser;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private VBox todayEvents;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private Label index;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Constructor for ListPanel. Stores the event list, and task list[in v2.0]."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    public DayCard(int day, int month, int year) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        this.day \u003d day;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        this.month \u003d month;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        this.year \u003d year;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        this.numDayCardEvent \u003d 0;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        String currentIndex \u003d day + \". \";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        this.index.setText(currentIndex);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Returns a boolean which checks if the given event is the same date as the current iteration of DayCard."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param eventSource The given event to check against."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param uiParser Parses the Instant date into readable langauge."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @return a boolean comparing the dates."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public boolean sameDateAsEvent(EventSource eventSource, UiParser uiParser) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            Instant date \u003d eventSource.getStartDateTime().getDateTime();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            Integer[] dayMonthYear \u003d uiParser.parseDateToNumbers(date);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            boolean sameDay \u003d dayMonthYear[0].equals(this.day);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            boolean sameMonth \u003d dayMonthYear[1].equals(this.month);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            boolean sameYear \u003d dayMonthYear[2].equals(this.year);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            return sameDay \u0026\u0026 sameMonth \u0026\u0026 sameYear;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Adds a DayCardEvent to the DayCard."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param event The given event required for the description."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public void addDayCardEvent(EventSource event) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        // We still want to take note of the number of events on that particular day."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        this.numDayCardEvent++;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        if (this.numDayCardEvent \u003c\u003d 5) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            DayCardEvent addedEventLabel \u003d new DayCardEvent(event.getDescription());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            todayEvents.getChildren().add(addedEventLabel.getRoot());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        if (!(other instanceof DayCard)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        DayCard card \u003d (DayCard) other;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        return eventList.equals(card.eventList);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kyzure": 97,
      "WeomuCat": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/DayCardEvent.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kyzure"
        },
        "content": " * An UI component that displays information of a {@code Event}."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kyzure"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "public class DayCardEvent extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private static final String FXML \u003d \"DayCardEvent.fxml\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private Label eventDescription;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public DayCardEvent(String description) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        this.eventDescription.setText(description);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        eventDescription.setPadding(new Insets(0, 0, 0, 5));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        if (!(other instanceof EventCard)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        DayCardEvent card \u003d (DayCardEvent) other;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        return eventDescription.equals(card.eventDescription);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kyzure": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/EventCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import seedu.address.model.events.EventSource;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kyzure"
        },
        "content": " * An UI component that displays information of a {@code Event}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "public class EventCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private static final String FXML \u003d \"EventListCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public final EventSource eventSource;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private Label dateTime;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Constructor for EventCard. Creates an event card that will be placed in EventListPanel."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param eventSource The instance of the event itself."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param displayedIndex The number representing the event."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public EventCard(EventSource eventSource, int displayedIndex, UiParser uiParser) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        this.eventSource \u003d eventSource;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        name.setText(displayedIndex + \". \" + eventSource.getDescription().toString());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        dateTime.setText(uiParser.parseDateToString(eventSource.getStartDateTime().getDateTime()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        if (!(other instanceof EventCard)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        EventCard card \u003d (EventCard) other;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        return eventSource.equals(card.eventSource);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kyzure": 19,
      "-": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/EventListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import seedu.address.model.events.EventSource;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import seedu.address.model.listeners.EventListListener;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kyzure"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kyzure"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "public class EventListPanel extends UiPart\u003cRegion\u003e implements EventListListener {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private static final String FXML \u003d \"EventListPanel.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(EventListPanel.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private UiParser uiParser;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private ListView\u003cEventSource\u003e eventListView;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Constructor for EventListPanel. Creates an instance of a panel to store the Event Cards."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    public EventListPanel(UiParser uiParser) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        this.uiParser \u003d uiParser;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        eventListView.setCellFactory(listView -\u003e new EventListViewCell());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    public void onEventListChange(List\u003cEventSource\u003e events) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        this.eventListView.setItems(FXCollections.observableList(events));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Event} using a {@code EventCard}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    class EventListViewCell extends ListCell\u003cEventSource\u003e {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        protected void updateItem(EventSource eventSource, boolean empty) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            super.updateItem(eventSource, empty);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            if (empty || eventSource \u003d\u003d null) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                setGraphic(new EventCard(eventSource, getIndex() + 1, uiParser).getRoot());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kyzure": 47,
      "WeomuCat": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import seedu.address.model.events.EventSource;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kyzure"
        },
        "content": " * An Ui that stores the logged feedback from the program to the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kyzure"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "public class ListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private static final String FXML \u003d \"ListPanel.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private VBox list;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Constructor for ListPanel. Stores the event list, and task list[in v2.0]."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public ListPanel(ObservableList\u003cEventSource\u003e eventList, UiParser uiParser) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        EventListPanel eventListPanel \u003d new EventListPanel(uiParser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        list.getChildren().add(eventListPanel.getRoot());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kyzure": 26,
      "WeomuCat": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/LogBox.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": " * An UI component that displays the feedback to the user."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "public class LogBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    private static final String FXML \u003d \"LogBox.fxml\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    private Label box;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "     * Constructor for LogBox. It is a dialog box that contains the feedback from the program to the user."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "     * @param feedbackToUser The feedback from the program to the user."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    public LogBox(String feedbackToUser) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        box.setText(feedbackToUser);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeomuCat": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/LogPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import javafx.geometry.Rectangle2D;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import javafx.stage.Screen;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kyzure"
        },
        "content": " * An Ui that stores the logged feedback from the program to the user."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kyzure"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "public class LogPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private static final String FXML \u003d \"LogPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private VBox boxLog;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private ScrollPane scrollLog;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Constructor for the LogPanel. Sets the size of the LogPanel to the user\u0027s screen size."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public LogPanel() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        Rectangle2D primaryScreenBounds \u003d Screen.getPrimary().getVisualBounds();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        double screenHeight \u003d primaryScreenBounds.getHeight();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        double screenWidth \u003d primaryScreenBounds.getWidth();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        boxLog.setPrefHeight(screenHeight - screenHeight / 5);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        boxLog.setPrefWidth(screenWidth / 2);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Creates an instance of LogBox."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param feedbackToUser To provide the Log Box the feedback to the user."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public void createLogBox(String feedbackToUser) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        LogBox logBox \u003d new LogBox(feedbackToUser);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        boxLog.getChildren().add(logBox.getRoot());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kyzure": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import javafx.geometry.Rectangle2D;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import javafx.scene.layout.GridPane;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import javafx.stage.Screen;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import seedu.address.model.events.EventSource;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import seedu.address.model.listeners.EventListListener;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import seedu.address.ui.listeners.UserOutputListener;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e implements UserOutputListener, EventListListener {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public static final int WIDTH_PADDING \u003d 20;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    private Consumer\u003cString\u003e onCommandInput;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private UiParser uiParser;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    private EventListPanel eventListPanel;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private CalendarPanel calendarPanel;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private LogPanel logPanel;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private boolean calendarMode;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private StackPane viewPanelPlaceholder;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private StackPane logPanelPlaceholder;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private GridPane gridManager;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private VBox vBoxPane;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private Label chatLog;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private Label list;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    public MainWindow(Stage primaryStage, Consumer\u003cString\u003e onCommandInput) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        this.onCommandInput \u003d onCommandInput;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        this.uiParser \u003d new UiParser();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        this.calendarMode \u003d false;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        setWindowDefaultSize(new GuiSettings());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    public void fillInnerParts() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        calendarPanel \u003d new CalendarPanel(uiParser);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        eventListPanel \u003d new EventListPanel(uiParser);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        viewPanelPlaceholder.getChildren().add(calendarPanel.getRoot());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        viewPanelPlaceholder.getChildren().add(eventListPanel.getRoot());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        calendarPanel.getRoot().setVisible(false);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        logPanel \u003d new LogPanel();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        logPanelPlaceholder.getChildren().add(logPanel.getRoot());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        // StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        // statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this.onCommandInput);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        editInnerParts();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Edits the size of the nodes based on the user\u0027s screen size."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private void editInnerParts() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        Rectangle2D primaryScreenBounds \u003d Screen.getPrimary().getVisualBounds();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        double screenHeight \u003d primaryScreenBounds.getHeight();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        double screenWidth \u003d primaryScreenBounds.getWidth();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        logPanelPlaceholder.setPrefWidth(screenWidth);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        viewPanelPlaceholder.setPrefWidth(screenWidth);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        // Set the stage width and height"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        primaryStage.setMaxWidth(screenWidth);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        primaryStage.setMaxHeight(screenHeight);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        // logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "     * Temporary method to toggle the view panel on the right."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    public void toggleView() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        if (calendarMode) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            calendarMode \u003d false;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            calendarPanel.getRoot().setVisible(false);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            eventListPanel.getRoot().setVisible(true);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            calendarMode \u003d true;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            eventListPanel.getRoot().setVisible(false);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            calendarPanel.getRoot().setVisible(true);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    public void onEventListChange(List\u003cEventSource\u003e events) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        this.eventListPanel.onEventListChange(events);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        this.calendarPanel.onEventListChange(events);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    public void onUserOutput(UserOutput output) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        this.logPanel.createLogBox(output.toString());"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kyzure": 57,
      "WeomuCat": 31,
      "-": 145
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kyzure"
        },
        "content": " * A component to convert/parse the terms in post logic into readable, UI format for the users."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kyzure"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "public class UiParser {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Returns an array of Integer, size 3, containing {day, month, year} of the event."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param date The time of a given event source"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @return an array of Integer, size 3, containing {day, month, year} of the event"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public Integer[] parseDateToNumbers(Instant date) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        DateTimeFormatter dateFormat \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                .withZone(ZoneId.systemDefault());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        String eventDate \u003d dateFormat.format(date);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        String[] dayMonthYear \u003d eventDate.split(\"/\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        Integer[] parsedDate \u003d {Integer.valueOf(dayMonthYear[0]),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                Integer.valueOf(dayMonthYear[1]),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                Integer.valueOf(dayMonthYear[2])};"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        return parsedDate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Returns an array of String indicating the date and time for the users to read."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param date The given date of the event."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @return an array of String indicating the date and time for the users to read."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public String parseDateToString(Instant date) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        DateTimeFormatter dateFormat \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                .withZone(ZoneId.systemDefault());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        return dateFormat.format(date);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public Integer getDay(Instant date) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        DateTimeFormatter dateFormat \u003d DateTimeFormatter.ofPattern(\"dd\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                .withZone(ZoneId.systemDefault());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        String eventDate \u003d dateFormat.format(date);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        return Integer.valueOf(eventDate);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kyzure": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UserOutput.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": " * Represents the output from business logic, to be displayed to the user."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "public class UserOutput {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    private final String output;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    public UserOutput(String output) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        this.output \u003d requireNonNull(output);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        return this.output;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeomuCat": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/listeners/UserOutputListener.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "package seedu.address.ui.listeners;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import seedu.address.ui.UserOutput;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": " * Represents a listener that will be notified with new user output."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": " * User output flows from business logic -\u003e user interface."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "public interface UserOutputListener {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    void onUserOutput(UserOutput output);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeomuCat": 12
    }
  },
  {
    "path": "src/main/resources/view/CalendarPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "\u003cVBox fx:id\u003d\"calendarPanel\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "      \u003cStackPane style\u003d\"-fx-background-color: #262626;\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            \u003cLabel fx:id\u003d\"month\" text\u003d\"\\$month\" textFill\u003d\"WHITE\" underline\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "               \u003cfont\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                  \u003cFont size\u003d\"22.0\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "               \u003c/font\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "      \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "      \u003cGridPane gridLinesVisible\u003d\"true\" style\u003d\"-fx-background-color: #262626;\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            \u003cColumnConstraints halignment\u003d\"CENTER\" hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            \u003cColumnConstraints halignment\u003d\"CENTER\" hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            \u003cColumnConstraints halignment\u003d\"CENTER\" hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            \u003cColumnConstraints halignment\u003d\"CENTER\" hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            \u003cColumnConstraints halignment\u003d\"CENTER\" hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "          \u003cColumnConstraints halignment\u003d\"CENTER\" hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "          \u003cColumnConstraints halignment\u003d\"CENTER\" hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "          \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            \u003cLabel contentDisplay\u003d\"CENTER\" text\u003d\"Monday\" textAlignment\u003d\"CENTER\" textFill\u003d\"WHITE\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            \u003cLabel contentDisplay\u003d\"CENTER\" text\u003d\"Tuesday\" textAlignment\u003d\"CENTER\" textFill\u003d\"WHITE\" GridPane.columnIndex\u003d\"1\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            \u003cLabel contentDisplay\u003d\"CENTER\" text\u003d\"Wednesday\" textAlignment\u003d\"CENTER\" textFill\u003d\"WHITE\" GridPane.columnIndex\u003d\"2\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            \u003cLabel contentDisplay\u003d\"CENTER\" text\u003d\"Thursday\" textAlignment\u003d\"CENTER\" textFill\u003d\"WHITE\" GridPane.columnIndex\u003d\"3\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            \u003cLabel contentDisplay\u003d\"CENTER\" text\u003d\"Friday\" textAlignment\u003d\"CENTER\" textFill\u003d\"WHITE\" GridPane.columnIndex\u003d\"4\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            \u003cLabel contentDisplay\u003d\"CENTER\" text\u003d\"Saturday\" textAlignment\u003d\"CENTER\" textFill\u003d\"WHITE\" GridPane.columnIndex\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            \u003cLabel contentDisplay\u003d\"CENTER\" text\u003d\"Sunday\" textAlignment\u003d\"CENTER\" textFill\u003d\"WHITE\" GridPane.columnIndex\u003d\"6\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "      \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "      \u003cGridPane fx:id\u003d\"calendar\" gridLinesVisible\u003d\"true\" style\u003d\"-fx-background-color: #262626;\"\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "          \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "          \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "          \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"100.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "          \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"100.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "          \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"100.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"100.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"100.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"100.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "      \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Kyzure": 66
    }
  },
  {
    "path": "src/main/resources/view/CommandBox.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "\u003cStackPane maxHeight\u003d\"50.0\" minHeight\u003d\"50.0\" prefHeight\u003d\"50.0\" style\u003d\"-fx-background-color: #262626; -fx-background-radius: 12;\" styleClass\u003d\"stack-pane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "  \u003cTextField fx:id\u003d\"commandTextField\" maxHeight\u003d\"50.0\" minHeight\u003d\"50.0\" onAction\u003d\"#handleCommandEntered\" prefHeight\u003d\"50.0\" promptText\u003d\"Enter command here...\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "WeomuCat": 2,
      "-": 6
    }
  },
  {
    "path": "src/main/resources/view/DayCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "\u003cVBox fx:id\u003d\"todayEvents\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"80.0\" minWidth\u003d\"100.0\" prefHeight\u003d\"80.0\" prefWidth\u003d\"100.0\" style\u003d\"-fx-background-color: #262626;\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "      \u003cLabel fx:id\u003d\"index\" text\u003d\"\\$index\" textFill\u003d\"WHITE\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "         \u003c/padding\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Kyzure": 15
    }
  },
  {
    "path": "src/main/resources/view/DayCardEvent.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "\u003cLabel fx:id\u003d\"eventDescription\" style\u003d\"-fx-background-color: #202020; -fx-background-radius: 8;\" text\u003d\"Label\" textFill\u003d\"WHITE\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "   \u003cfont\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "      \u003cFont size\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "   \u003c/font\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "\u003c/Label\u003e"
      }
    ],
    "authorContributionMap": {
      "Kyzure": 11
    }
  },
  {
    "path": "src/main/resources/view/EventListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            \u003cLabel fx:id\u003d\"dateTime\" styleClass\u003d\"cell_small_label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Kyzure": 31
    }
  },
  {
    "path": "src/main/resources/view/EventListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "\u003cVBox prefHeight\u003d\"900.0\" style\u003d\"-fx-background-color: transparent;\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "   \u003cLabel alignment\u003d\"TOP_LEFT\" style\u003d\"-fx-background-color: transparent;\" text\u003d\"Events\" underline\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "      \u003cfont\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "         \u003cFont size\u003d\"22.0\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "      \u003c/font\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "      \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "         \u003cInsets left\u003d\"2.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "      \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "         \u003cInsets bottom\u003d\"10.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "   \u003c/Label\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    \u003cListView fx:id\u003d\"eventListView\" style\u003d\"-fx-background-color: transparent;\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Kyzure": 16,
      "-": 6
    }
  },
  {
    "path": "src/main/resources/view/ListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "\u003cVBox fx:id\u003d\"list\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" /\u003e"
      }
    ],
    "authorContributionMap": {
      "Kyzure": 6
    }
  },
  {
    "path": "src/main/resources/view/LogBox.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "\u003cjavafx.scene.layout.HBox maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" style\u003d\"-fx-background-color: transparent;\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "      \u003cLabel fx:id\u003d\"box\" alignment\u003d\"TOP_LEFT\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" style\u003d\"-fx-background-color: #151515; -fx-background-radius: 12; -fx-background-insets: 0 -10;\" text\u003d\"Label\" textFill\u003d\"WHITE\" wrapText\u003d\"true\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "         \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            \u003cInsets left\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "         \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "         \u003c/padding\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "   \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "      \u003cInsets bottom\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "   \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "\u003c/javafx.scene.layout.HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "WeomuCat": 20
    }
  },
  {
    "path": "src/main/resources/view/LogPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "\u003cVBox style\u003d\"-fx-background-color: #2E2E2E;\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "      \u003cScrollPane fx:id\u003d\"scrollLog\" style\u003d\"-fx-background-color: #2E2E2E;\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "         \u003ccontent\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            \u003cVBox fx:id\u003d\"boxLog\" style\u003d\"-fx-background-color: #2E2E2E;\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "         \u003c/content\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "      \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "WeomuCat": 15
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "\u003cfx:root minHeight\u003d\"200.0\" minWidth\u003d\"200.0\" onCloseRequest\u003d\"#handleExit\" title\u003d\"Address App\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            \u003cVBox fx:id\u003d\"vBoxPane\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                \u003cGridPane fx:id\u003d\"gridManager\" style\u003d\"-fx-background-color: #2E2E2E;\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                    \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                        \u003cRowConstraints vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                        \u003cRowConstraints vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                        \u003cRowConstraints vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                        \u003cRowConstraints vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                        \u003cRowConstraints vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                    \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                        \u003cMenuBar fx:id\u003d\"menuBar\" style\u003d\"-fx-background-color: #202020;\" GridPane.columnSpan\u003d\"2\" GridPane.halignment\u003d\"CENTER\" GridPane.valignment\u003d\"TOP\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                                \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003c/Menu\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                                \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003c/Menu\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                        \u003cStackPane fx:id\u003d\"logPanelPlaceholder\" alignment\u003d\"BOTTOM_LEFT\" GridPane.halignment\u003d\"LEFT\" GridPane.rowIndex\u003d\"2\" GridPane.valignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003cpadding\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                                \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003c/padding\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                        \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" alignment\u003d\"CENTER_LEFT\" GridPane.rowIndex\u003d\"3\"\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003cpadding\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                                \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003c/padding\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                        \u003cVBox GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"2\" GridPane.rowSpan\u003d\"2\"\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                            \u003cStackPane fx:id\u003d\"viewPanelPlaceholder\" alignment\u003d\"CENTER_RIGHT\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                            \u003cpadding\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                                \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                            \u003c/padding\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" minHeight\u003d\"20.0\" GridPane.columnSpan\u003d\"2\" GridPane.rowIndex\u003d\"4\" /\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                        \u003cStackPane style\u003d\"-fx-background-color: #202020;\" GridPane.rowIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                            \u003cchildren\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                                \u003cLabel fx:id\u003d\"chatLog\" layoutX\u003d\"399.0\" layoutY\u003d\"10.0\" text\u003d\"Chat Log\" textAlignment\u003d\"CENTER\" textFill\u003d\"WHITE\"\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                                    \u003cfont\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                                        \u003cFont name\u003d\"Comic Sans MS\" size\u003d\"24.0\" /\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                                    \u003c/font\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                                    \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                                        \u003cInsets /\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                                    \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                                    \u003cStackPane.margin\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                                        \u003cInsets /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                                    \u003c/StackPane.margin\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                                        \u003cInsets bottom\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                                \u003c/Label\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                            \u003c/children\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                        \u003cStackPane layoutX\u003d\"10.0\" layoutY\u003d\"43.0\" style\u003d\"-fx-background-color: #202020;\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                            \u003cchildren\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                                \u003cLabel fx:id\u003d\"list\" text\u003d\"List\" textAlignment\u003d\"CENTER\" textFill\u003d\"WHITE\" StackPane.alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                                    \u003cfont\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                                        \u003cFont name\u003d\"Segoe UI Light\" size\u003d\"24.0\" /\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                                    \u003c/font\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                                    \u003cStackPane.margin\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                                        \u003cInsets /\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                                    \u003c/StackPane.margin\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                                        \u003cInsets bottom\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                                \u003c/Label\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                            \u003c/children\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                    \u003c/children\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "Kyzure": 69,
      "-": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddEventCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import static seedu.address.logic.commands.AddEventCommandBuilder.OPTION_END_DATE_TIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import static seedu.address.logic.commands.AddEventCommandBuilder.OPTION_REMIND_DATE_TIME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import static seedu.address.logic.commands.AddEventCommandBuilder.OPTION_TAGS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "class AddEventCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    void build_fullCommand_success() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        String description \u003d \"description\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        String start \u003d \"11/11/1111 11:00\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        String end \u003d \"11/11/1111 12:00\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        String remind \u003d \"11/11/1111 08:00\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        String[] tags \u003d new String[]{\"a\", \"b\", \"c\"};"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        assertDoesNotThrow(() -\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            AddEventCommand.newBuilder(null)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                .acceptSentence(description)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                .acceptSentence(start)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                .acceptSentence(OPTION_END_DATE_TIME)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                .acceptSentence(end)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                .acceptSentence(OPTION_REMIND_DATE_TIME)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                .acceptSentence(remind)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                .acceptSentence(OPTION_TAGS)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                .acceptSentence(tags[0])"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                .acceptSentence(tags[1])"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                .acceptSentence(tags[2])"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        });"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    void execute_requiredCommand_success() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        String description \u003d \"description\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        String start \u003d \"11/11/1111 11:00\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        assertDoesNotThrow(() -\u003e {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            // TODO: Create stub"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            assertEquals(model.getEventList().getReadOnlyList().size(), 0);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            Command command \u003d AddEventCommand.newBuilder(model)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                .acceptSentence(description)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                .acceptSentence(start)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            // TODO: Equality test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            assertEquals(model.getEventList().getReadOnlyList().size(), 1);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        });"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeomuCat": 59
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteEventCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import static seedu.address.logic.commands.DeleteEventCommandBuilder.OPTION_TAGS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import seedu.address.model.events.DateTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import seedu.address.model.events.EventSource;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "class DeleteEventCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    void build_fullCommand_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        String[] indexes \u003d new String[]{\"1\", \"2\", \"3\"};"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        String[] tags \u003d new String[]{\"a\", \"b\", \"c\"};"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        assertDoesNotThrow(() -\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            DeleteEventCommand.newBuilder(null)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                .acceptSentence(indexes[0])"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                .acceptSentence(indexes[1])"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                .acceptSentence(indexes[2])"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                .acceptSentence(OPTION_TAGS)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                .acceptSentence(tags[0])"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                .acceptSentence(tags[1])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                .acceptSentence(tags[2])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        });"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    void execute_requiredCommand_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        // TODO: This should throw an exception"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        assertDoesNotThrow(() -\u003e {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            assertEquals(model.getEventList().getReadOnlyList().size(), 0);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            Command command \u003d DeleteEventCommand.newBuilder(model)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            assertEquals(model.getEventList().getReadOnlyList().size(), 0);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        });"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    void execute_deleteOne_success() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        String index \u003d \"2\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        assertDoesNotThrow(() -\u003e {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            model.addEvent(new EventSource(\"a\", new DateTime(Instant.now())));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            model.addEvent(new EventSource(\"b\", new DateTime(Instant.now())));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            model.addEvent(new EventSource(\"c\", new DateTime(Instant.now())));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            assertEquals(model.getEventList().getReadOnlyList().size(), 3);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            Command command \u003d DeleteEventCommand.newBuilder(model)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                .acceptSentence(index)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            assertEquals(model.getEventList().getReadOnlyList().size(), 2);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        });"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    void execute_deleteOneInvalidIndex_failed() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        String[] indexes \u003d new String[]{\"-1\", \"0\", \"1\"};"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        for (String index : indexes) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            assertThrows(CommandException.class, () -\u003e {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                assertEquals(model.getEventList().getReadOnlyList().size(), 0);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                Command command \u003d DeleteEventCommand.newBuilder(model)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                    .acceptSentence(index)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                    .build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                command.execute();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            });"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    void execute_deleteMultiple_success() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        String[] indexes \u003d new String[]{\"2\", \"3\", \"4\"};"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        assertDoesNotThrow(() -\u003e {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            model.addEvent(new EventSource(\"a\", new DateTime(Instant.now())));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            model.addEvent(new EventSource(\"b\", new DateTime(Instant.now())));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            model.addEvent(new EventSource(\"c\", new DateTime(Instant.now())));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            model.addEvent(new EventSource(\"d\", new DateTime(Instant.now())));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            model.addEvent(new EventSource(\"e\", new DateTime(Instant.now())));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            assertEquals(model.getEventList().getReadOnlyList().size(), 5);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            Command command \u003d DeleteEventCommand.newBuilder(model)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                .acceptSentence(indexes[0])"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                .acceptSentence(indexes[1])"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                .acceptSentence(indexes[2])"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            assertEquals(model.getEventList().getReadOnlyList().size(), 2);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        });"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    void execute_deleteMultipleInvalidIndexes_failed() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        String[] indexes \u003d new String[]{\"1\", \"2\", \"3\"};"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            model.addEvent(new EventSource(\"a\", new DateTime(Instant.now())));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            model.addEvent(new EventSource(\"b\", new DateTime(Instant.now())));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            assertEquals(model.getEventList().getReadOnlyList().size(), 2);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            Command command \u003d DeleteEventCommand.newBuilder(model)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                .acceptSentence(indexes[0])"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                .acceptSentence(indexes[1])"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                .acceptSentence(indexes[2])"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        });"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeomuCat": 129
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditEventCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import static seedu.address.logic.commands.EditEventCommandBuilder.OPTION_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import static seedu.address.logic.commands.EditEventCommandBuilder.OPTION_END_DATE_TIME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import static seedu.address.logic.commands.EditEventCommandBuilder.OPTION_REMIND_DATE_TIME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import static seedu.address.logic.commands.EditEventCommandBuilder.OPTION_START_DATE_TIME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import static seedu.address.logic.commands.EditEventCommandBuilder.OPTION_TAGS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import seedu.address.model.events.DateTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import seedu.address.model.events.EventSource;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "class EditEventCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    void build_fullCommand_success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        String[] indexes \u003d new String[]{\"1\", \"2\", \"3\"};"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        String description \u003d \"description\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        String start \u003d \"11/11/1111 11:00\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        String end \u003d \"11/11/1111 12:00\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        String remind \u003d \"11/11/1111 08:00\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        String[] tags \u003d new String[]{\"a\", \"b\", \"c\"};"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        assertDoesNotThrow(() -\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            EditEventCommand.newBuilder(null)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                .acceptSentence(indexes[0])"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                .acceptSentence(indexes[1])"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                .acceptSentence(indexes[2])"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                .acceptSentence(OPTION_DESCRIPTION)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                .acceptSentence(description)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                .acceptSentence(OPTION_START_DATE_TIME)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                .acceptSentence(start)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                .acceptSentence(OPTION_END_DATE_TIME)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                .acceptSentence(end)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                .acceptSentence(OPTION_REMIND_DATE_TIME)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                .acceptSentence(remind)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                .acceptSentence(OPTION_TAGS)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                .acceptSentence(tags[0])"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                .acceptSentence(tags[1])"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                .acceptSentence(tags[2])"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        });"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    void execute_requiredCommand_success() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        String[] indexes \u003d new String[]{\"1\", \"2\", \"3\"};"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        assertDoesNotThrow(() -\u003e {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            model.addEvent(new EventSource(\"a\", new DateTime(Instant.now())));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            model.addEvent(new EventSource(\"b\", new DateTime(Instant.now())));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            model.addEvent(new EventSource(\"c\", new DateTime(Instant.now())));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            Command command \u003d EditEventCommand.newBuilder(model)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                .acceptSentence(indexes[0])"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                .acceptSentence(indexes[1])"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                .acceptSentence(indexes[2])"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            assertEquals(model.getEventList().getReadOnlyList().size(), 3);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            // TODO: Equality test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            assertEquals(model.getEventList().getReadOnlyList().size(), 3);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        });"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    void execute_editOneInvalidIndex_failed() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        String[] indexes \u003d new String[]{\"-1\", \"0\", \"1\"};"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        for (String index : indexes) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            assertThrows(CommandException.class, () -\u003e {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                assertEquals(model.getEventList().getReadOnlyList().size(), 0);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                Command command \u003d EditEventCommand.newBuilder(model)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                    .acceptSentence(index)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                    .build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                command.execute();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            });"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    void execute_editMultipleInvalidIndex_failed() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        String[] indexes \u003d new String[]{\"1\", \"2\", \"3\"};"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            model.addEvent(new EventSource(\"a\", new DateTime(Instant.now())));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            model.addEvent(new EventSource(\"b\", new DateTime(Instant.now())));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            assertEquals(model.getEventList().getReadOnlyList().size(), 2);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            Command command \u003d EditEventCommand.newBuilder(model)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                .acceptSentence(indexes[0])"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                .acceptSentence(indexes[1])"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                .acceptSentence(indexes[2])"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        });"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeomuCat": 112
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/arguments/ArgumentTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "package seedu.address.logic.commands.arguments;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import seedu.address.logic.commands.exceptions.ArgumentException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "class ArgumentTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    void build_acceptNull_failure() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ArgumentMock().accept(null));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    void build_optionalArgument_success() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        assertDoesNotThrow(() -\u003e new ArgumentMock().build(false));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    void build_acceptOptionalArgument_success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        String[] arguments \u003d { \"\", \" \", \"a\" };"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        for (String arg : arguments) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            assertDoesNotThrow(() -\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                new ArgumentMock()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                    .accept(arg)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                    .build(false);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            });"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    void build_requiredArgument_failure() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        assertThrows(ArgumentException.class, () -\u003e new ArgumentMock().build(true));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    void build_acceptRequiredArgument_success() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        String[] arguments \u003d { \"\", \" \", \"a\" };"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        for (String test : arguments) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            assertDoesNotThrow(() -\u003e {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                new ArgumentMock()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                    .accept(test)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                    .build(true);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            });"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    private static class ArgumentMock extends Argument\u003cObject\u003e {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        ArgumentMock() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            super(new ArgumentBuilderStub());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        Object parse(String userInput) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            // should not be called when argument is optional."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            Objects.requireNonNull(userInput);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    private static class ArgumentBuilderStub extends ArgumentBuilder\u003cObject\u003e {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        ArgumentBuilderStub() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            super(\"\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        Argument\u003cObject\u003e argumentBuild() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            return new ArgumentMock();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeomuCat": 78
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/arguments/VariableArgumentsTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "package seedu.address.logic.commands.arguments;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "class VariableArgumentsTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    void build_acceptNull_failure() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new VariableArgumentsMock().accept(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    void build_noArguments_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        assertDoesNotThrow(() -\u003e new VariableArgumentsMock().build());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    void build_multipleArguments_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        String[] arguments \u003d { \"\", \" \", \"a\" };"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        assertDoesNotThrow(() -\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            new VariableArgumentsMock()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                .accept(arguments[0])"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                .accept(arguments[1])"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                .accept(arguments[2])"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        });"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    private static class VariableArgumentsMock extends VariableArguments\u003cObject\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        VariableArgumentsMock() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            super(new VariableArgumentsBuilderStub());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        Object parse(String userInput) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    private static class VariableArgumentsBuilderStub extends VariableArgumentsBuilder\u003cObject\u003e {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        VariableArgumentsBuilderStub() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            super(\"\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        VariableArguments\u003cObject\u003e argumentBuild() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            return new VariableArgumentsMock();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeomuCat": 55
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/CommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import seedu.address.logic.commands.AddEventCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import seedu.address.logic.commands.DeleteEventCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import seedu.address.logic.commands.EditEventCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "class CommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    private static final String COMMAND_ADD_EVENT \u003d \"add_event\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    private static final String COMMAND_DELETE_EVENT \u003d \"delete_event\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    private static final String COMMAND_EDIT_EVENT \u003d \"edit_event\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    private static CommandParser commandParser;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    static void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        CommandKeywordParser keywordParser \u003d new CommandKeywordParser();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        keywordParser.addCommand(COMMAND_ADD_EVENT, () -\u003e AddEventCommand.newBuilder(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        keywordParser.addCommand(COMMAND_DELETE_EVENT, () -\u003e DeleteEventCommand.newBuilder(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        keywordParser.addCommand(COMMAND_EDIT_EVENT, () -\u003e EditEventCommand.newBuilder(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        commandParser \u003d new CommandParser(keywordParser);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    void parse_invalidInputFormat_failure() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        String[] tests \u003d { \"\", \" \" };"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        for (String test : tests) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            assertThrows(ParseException.class, () -\u003e commandParser.parse(test));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    void parse_addEventCommand_success() throws ParseException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        String test \u003d \"add_event \u0027Celebrate Rori Birthday\u0027 \u002718/08/2019 16:00\u0027\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        assertTrue(commandParser.parse(test) instanceof AddEventCommand);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    void parse_deleteEventCommand_success() throws ParseException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        String test \u003d \"delete_event 1 2 3\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        assertTrue(commandParser.parse(test) instanceof DeleteEventCommand);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    void parse_editEventCommand_success() throws ParseException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        String test \u003d \"edit_event 1 2 3\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        assertTrue(commandParser.parse(test) instanceof EditEventCommand);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeomuCat": 56
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/CommandParserTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    public static void assertParseSuccess(Parser\u003c? extends Command\u003e parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeomuCat": 1,
      "-": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DateTimeParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "class DateTimeParserTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    void parse_invalidDateTime_failure() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        String[] tests \u003d { \"\", \" \", \"a\", \"101010 1010\", \"9/9/9 9:00\", \"13/13/1313 13:13\" };"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        for (String test : tests) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            assertThrows(ParseException.class, () -\u003e new DateTimeParser().parse(test));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    void parse_validDateTime_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        String[] tests \u003d { \"12/12/1212 12:12\", \"01/01/0001 00:00\", \"31/12/9999 23:59\" };"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        for (String test : tests) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "            assertDoesNotThrow(() -\u003e new DateTimeParser().parse(test));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WeomuCat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeomuCat": 27
    }
  }
]
