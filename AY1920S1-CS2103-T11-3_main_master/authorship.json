[
  {
    "path": "README.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "belbel98"
        },
        "content": "\u003d Powerlifting Competition Coordinator"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "belbel98"
        },
        "content": "https://travis-ci.org/AY1920S1-CS2103-T11-3/main[image:https://travis-ci.org/AY1920S1-CS2103-T11-3/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "belbel98"
        },
        "content": "//ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "belbel98"
        },
        "content": "//image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "belbel98"
        },
        "content": "//endif::[]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "belbel98"
        },
        "content": "//"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "belbel98"
        },
        "content": "//ifndef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "belbel98"
        },
        "content": "//image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "belbel98"
        },
        "content": "//endif::[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "belbel98"
        },
        "content": "A powerlifting competition consists of 3 lifts, the Squat, Bench, and Deadlift."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "belbel98"
        },
        "content": "With 3 attempts, athletes will try to outdo and challenge themselves and lift as heavy as they can. +"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "belbel98"
        },
        "content": "The *Powerlifting Competition Coordinator* (PCC) is for powerlifting competitions organisers."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "belbel98"
        },
        "content": "The desktop application will help event organisers keep a record of past competitions and competitors."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "belbel98"
        },
        "content": "It can also facilitate the competition during the actual session,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "belbel98"
        },
        "content": "by continuously updating records of the athletes attempts on their lifts."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "belbel98"
        },
        "content": "Finally, PCC will keep its leader board up to date,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "belbel98"
        },
        "content": "to keep spectators and athletes hyped up and to find out who is the strongest lifter. +"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "belbel98"
        },
        "content": "To support the ease of data-entry, we have provided a Command Line Interface (CLI) that is augmented with a"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "belbel98"
        },
        "content": "Graphical User Interface (GUI) to help them better administer such powerlifting competitions. +"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "belbel98"
        },
        "content": "* AddressBook-Level3 project is created by SE-EDU initiative at https://se-education.org"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "belbel98"
        },
        "content": "* Some parts of this sample application were inspired by the excellent"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "belbel98"
        },
        "content": "http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by _Marco Jakob_."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "belbel98"
        },
        "content": "* Libraries used: https://openjfx.io/[JavaFX], https://github.com/FasterXML/jackson[Jackson],"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "belbel98"
        },
        "content": "https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "belbel98": 25,
      "-": 17
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "belbel98"
        },
        "content": "Powerlifting Competition Coordinator (PCC) is being developed by https://github.com/AY1920S1-CS2103-T11-3[T11-Team 3]. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "belbel98"
        },
        "content": "\u003d\u003d PCC Project Team"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "belbel98"
        },
        "content": "\u003d\u003d\u003d Professor Damith C. Rajapakse"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "image::damithc.jpg[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "belbel98"
        },
        "content": "{empty}[http://www.comp.nus.edu.sg/~damithch[homepage]] [https://github.com/damithc[github]]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Project Advisor"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "belbel98"
        },
        "content": "\u003d\u003d\u003d Ho Wei Chin"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "belbel98"
        },
        "content": "image::HoWeiChin.png[width\u003d\"180\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "belbel98"
        },
        "content": "{empty}[https://github.com/HoWeiChin[github]] [\u003c\u003choweichin#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Team Lead +"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "belbel98"
        },
        "content": "Responsibilities: Deliverable, Tracking, User Interface +"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "belbel98"
        },
        "content": "Component IC: Athletes"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "belbel98"
        },
        "content": "\u003d\u003d\u003d Ooi Ming Sheng"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "belbel98"
        },
        "content": "image::ooimingsheng.png[width\u003d\"180\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "belbel98"
        },
        "content": "{empty}[https://github.com/ooimingsheng[github]] [\u003c\u003cooimingsheng#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "belbel98"
        },
        "content": "Responsibilities: Integration, Code Quality +"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "belbel98"
        },
        "content": "Component IC: Leaderboard"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "belbel98"
        },
        "content": "\u003d\u003d\u003d Shawn Koh"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "belbel98"
        },
        "content": "image::shawnkoh.png[width\u003d\"180\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "belbel98"
        },
        "content": "{empty}[https://github.com/shawnkoh[github]] [\u003c\u003cshawnkoh#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "belbel98"
        },
        "content": "Responsibilities: Project Workflow, User interface, Code Quality +"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "belbel98"
        },
        "content": "Component IC: Competitions Overview"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "belbel98"
        },
        "content": "\u003d\u003d\u003d Christabel Teo"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "belbel98"
        },
        "content": "image::belbel98.png[width\u003d\"180\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "belbel98"
        },
        "content": "{empty}[https://github.com/belbel98[github]] [\u003c\u003cchristabelteo#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "belbel98"
        },
        "content": "Responsibilities: Documentation, Testing +"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "belbel98"
        },
        "content": "Component IC: Session Handling"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "belbel98": 25,
      "-": 34
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "belbel98"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/AY1920S1-CS2103-T11-3/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "belbel98"
        },
        "content": "// * *Email us* : You can also reach us at `damith [at] comp.nus.edu.sg`"
      }
    ],
    "authorContributionMap": {
      "belbel98": 2,
      "-": 5
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003d PowerLifting Competition Coordinator - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103-T11-3/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "By: `Team T11-3`      Since: `Sep 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003d\u003d\u003d What is Powerlifting Competition Coordinator?"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "Powerlifting Competition Coordinator is a free application for powerlifting competition event organizers"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "that is simple, fast, and easy to use. It is targeted at organizers of small to medium sized powerlifting"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "competitions who require a hassle-free way of managing and tracking the lifts of participants in and out"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "of the powerlifting competitions. During competition mode, the system has real time maintenance of athlete"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "rankings within their respective weight classes allowing the organizer track the participants\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "standings at all times throughout the duration of the competition."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003d\u003d\u003d Core team"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "Powerlifting Competition Coordinator  was developed and is maintained by"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "https://github.com/AY1920S1-CS2103-T11-3[Team T11-3]."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "Feel free to https://github.com/AY1920S1-CS2103-T11-3/main/issues[contact us] for any enquries."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003d\u003d\u003d Contributing"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "Powerlifting Competition Coordinator is an open source project and we would love to involve any contributor"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "who has a passion for powerlifting."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "To get involved, start by reading \u003c\u003cSettingUp#, Section 2, “Setting up”\u003e\u003e."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "This section includes the instructions to set up your development environment."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003d\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "Prior to setting up the project proper, make sure you have the following."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ". *JDK `11`* or above"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "+"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003d\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "To setup the project in IntelliJ, follow the steps below."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ". Fork this repo, and clone the fork to your computer."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "the existing project dialog first)."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ". Set up the correct JDK version for Gradle."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ".. Click `New...` and find the directory of the JDK."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ". Click `Import Project`."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ". Click `Open as Project`."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ". Click `OK` to accept the default settings."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`)."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "It should finish with the `BUILD SUCCESSFUL` message. +"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "This will generate all resources required by the application and tests."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003d\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "To verify that the setup is completed successfully, you should:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ". Run the `seedu.address.MainApp` and try a few commands."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003d\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "This subsection includes configurations that you may find necessary or useful as you work on this project."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "We recommend that you make these configuration changes and additions before you start writing code."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003d\u003d\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "This subsection includes configurations that you may find necessary or useful as you work on this project."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "We recommend that you make these configuration changes and additions before you start writing code."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003d\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "This project follows"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "Follow the instructions below to rectify this."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ". Click on the `Imports` tab to set the order."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "Set to `999` to prevent IntelliJ from contracting the import statements."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "`import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003d\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "After forking the repo, links in the documentation will still point to the `se-edu/addressbook-level3` repo."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "If you plan to develop this as a separate product (i.e. instead of contributing to the `se-edu/addressbook-level3`) ,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "you should replace the URL in the variable `repoURL` in `DeveloperGuide.adoc` and `UserGuide.adoc` with the"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "URL of your fork."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003d\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to l"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "earn how to set it up."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003d\u003d Design (Not finished)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "This section documents the design and interaction of components in Powerlifting Competition Coordinator."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "Please take a moment to understand the different components before making any code changes."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureDiagram.png[]"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "quick overview of each component."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "The `.puml` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the \u003c\u003cUsingPlantUml#, Using PlantUML guide\u003e\u003e to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has two classes called link:{repoURL}/src/main/java/seedu/address/Main.java[`Main`] and link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureSequenceDiagram.png[]"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[]"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ".  `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeleteSequenceDiagram.png[]"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[]"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the Address Book data."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `Address Book`, which `Person` can reference. This would allow `Address Book` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "image:BetterModelClassDiagram.png[]"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[]"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the Address Book data in json format and read it back."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Undo/Redo feature"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Proposed Implementation"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedAddressBook`."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` -- Saves the current address book state in its history."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` -- Restores the previous address book state from its history."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` -- Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState0.png[]"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState1.png[]"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "Step 3. The user executes `add n/David ...` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState2.png[]"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState3.png[]"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial address book state, then there are no previous address book states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoSequenceDiagram.png[]"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone address book states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState4.png[]"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/David ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState5.png[]"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "image::CommitActivityDiagram.png[]"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of address book states."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedAddressBook`."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Data Encryption"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data encryption feature will be implemented}_"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003d\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003d\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003d\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu. You should see a pop-up similar to Figure 12 below."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, follow the settings as indicated in Figure 12."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "[[Testing]]"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003d\u003d Testing (Check this section at end of project!)"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "This section includes some information that may be useful for testing the project."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003d\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "There are three ways to run tests."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "due to platform/resolution-specific idiosyncrasies."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "`Run \u0027ABC\u0027`."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "*Method 3: Using Gradle (headless)*"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "Thanks to the https://github.com/TestFX/TestFX[TestFX, window\u003d\"_blank\"_] library we use, our"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "That means the developer can do other things on the Computer while the tests are running."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "To run tests in headless mode, open a console and run the command `gradlew clean headless allTests`"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "(Mac/Linux: `./gradlew clean headless allTests`)."
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003d\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "We have two types of tests:"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ".  *GUI Tests* - These are tests involving the GUI. They include:"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "`systemtests` package."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ".  *Non-GUI Tests* - These are tests not involving the GUI. They include:"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "..  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "e.g. `seedu.address.commons.StringUtilTest`"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "e.g. `seedu.address.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "e.g. `seedu.address.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003d\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "* Reason: One of its dependencies, `UserGuide.html` in `src/main/resources/docs` is missing."
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "* Solution: Execute Gradle task `processResources`."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "**Problem: `AddCommandSystemTest` or `SearchCommandSystemTest` fails with a `GuiRobot$EventTimeoutException`.**"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "* Reason: The required data could not be fetched from the online service within 10s. The service could be down at the moment."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "* Solution: Check that you are connected to the Internet, or if you are, try again later."
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "This section contains some information or tools that may be useful for managing the project."
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003d\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003d\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "We use https://circleci.com/[CircleCI, window\u003d\"_blank\"], https://travis-ci.org/[Travis CI, window\u003d\"_blank\"], and https://www.appveyor.com/[AppVeyor, window\u003d\"_blank\"_] to perform _Continuous Integration_ on our projects."
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "See \u003c\u003cUsingCircleCI#, UsingCircleCI.adoc\u003e\u003e, \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e, and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003d\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "We use https://coveralls.io/[Coveralls, window\u003d\"_blank\"] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003d\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify, window\u003d\"_blank\"] to see a preview of how the"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003d\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`, window\u003d\"_blank\"]."
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ".  Tag the repo with the version number, e.g. `v0.1`."
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub, window\u003d\"_blank\"] and upload the JAR file you created."
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003d\u003d\u003d Managing Dependencies (Check this!!!)"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "A project often depends on third-party libraries. For example, PowerLifting Competition Coordinator depends on the http://wiki.fasterxml.com/JacksonHome[Jackson library, window\u003d\"_blank\"_] for XML parsing."
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "We make use of Gradle to manage the project dependencies. Gradle can automate the downloading of these dependencies, saving us time and effort."
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "While strongly discouraged by us, you can nevertheless opt for one of the following alternatives."
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "* Include those libraries in the repo (though this bloats the repo size)."
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "* Download those libraries manually (though this creates extra work for you)."
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "* organizes small to medium sized powerlifting competitions"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "* has a need to manage a significant number athletes during the competition"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "* has a need to see the ranking of the participants of each competition"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "* prefer desktop applicationss over other types"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "*Value proposition*: manage powerlifting competitions faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` | new user |see usage instructions |refer to instructions when I forget how to use the App"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "|`* * *` | event organizer | create a new competition |"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "start and organize a new competition"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "|`* * *` | event organizer |find athletes according to their weight class |"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "see which athletes are in the same competition"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "|`* * *` | event organizer |sort athletes according to their attempted weights for different lifting events |"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "adjust the weight on stage call for the next athlete to come and attempt their lift"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "|`* * *` | event organizer |find which athletes are currently in the lead (individual lifts and aggregate score) |"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "so that I can let the competitors know who is in the lead for their resepective weight classes and  let them calculate"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "what they need to do to win the competition"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "|`* * *` | event organizer |the relative position of an athlete as compared to other athletes in their weight class |"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "see which athletes are in the same competition"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "|`* * *` | event organizer | edit the weight of a lifting attempt for an athlete |"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "so that the lifting order of athletes can be updated"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "|`* * *` | event organizer | update an athlete’s score after a successful lift |"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "so that the ranking of the athletes can be updated"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "|`* * *` | event organizer | edit an athlete\u0027s name |"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "update the athlete\u0027s name in case the athletes have change their names or they were inputted incorrectly previously"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "|`* * *` | event organizer | input/edit an athlete\u0027s body weight |"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "update the athlete\u0027s weight so the athelete is taking part in the correct weight class"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "|`* * *` | event organizer | record when a lifter fails/succeed in his/her lift |"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "update the athlete\u0027s score and ranking accordingly and to keep a record for how each athlete\u0027s"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "score was derived"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "|`* *` |event organizer | input/edit an athlete\u0027s country/club |"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "which country/club the athlete is representing"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "|`* * *` |event organizer | know the rack height for bench press/squat |"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "the racks can be prepared before the athletes make their lifting attempt and save time"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": "|`* *` |user |hide \u003c\u003cprivate-contact-detail,private contact details\u003e\u003e by default |minimize chance of someone else seeing them by accident"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "|`*` | event organizer |find which club/country an athlete is affiliated with |"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "so that I know which countries/clubs can be ranked across the various weight classess"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": "|`*` |user with many persons in the address book |sort persons by name |locate a person easily"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003d\u003d Use Cases (To Do)"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "(For all use cases below, the *System* is the `Powerlifting Competition Competitor` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003d\u003d\u003d Out of competition mode"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Use case: UC1 - View my competition list"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "1.  User requests to list all competitions in the system."
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "2.  System shows a list of competitions held based on the files in the folder."
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "+"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "+"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003d\u003d\u003d\u003d Use case: UC2 - Add a new competition"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "1. User requests for a new powerlifting competition to be started."
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "2. User inputs the initial competition data (e.g. name, particpants) to be inputted."
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "3. System adds the new competition to the user\u0027s competition list."
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "4. System shows a success message."
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "+"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "* 2a. Competition data is invalid."
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "+"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "** 2a1. System shows an error message."
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "+"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "Use case resume at step 2."
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "* 2b. The competition name has already been used in user\u0027s competition list."
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "+"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "** 2b1. System tells user that the competition is already in his competition list."
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "+"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003d\u003d\u003d\u003d Use case: UC3 - Delete a competition"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "1. User obtains a list of competitions by listing (\u003c\u003cUse case: UC1 - View my competition list, *UC1*\u003e\u003e)"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "2. User requests for a new powerlifting competition to be deleted."
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "3. System adds the new competition to the user\u0027s competition list."
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "4. System shows a success message."
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "+"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "* 2a. User gives an invalid index."
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "+"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "** 2a1. System shows an error message."
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "+"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "Use case resume at step 2."
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003d\u003d\u003d\u003d Use case: UC4 - Enter competition mode for a particular competition"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "1. User obtains a list of competitions by listing (\u003c\u003cUse case: UC1 - View my competition list, *UC1*\u003e\u003e)"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "2. User requests to enter competition mode for a particular competition."
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "3. System enters competition mode for a particular competition."
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "+"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "* 2a. User gives an invalid index."
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "+"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "** 2a1. System shows an error message."
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "+"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "Use case resume at step 2."
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003d\u003d\u003d\u003d Use case: UC5 - View my athlete list"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "1.  User requests to list all athletes in the system."
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "2.  Powerlifting Competition Coordinator shows a list of all athletes in the system."
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "+"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "+"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003d\u003d\u003d\u003d Use case: UC6 - Search for athletes"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "1.  User performs a search with some constraints (e.g. id, country, age, etc.)."
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "2.  System lists athletes satisfying all the constraints."
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "+"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "* 2a. System does not find any athletes satisfying all the constraints."
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "+"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "** 2a1. System shows an empty list."
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003d\u003d\u003d\u003d Use case: UC7 - View a specific athlete"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "1. User obtains a list of athletes by listing (\u003c\u003cUse case: UC5 - View my athlete list, *UC5*\u003e\u003e)."
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "or searching (\u003c\u003cUse case: UC6 - Search for athletes,*UC6*\u003e\u003e)."
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "2. User requests to view more information on a specific athlete in the list."
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "3. System shows detailed information of the book."
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "+"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "* 2a. System does not find the athlete in the list."
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "+"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "Use case restarts from step 1."
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "* 2b. User gives an invalid index."
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "+"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "** 2b1. System shows an error message."
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "+"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003d\u003d\u003d\u003d Use case: UC8 - Add an athlete"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "1. User requests for an athlete to be added."
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "2. User inputs athlete data."
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "3. User confirms that the addition of the athlete cannot be reversed."
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "4. System adds the new athlete to the user\u0027s athlete list."
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "5. System shows a success message."
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "+"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "* 2a. Athlete data is invalid."
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "+"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "** 2a1. System shows an error message."
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "+"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "Use case resume at step 2."
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "* 2b. The athlete is already in user\u0027s athlete list."
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "+"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "** 2b1. System tells user that the athlete is already in his athlete list."
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "+"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003d\u003d\u003d\u003d Use case: UC9 - Edit a specific athlete"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "1. User views a specific athlete (\u003c\u003cUse case: UC7 - View a specific athlete, *UC7*\u003e\u003e)"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "2. User requests certain data about the athlete to be updated."
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "3. System shows success message."
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "+"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "* 2a. User gives invalid data."
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "+"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "** 2a1. System shows an error message."
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "+"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003d\u003d\u003d\u003d Use case: UC10 - Delete a specific athlete"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "1. User views a specific athlete (\u003c\u003cUse case: UC7 - View a specific athlete, *UC7*\u003e\u003e)"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "2. User requests for an athlete to be deleted from the athlete list."
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "3. System shows success message."
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "+"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003d\u003d\u003d In competition mode"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003d\u003d\u003d\u003d Use case: UC11 - View my participant list"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "1.  User requests to list all participants in the competition."
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "2.  System shows a list of all participants in the competition."
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003d\u003d\u003d\u003d Use case: UC12 - Search/rank for participants"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "1.  User performs a search with some constraints (e.g. id, country, age, ranking criteria etc.)."
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "2.  System lists participants satisfying all the constraints."
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "+"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "* 2a. System does not find any athletes satisfying all the constraints."
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "+"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "** 2a1. System shows an empty list."
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003d\u003d\u003d\u003d Use case: UC13 - View a specific participant"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "1. User obtains a list of athletes by listing (\u003c\u003cUse case: UC11 - View my participant list, *UC11*\u003e\u003e)."
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "or searching (\u003c\u003cUse case: UC12 - Search for participants, *UC12*\u003e\u003e)."
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "2. User requests to view more information on a specific athlete in the list."
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "3. System shows detailed information of the book."
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "+"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "* 2a. System does not find the athlete in the list."
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "+"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "Use case restarts from step 1."
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "* 2b. User gives an invalid index."
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "+"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "** 2b1. System shows an error message."
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "+"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003d\u003d\u003d\u003d Use case: UC14 - Edit a specific participant"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "1. User views a specific athlete (\u003c\u003cUse case: UC13 - View a specific participant, *UC13*\u003e\u003e)"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "2. User requests certain data about the athlete to be updated."
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "3. System shows success message."
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "+"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "* 2a. User gives invalid data."
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "** 2a1. System shows an error message."
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003d\u003d\u003d\u003d Use case: UC15 - Disqualify a specific participant"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "1. User views a specific participant (\u003c\u003cUse case: UC13 - View a specific participant, *UC13*\u003e\u003e)"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "2. User requests for a particular athlete to be disqualified from the competition."
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "3. System shows success message."
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "+"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003d\u003d\u003d\u003d Use case: UC16 - Call for next participant in lifting order"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "1. User requests for next athlete to attempt lift."
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "2. System shows athlete that is lifting next."
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "3. User updates system after athlete attempts lift."
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "4. System shows success message."
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "+"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "* 2a. No more participants in lifting order."
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "+"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003d\u003d\u003d\u003d Use case: UC16 - Exit competition"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "1. User requests to exit competition mode."
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "2. System exits competition mode."
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "+"
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003d\u003d\u003d\u003d Use case: UC16 - Finalize competition"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "1. User requests to finalize competition data."
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "2. System finalizes competition and prevents any further updating of the competition data."
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "+"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "* 2a. There are still participants that have not finished their lifts"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "+"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `1.8.0_60` or higher installed."
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ".  Should work on both 32-bit and 64-bit environments."
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ".  Should come with automated unit tests and open source code."
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ".  Should come with a user guide and a developer guide."
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ".  Should favor \u003c\u003cdos-style-commands,DOS style commands\u003e\u003e over Unix-style commands."
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ".  Should be intuitive such that a new user can learn to search and organize a powerlifting competition within 10 minutes."
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "-"
        },
        "content": "[[private-contact-detail]] Private contact detail::"
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "-"
        },
        "content": "A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "-"
        },
        "content": "*Product Name*"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "-"
        },
        "content": "Author: ..."
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003d\u003d Instructions for Manual Testing (To Do)"
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person"
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "-"
        },
        "content": ". Deleting a person while all persons are listed"
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "-"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "-": 396,
      "ooimingsheng": 636
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "\u003d PowerLifting Competition Coordinator- User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103-T11-3/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "By: `Team CS2103-T11`      Since: `Jun 2016`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "A powerlifting competition/meet consists of 3 lifts, the Squat, Bench and Deadlift. With 3 attempts, athletes will try to outdo and challenge themselves and lift as heavy as they can."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "This software is for organisers who organise powerlifting competitions. To facilitate the ease of data-entry, we have provided a command line interface that is augmented with a Graphical User Interface to help them better administer powerlifting competitions."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "Download the software from our git repo."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "Ensure Java 11 is downloaded into your machine."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* Items in square brackets are optional e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "* Parameters can be in any order e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "\u003d\u003d\u003d Competitions"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "The commands listed below in 3.2, 3.3, … are based on the context of a competition."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "\u003d\u003d\u003d\u003d Context: No Competition"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "*Commands*"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "* Save: this changes the context to `Creating a competition`"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "* Select: changes the context of a `Competition`"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "\u003d\u003d\u003d\u003d Context: Creating a Competition"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "*Parameters*"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "* name"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "* date"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "* Type"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "*Commands*"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "* Save"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "\u003d\u003d\u003d\u003d Context: On a Competition"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "*Commands*"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "* Athletes"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "* List"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "*Prints a list of competitions*"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "* Finalise"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "*Parameters*"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "* Id"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "* name"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "*Marks the competition as completed and prevents further edits*"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "* Switch"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "*Parameters*"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "* id"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "* name"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "*Switch context to a different competition*"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "* Delete"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "*Parameters*"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "* Id"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "* name"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "\u003d\u003d\u003d Getting Competitors’ Data"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "\u003d\u003d\u003d\u003d Sorting Athletes: `sort`"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "Groups and sorts all athletes into their respective weight classes or attempted weights for an event."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "Format: `sort wc/WEIGHTCLASS`"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "Format: `sort aw/EVENT`"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "Example(s):"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "* `sort wc/90kg`"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "* `sort aw/Squat`"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "\u003d\u003d\u003d\u003d Getting top scorers: `score`"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "Gets and displays leading athletes and their scores for individual events or for their total scores."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "Format: `score e/EVENT t`"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "* to get scores for individual events only:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "  `score e/Squat`"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "* to get total scores only"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "  `score t`"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "\u003d\u003d\u003d\u003d Getting rank of an athlete: `rank`"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "Gets current position of an athlete relative to other relatives for the entire competition."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "Format: `rank n/NAME`"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "* `rank n/John`"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "\u003d\u003d\u003d\u003d Affiliation of an athlete: `aff`"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "Gets the name of an organisation and a country, an athlete is associated with."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "Format: `aff n/NAME`"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "* `aff n/John`"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "\u003d\u003d\u003d\u003d Edit data of an athlete: `edit`"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "Edits field(s) of information belonging to an athlete"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "Format: `edit n/CURRENTNAME newN/NEWNAME bw/BODYWEIGHT wc/WEIGHTCLASS aff/AFFILIATION s/SCORE`"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "* To edit name only:"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "  `edit n/John newN/Johnny`"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "* To edit bodyweight only:"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "  `edit n/John bw/100kg`"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "* To edit subset of fields:"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "  `edit n/John newN/Johnny wc/100kg aff/Singapore`"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "* To edit all fields:"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "  `edit n/John newN/Johnny bw/90 wc/90 aff/Singapore s/1000`"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "\u003d\u003d\u003d\u003d Get top 3 athletes: `top3`"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "Gets top 3 athletes (currently in 1st, 2nd and 3rd) for each weight class."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "Format: `top3 wc/WEIGHTCLASS`"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "`top3 wc/100kg`"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "\u003d\u003d\u003d Participation"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "This feature handles the entire flow of each session during Meet Day. It allows event organisers to submit Athlete’s Squat, Bench, Deadlift attempts, as well as the success of their lifts. It will show the relevant information to prepare for the athletes lift (displaying name, weight, rack height, etc)."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "\u003d\u003d\u003d\u003d Prepare for a new session: `new`"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "Starts a new session of SBD lifts for the given weight classes (WC), separated by a space. This will load all the athletes information to prepare for the 3 lifts."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "Format: `new wc/WEIGHTCLASS\u0026GENDER`"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "GENDER is denoted by either M (male) or F (female)"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "* `new u83M u93M` to create new sessions for male 83kg and male 93kg."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "* `new u63F u66M u72F` to create new sessions for female 63kg, male 66kg and female 72kg."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "\u003d\u003d\u003d\u003d Submit next attempt: `attempt`"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "Submits an athletes next attempt for either the squat, bench, or deadlift."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "Format: ` attempt LIFT ATTEMPT_NO/WEIGHT`"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "S means squat, B means bench, D means deadlift"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "ATTEMPT_NO ranges from 1 to 3 inclusively."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "* `attempt S 2 /170`"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "* `attempt D 3 /300`"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "\u003d\u003d\u003d\u003d Update lift or no lift: `lift`"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "Updates whether the athlete succeeds in his attempt, or fails it with the given “lights”, with ‘O’ representing a white light, and ‘X’ representing a red. 2 or more red lights implies a no lift, else it will be a successful lift."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "Format: `lift LIFT ATTEMPT_NO 3LIGHTS n/NAME`"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "* `lift S 2 OOO n/christabelteo`"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "* `lift B 3 XXO n/shawnkoh`"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "\u003d\u003d\u003d\u003d Starts the next lift: `start`"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "This will line up athletes (sort) according to their attempt weight for that particular lift and attempt. Each lift will have 3 attempts."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "Format: `start LIFT`"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "LIFT comprises: S means squat, B means bench, D means deadlift"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "* `start B`"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "* `start D`"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "\u003d\u003d\u003d\u003d Get the next lifter in line: `next`"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "Retrieves the next lifter (according to weight lifted for that attempt), the weights he/she is going for, rack height and lift-off if necessary."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "Format: `next`"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "* `to put in later`"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "\u003d\u003d\u003d\u003d Submit first attempts: `first`"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "Submits the first attempt (usually before starting any lift) for all 3 lifts."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "Format: `first n/NAME SQUAT_WEIGHT/BENCH_WEIGHT/DL_WEIGHT`"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "* `first n/farhannafahrid 125/55/170`"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "* `first n/marcustay 190/140/220`"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "\u003d\u003d\u003d\u003d Declare pre-lift settings: `pre`"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "Declares pre meet settings, such as squat and bench rack height, as well as opting for lift-off for bench. For the squat and bench, athletes need to indicate their rack heights so that it can be setup before their lift. Liftoff is optional for the bench, lifters can choose if they need a spotter to help them with the lift off."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "Format: ` pre n/NAME s/RACK_HEIGHT b/RACK_HEIGHT LIFTOFF`"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "RACK_HEIGHT - range:"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "LIFTOFF - Y for yes, N for no"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "* `pre n/howeichin s/12 b/7 Y`"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "* `pre n/ooimingsheng s/10 b/5 N`"
      }
    ],
    "authorContributionMap": {
      "HoWeiChin": 165,
      "-": 90,
      "ooimingsheng": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/attempt/Attempt.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "belbel98"
        },
        "content": "package seedu.address.model.attempt;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import seedu.address.model.participation.Participation;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "belbel98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "belbel98"
        },
        "content": " * Represents a {@link seedu.address.model.person.Person}\u0027s attempt in an {@link Exercise}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "belbel98"
        },
        "content": " * Guarantees: immutable;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "belbel98"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "belbel98"
        },
        "content": "public class Attempt {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private final Exercise exercise;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private final Participation participation;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public Attempt(Exercise exercise, Participation participation) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        this.exercise \u003d exercise;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        this.participation \u003d participation;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "belbel98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "belbel98": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/model/competition/Competition.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "package seedu.address.model.competition;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "import seedu.address.model.exercise.UniqueExerciseList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "import seedu.address.model.participation.UniqueParticipationList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": " * Represents a Competition in the app."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "public class Competition {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    private final Name name; // to be replaced"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    private final Date startDate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    private final Date endDate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    private final UniqueExerciseList exerciseList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    private final UniqueParticipationList participationList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    public Competition(Name name, Date startDate, Date endDate) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "        this.exerciseList \u003d new UniqueExerciseList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "        this.participationList \u003d new UniqueParticipationList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "        return Objects.hash(name, startDate, endDate, exerciseList, participationList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "        return super.equals(obj); // stub"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "        return super.toString(); // stub"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnkoh": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/model/competition/UniqueCompetitionList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "package seedu.address.model.competition;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "import seedu.address.model.competition.exceptions.CompetitionNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "import seedu.address.model.competition.exceptions.DuplicateCompetitionException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": " * A list of competitions that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": " * A competition is considered unique by comparing using {@code Competition#equals(Competition)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": " *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": " * @see Competition#equals(Object)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "public class UniqueCompetitionList implements Iterable\u003cCompetition\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    private final ObservableList\u003cCompetition\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    private final ObservableList\u003cCompetition\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "     * Returns true if the list contains an equivalent competition as the given argument."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    public boolean contains(Competition toCheck) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::equals);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "     * Adds a competition to the list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "     * The competition must not already exist in the list."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    public void add(Competition toAdd) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "            throw new DuplicateCompetitionException();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "     * Replaces the competition {@code target} in the list with {@code editedCompetition}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "     * The competition identity of {@code editedCompetition} must not be the"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "     * same as another existing competition in the list."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    public void setCompetition(Competition target, Competition editedCompetition) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "        requireAllNonNull(target, editedCompetition);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "            throw new CompetitionNotFoundException();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "        if (!target.equals(editedCompetition) \u0026\u0026 contains(editedCompetition)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "            throw new DuplicateCompetitionException();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "        internalList.set(index, editedCompetition);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "     * Removes the equivalent competition from the list."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "     * The competition must exist in the list."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    public void remove(Competition toRemove) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "            throw new CompetitionNotFoundException();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    public void setCompetitions(seedu.address.model.competition.UniqueCompetitionList replacement) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "     * Replaces the contents of this list with {@code competitions}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "     * {@code competitions} must not contain duplicate competitions."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    public void setCompetitions(List\u003cCompetition\u003e competitions) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "        requireAllNonNull(competitions);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "        if (!competitionsAreUnique(competitions)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "            throw new DuplicateCompetitionException();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "        internalList.setAll(competitions);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    public ObservableList\u003cCompetition\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    public Iterator\u003cCompetition\u003e iterator() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "                || (other instanceof seedu.address.model.competition.UniqueCompetitionList // instanceof handles nulls"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "                \u0026\u0026 internalList.equals(((seedu.address.model.competition.UniqueCompetitionList) other).internalList));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "     * Returns true if {@code competitions} contains only unique competitions."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    private boolean competitionsAreUnique(List\u003cCompetition\u003e competitions) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "        for (int i \u003d 0; i \u003c competitions.size() - 1; i++) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "            for (int j \u003d i + 1; j \u003c competitions.size(); j++) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "                if (competitions.get(i).equals(competitions.get(j))) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnkoh": 134
    }
  },
  {
    "path": "src/main/java/seedu/address/model/competition/exceptions/CompetitionNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "package seedu.address.model.competition.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": " * Signals that the operation is unable to find the specified competition."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "public class CompetitionNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnkoh": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/competition/exceptions/DuplicateCompetitionException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "package seedu.address.model.competition.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": " * Signals that the operation will result in duplicate Competitions."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": " * Competitions are considered duplicates if they have the same identity."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "public class DuplicateCompetitionException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    public DuplicateCompetitionException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "        super(\"Operation would result in duplicate competitions\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnkoh": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/exercise/Exercise.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "package seedu.address.model.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": " * Represents an Exercise category in a {@link seedu.address.model.competition.Competition}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "public class Exercise {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    private final Type type;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    public Exercise(Type type) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    public Type getType() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "     * Returns true if both exercises have the same identity and data fields."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "     * This defines a stronger notion of equality between two exercises."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "        if (!(other instanceof Exercise)) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "        Exercise otherExercise \u003d (Exercise) other;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "        return otherExercise.getType().equals(getType());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnkoh": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/model/exercise/Type.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "package seedu.address.model.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": " * Represents an Exercise\u0027s type."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": " * Guarantees: immutable"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "public enum Type {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    BenchPress,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    Deadlift,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    Squat"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnkoh": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/exercise/UniqueExerciseList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "package seedu.address.model.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "import seedu.address.model.exercise.exceptions.DuplicateExerciseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "import seedu.address.model.exercise.exceptions.ExerciseNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": " * A list of exercises that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": " * A exercise is considered unique by comparing using {@code Exercise#equals(Exercise)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": " *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": " * @see Exercise#equals(Object)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "public class UniqueExerciseList implements Iterable\u003cExercise\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    private final ObservableList\u003cExercise\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    private final ObservableList\u003cExercise\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "     * Returns true if the list contains an equivalent exercise as the given argument."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    public boolean contains(Exercise toCheck) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::equals);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "     * Adds a exercise to the list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "     * The exercise must not already exist in the list."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    public void add(Exercise toAdd) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "            throw new DuplicateExerciseException();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "     * Replaces the exercise {@code target} in the list with {@code editedExercise}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "     * The exercise identity of {@code editedExercise} must not be the same as another existing exercise in the list."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    public void setExercise(Exercise target, Exercise editedExercise) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "        requireAllNonNull(target, editedExercise);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "            throw new ExerciseNotFoundException();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "        if (!target.equals(editedExercise) \u0026\u0026 contains(editedExercise)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "            throw new DuplicateExerciseException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "        internalList.set(index, editedExercise);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "     * Removes the equivalent exercise from the list."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "     * The exercise must exist in the list."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    public void remove(Exercise toRemove) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "            throw new ExerciseNotFoundException();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    public void setExercises(seedu.address.model.exercise.UniqueExerciseList replacement) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "     * Replaces the contents of this list with {@code exercises}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "     * {@code exercises} must not contain duplicate exercises."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    public void setExercises(List\u003cExercise\u003e exercises) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "        requireAllNonNull(exercises);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "        if (!exercisesAreUnique(exercises)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "            throw new DuplicateExerciseException();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "        internalList.setAll(exercises);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    public ObservableList\u003cExercise\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    public Iterator\u003cExercise\u003e iterator() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "                || (other instanceof seedu.address.model.exercise.UniqueExerciseList // instanceof handles nulls"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "                \u0026\u0026 internalList.equals(((seedu.address.model.exercise.UniqueExerciseList) other).internalList));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "     * Returns true if {@code exercises} contains only unique exercises."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    private boolean exercisesAreUnique(List\u003cExercise\u003e exercises) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "        for (int i \u003d 0; i \u003c exercises.size() - 1; i++) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "            for (int j \u003d i + 1; j \u003c exercises.size(); j++) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "                if (exercises.get(i).equals(exercises.get(j))) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnkoh": 133
    }
  },
  {
    "path": "src/main/java/seedu/address/model/exercise/exceptions/DuplicateExerciseException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "package seedu.address.model.exercise.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": " * Signals that the operation will result in duplicate Exercises"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": " * Exercises are considered duplicates if they have the same identity."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "public class DuplicateExerciseException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    public DuplicateExerciseException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "        super(\"Operation would result in duplicate exercises\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnkoh": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/exercise/exceptions/ExerciseNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "package seedu.address.model.exercise.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": " * Signals that the operation is unable to find the specified exercise."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "public class ExerciseNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnkoh": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/participation/Participation.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "belbel98"
        },
        "content": "package seedu.address.model.participation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import seedu.address.model.competition.Competition;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "belbel98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "belbel98"
        },
        "content": " * Represents a {@link Person}\u0027s participation in a {@link Competition}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "belbel98"
        },
        "content": " * Guarantees: immutable; person-competition pair is unique."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "belbel98"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "belbel98"
        },
        "content": "public class Participation {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private final Person person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private final Competition competition;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public Participation(Person person, Competition competition) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        this.competition \u003d competition;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public Person getPerson() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        return person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public Competition getCompetition() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        return competition;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * Returns true if both participations have the same identity and data fields."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * This defines a stronger notion of equality between two participations."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        if (!(other instanceof Participation)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        Participation otherParticipation \u003d (Participation) other;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        return otherParticipation.getPerson().equals(getPerson())"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                \u0026\u0026 otherParticipation.getCompetition().equals(getCompetition());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "belbel98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "belbel98": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/model/participation/UniqueParticipationList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "belbel98"
        },
        "content": "package seedu.address.model.participation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import seedu.address.model.participation.exceptions.DuplicateParticipationException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import seedu.address.model.participation.exceptions.ParticipationNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "belbel98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "belbel98"
        },
        "content": " * A list of participations that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "belbel98"
        },
        "content": " * A participation is considered unique by comparing using {@code Participation#equals(Participation)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "belbel98"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "belbel98"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "belbel98"
        },
        "content": " *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "belbel98"
        },
        "content": " * @see Participation#equals(Object)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "belbel98"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "belbel98"
        },
        "content": "public class UniqueParticipationList implements Iterable\u003cParticipation\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private final ObservableList\u003cParticipation\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private final ObservableList\u003cParticipation\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * Returns true if the list contains an equivalent participation as the given argument."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public boolean contains(Participation toCheck) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::equals);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * Adds a participation to the list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * The participation must not already exist in the list."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public void add(Participation toAdd) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            throw new DuplicateParticipationException();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * Replaces the participation {@code target} in the list with {@code editedParticipation}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * The participation identity of {@code editedParticipation} must"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * not be the same as another existing participation in the list."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public void setParticipation(Participation target, Participation editedParticipation) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        requireAllNonNull(target, editedParticipation);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            throw new ParticipationNotFoundException();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        if (!target.equals(editedParticipation) \u0026\u0026 contains(editedParticipation)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            throw new DuplicateParticipationException();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        internalList.set(index, editedParticipation);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * Removes the equivalent participation from the list."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * The participation must exist in the list."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public void remove(Participation toRemove) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            throw new ParticipationNotFoundException();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public void setParticipations(seedu.address.model.participation.UniqueParticipationList replacement) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * Replaces the contents of this list with {@code participations}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * {@code participations} must not contain duplicate participations."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public void setParticipations(List\u003cParticipation\u003e participations) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        requireAllNonNull(participations);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        if (!participationsAreUnique(participations)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            throw new DuplicateParticipationException();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        internalList.setAll(participations);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public ObservableList\u003cParticipation\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public Iterator\u003cParticipation\u003e iterator() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                || (other instanceof UniqueParticipationList // instanceof handles nulls"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueParticipationList) other).internalList));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * Returns true if {@code participations} contains only unique participations."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private boolean participationsAreUnique(List\u003cParticipation\u003e participations) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        for (int i \u003d 0; i \u003c participations.size() - 1; i++) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            for (int j \u003d i + 1; j \u003c participations.size(); j++) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                if (participations.get(i).equals(participations.get(j))) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "belbel98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "belbel98": 134
    }
  },
  {
    "path": "src/main/java/seedu/address/model/participation/exceptions/DuplicateParticipationException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "belbel98"
        },
        "content": "package seedu.address.model.participation.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "belbel98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "belbel98"
        },
        "content": " * Signals that the operation will result in duplicate Participation"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "belbel98"
        },
        "content": " * Exercises are considered duplicates if they have the same identity."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "belbel98"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "belbel98"
        },
        "content": "public class DuplicateParticipationException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public DuplicateParticipationException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        super(\"Operation would result in duplicate participations\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "belbel98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "belbel98": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/participation/exceptions/ParticipationNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "belbel98"
        },
        "content": "package seedu.address.model.participation.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "belbel98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "belbel98"
        },
        "content": " * Signals that the operation is unable to find the specified participation."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "belbel98"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "belbel98"
        },
        "content": "public class ParticipationNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "belbel98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "belbel98": 7
    }
  }
]
