[
  {
    "path": "README.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "\u003d Sugar Mummy"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "https://travis-ci.com/AY1920S1-CS2103-T16-1/main[image:https://travis-ci.com/AY1920S1-CS2103-T16-1/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "SugarMummy aims to help type II diabetes patients to live more healthily, conveniently, and happily."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "It is a free software with useful functions:"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "* Data tracker for various data types (blood sugar levels,  diets,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "exercise, clinic appointments, medical finance and so on!)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "* Easy-to-use reminder and calendar"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "* Personalized user experience and bio encouragements"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "* Weekly and Monthly summary for your activities and health level"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "* Customized recommendations for food and fun quizzes about"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "healthy dieting"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "\u003d\u003d Getting Started"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "\u003d\u003d\u003d prerequisites"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "Please ensure you have Java 11 or above installed in your Computer"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "\u003d\u003d\u003d Installing"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "Download the latest `sugarmummy.jar` link:https://github.com/AY1920S1-CS2103-T16-1/main/releases[here]."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ". Copy the file to the folder you want to use as the home folder for data records."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ". Double-click the file to start the app."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "* This project is adapted from AddressBook-Level3 project created by SE-EDU initiative at https://se-education.org"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://openjfx.io/[JavaFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 27,
      "-": 25
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveName \u003d \u0027addressbook.jar\u0027"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-name\u0027: \u0027AddressBook-Level3\u0027,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/se-edu/addressbook-level3\u0027,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "whneo97"
        },
        "content": "allprojects {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    gradle.projectsEvaluated {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        tasks.withType(JavaCompile) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            options.compilerArgs \u003c\u003c \"-Xlint:unchecked\" \u003c\u003c \"-Xlint:deprecation\""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 2,
      "-": 155,
      "whneo97": 8
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "SugarMummy was developed by the https://github.com/AY1920S1-CS2103-T16-1[CS2103-T16-1] team. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "\u003d\u003d\u003d Stephen Chua Rong Zhi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "image::scwaterbear.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "{empty}[https://github.com/scwaterbear[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "Responsibilities: Data logging"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "\u003d\u003d\u003d Jiang Yuxin"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "image::jyx11011.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "{empty}[https://github.com/jyx11011[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "Responsibilities: Calendar and reminder"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "\u003d\u003d\u003d Neo Weihong"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "image::whneo97.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "{empty}[https://github.com/whneo97[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "Responsibilities: Personalised user experience"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "\u003d\u003d\u003d Chen Xi"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "image::chen-xi-cx.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "{empty}[https://github.com/chen-xi-cx[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "Responsibilities: Weekly summary and data analysis"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "\u003d\u003d\u003d Zhang Xiaoyu"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "image::zhanghuafan.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "{empty}[https://github.com/ZhangHuafan[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "Responsibilities: Education and quiz"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 25,
      "-": 32
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://https://github.com/AY1920S1-CS2103-T16-1/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": "* *Email us* : You can also reach any of our project developers at"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": "** Chen Xi: e0031241@u.nus.edu"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": "** Jiang Yuxin: jiangyuxin@u.nus.edu"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": "** Neo Weihong: neo_weihong@u.nus.edu.sg"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": "** Stephen Chua Rong Zhi: stephenchua@u.nus.edu"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": "** Zhang Xiaoyu: e0261883@u.nus.edu"
      }
    ],
    "authorContributionMap": {
      "-": 5,
      "whneo97": 8
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "\u003d Sugar Mummy - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level3/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "By: `AY1920S1-CS2103-T16-1`      Since: `Oct 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cSettingUp#, here\u003e\u003e."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureDiagram.png[]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "The `.puml` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the \u003c\u003cUsingPlantUml#, Using PlantUML guide\u003e\u003e to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has two classes called link:{repoURL}/src/main/java/seedu/address/Main.java[`Main`] and link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureSequenceDiagram.png[]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ".  `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeleteSequenceDiagram.png[]"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[]"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the Address Book data."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `Address Book`, which `Person` can reference. This would allow `Address Book` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "image:BetterModelClassDiagram.png[]"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[]"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the Address Book data in json format and read it back."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Undo/Redo feature"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Proposed Implementation"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedAddressBook`."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` -- Saves the current address book state in its history."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` -- Restores the previous address book state from its history."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` -- Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState0.png[]"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState1.png[]"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "Step 3. The user executes `add n/David ...` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState2.png[]"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState3.png[]"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial address book state, then there are no previous address book states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoSequenceDiagram.png[]"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone address book states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState4.png[]"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/David ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState5.png[]"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "image::CommitActivityDiagram.png[]"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of address book states."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedAddressBook`."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Data Encryption"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data encryption feature will be implemented}_"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDocumentation#, here\u003e\u003e."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cTesting#, here\u003e\u003e."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDevOps#, here\u003e\u003e."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "* diagnosed with type 2 diabetes"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "* consults a professional health practitioner"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "* has a need to manage a significant number of health-related records and tasks"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "* is diligent in immediately recording events but subsequently forgets events"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "* wants to gain a deeper understanding of his/her condition"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "* is struggling with obesity and lack of sleep"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "* is motivated by challenges"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "* enjoys a personalised experience"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "* needs to know his/her effectiveness in managing diabetes at a glance"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "* reads and writes competently in English"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "*Value proposition*: convenient all-in-one app for effectively managing diabetes that is faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "whneo97"
        },
        "content": "[width\u003d\"90%\",cols\u003d\"20%,\u003c25%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "whneo97"
        },
        "content": "|`* * *` |diabetic patient who has different options on medical care |know exactly how much I am spending on medication and consultation |know which hospitals to seek medical care from"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "whneo97"
        },
        "content": "|`* * *` |very busy diabetic |use a flexible calendar system that can account for updates | easily make changes to appointments that I have to change often due to other commitments"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "whneo97"
        },
        "content": "|`* * *` |diabetic |keep track of my medical expenses |better manage my finance"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "whneo97"
        },
        "content": "|`* * *` |person who likes numbers |see summary statistics |better track my progress"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "whneo97"
        },
        "content": "|`* * *` |diabetic |get an overview of my dieting/exercising data regularly |save time because I am working 9-5"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "whneo97"
        },
        "content": "|`* * *` |forgetful diabetic |be reminded to attend my medical appointments |know how well my existing measures work"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "whneo97"
        },
        "content": "|`* * *` |patient who has recently been diagnosed of diabetes |be informed when I eat food with high sugar content |live better and reduce the chances of further health deterioration"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "whneo97"
        },
        "content": "|`* * *` |lazy diabetic |have reminders for exercising |force myself to work out."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "whneo97"
        },
        "content": "|`* * *` |busy diabetic |be reminded on when to refill / stock up on insulin|"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "whneo97"
        },
        "content": "|`* * *` |diabetic |see graphic data summary |minimise the need to read long paragraphs"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "whneo97"
        },
        "content": "|`* * *` |diabetic patient who has just been recently diagnosed |have some motivation and reminders on my diet |reduce my struggles of cutting down on meals or even exercise that is really tough for me"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "whneo97"
        },
        "content": "|`* * *` |diabetic |automatically calculate my daily sugar/carb intake |eliminate the trouble to search for the levels of sugar content in the food I eat everyday."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "whneo97"
        },
        "content": "|`* * *` |diabetic who values my punctuality |adhere to my appointment timings |uphold my principles and take responsibility of my own health by not missing my appointments."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "whneo97"
        },
        "content": "|`* * *` |diabetic |reminded to take my insulin regularly|"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "whneo97"
        },
        "content": "|`* * *` |diabetic |be able to track my sugar levels|"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "whneo97"
        },
        "content": "|`* * *` |task-oriented diabetic patient |have a goal to work towards or a challenge to work on everyday |have a sense of direction in what I can do to improve my health"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "whneo97"
        },
        "content": "|`* *` |caretaker of an elderly patient with diabetes whose family members are busy working |reliable app to keep track of all the patients\u0027 activities |can answer to the family members who have entrusted unto me this responsibility of care"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "whneo97"
        },
        "content": "|`* *` |busy person |be able to easily sort and prioritize my tasks |better manage my time"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "whneo97"
        },
        "content": "|`* *` |diabetic patient who is often being referred to new doctors at different specialist clinics every now and then |be able to be able to export all my records and activities at once |rule out the possibility of missing any information during the registration process at a new clinic/ hospital I am visiting"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "whneo97"
        },
        "content": "|`* *` |family member of a diabetic |prioritize my tasks |be immediately contactable if my family member has an emergency situation that requires urgent medical attention"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "whneo97"
        },
        "content": "|`* *` |diabetic |have a customisable app with avatars and different backgrounds |enjoy a personalised experience"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "whneo97"
        },
        "content": "|`* *` |lazy and obese individual |be motivated constantly to exercise |stop procrastinating"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "whneo97"
        },
        "content": "|`* *` |forgetful diabetics patient |have a record of my doctors\u0027 advice for each medical appointment and prescription directions |better understand the steps that I can take to improve my condition until the next consultation"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "whneo97"
        },
        "content": "|`* *` |achievement-oriented diabetic | view the achievements and progress I have made on food intake |remain motivated to keep my streak on good habits going"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "whneo97"
        },
        "content": "|`* *` |paranoid diabetic who values privacy |secure/encrypt my health data and other private contact details |protect my data"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "whneo97"
        },
        "content": "|`* *` |diabetic patient with a family |have a user-friendly app that helps me manage my medical data and appointments on my own |free the burden I have on my family"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "whneo97"
        },
        "content": "|`* *` |diabetic patient with a family |have a user-friendly app with natural commands that helps me manage my medical data and appointments on my own |free the burden I have on my family"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "whneo97"
        },
        "content": "|`*` |diabetic patient in a community of diabetic patients |have a standardised means of comparing our activities via a social network | learn from my peers, encourage and be encouraged through this difficult journey."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "whneo97"
        },
        "content": "|`*` |careless user  |undo my most recent actions |easily make necessary amendments and input the correct commands"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "whneo97"
        },
        "content": "|`*` |a diabetic patient who has many medical receipts - and is not very good at mathematics |have a simple calculator that is always easily accessible |instantly calculate all my medical costs when needed"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "whneo97"
        },
        "content": "|`*` |an obese working adult at high risk of diabetes |start monitoring my diet |minimise my risk of having diabetes"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "whneo97"
        },
        "content": "|`*` |medical consultant |export my patient\u0027s health data  |save my time"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "whneo97"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "(For all use cases below, the *System* is the `Sugar Mummy` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "\u003d\u003d\u003d Use case: Add blood sugar record"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "1.  User requests to add a blood sugar record"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "2.  System adds the blood sugar record"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "+"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "* 1a. The record is incomplete or passed invalid arguments."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "+"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "** 1a1. System shows an error message."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "+"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "\u003d\u003d\u003d Use case: Schedule a medical appointment"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "1.  User requests to add a medical appointment"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "2.  System adds the medical appointment"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "3.  System notifies user of upcoming medical appointment beforehand"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "4.  User acknowledges the notification and attends medical appointment on schedule"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "+"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "* 1a. The appointment is incomplete or passed invalid arguments."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "+"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "** 1a1. System shows an error message."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "+"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "+"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "* 3a. User snoozes the notification."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "+"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "** 3a1. System waits for snooze time to elapse."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "+"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "Use case resumes at step 3."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "\u003d\u003d\u003d Use case: Delete blood sugar record"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "1.  User requests list of blood sugar records"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "2.  System shows a list of blood sugar records"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "3.  User requests to delete a specific blood sugar record in the list"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "4.  System deletes the blood sugar record"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "** 3a1. System shows an error message."
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "\u003d\u003d\u003d Use case: Recommend diabetes-friendly food"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "1.  User requests for a diabetes-friendly food item"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "2.  System shows a diabetes-friendly food item"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "3.  User likes the recommendation"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "+"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "* 3a. User dislikes the recommendation."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "+"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "** 3a1. User requests for another diabetes-friendly food item"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "+"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "\u003d\u003d\u003d Use case: Update blood sugar record"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "1.  User requests list of blood sugar records"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "2.  System shows a list of blood sugar records"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "3.  User requests to update a specific blood sugar record in the list"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "4.  System updates the blood sugar record"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "** 3a1. System shows an error message."
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "* 3b. The record is incomplete or passed invalid arguments."
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "+"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "** 3b1. System shows an error message."
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "+"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ".  Should be able to hold up to 1000 health-related records and tasks without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ".  Third-party frameworks/libraries used should be free, open-source, and have permissive license terms, should not require any installation by the user of this software, and approved by teaching team."
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ".  Should work without requiring an installer."
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ".  The software should not depend on your own remote server"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": "*Product Name*"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": "Author: ..."
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": ". Deleting a person while all persons are listed"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "-": 419,
      "scwaterbear": 101,
      "whneo97": 60
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "\u003d SugarMummy - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ":toclevels: 5"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103-T16-1/main"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "By: `Team CS2103-T16-1`      Since: `Sep 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "Do you feel it difficult to keep the right diets for type II diabetes?"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "Do you want to manage your hectic schedule?"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "Do you want to have a better overview of your health data?"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "Do you want to move to a healthier lifestyle?"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "If your answer is yes, then SugarMummy is perfect for you!"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "SugarMummy is a lifestyle tracker and planner that aims to combat Type II diabetes by encouraging users to keep a healthy lifestyle."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "Moreover, being a computer app with Command Line Interface, SugarMummy is optimized for fast typers who has access to a computer most of the time."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "Hope following features will benefit you and enjoy!"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "* Data tracker for various data types (blood sugar levels, diets, exercise, clinic appointments, medical finance and so on!)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "* Easy-to-use reminder and calendar"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "* Personalized user experience and bio encouragements"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "* Weekly and Monthly summary for your activities and health level"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "* Customized recommendations for food and fun quizzes about healthy dieting"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ". Download the latest `sugarmummy.jar` link:https://github.com/AY1920S1-CS2103-T16-1/main/releases[here]."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ". Copy the file to the folder you want to use as the home folder for data records."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ". Double-click the file to start the app."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ". Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ". Some example commands you can try:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "* **`add`**`r/bloodsugar v/10 t/now` : adds a `bloodsugar` record to the app."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "* **`delete`**`3` : deletes the 3rd record shown in the current list"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "* *`exit`* : exits the app"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ". Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "* Items in square brackets are optional e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "* Parameters can be in any order e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "\u003d\u003d\u003d DATA LOG"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "\u003d\u003d\u003d\u003d Add a data entry to the diabetes tracker app: `add`"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "Format: `add r/RECORD_TYPE v/VALUE t/TIME [t/TIME_END]`"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "\u003d\u003d\u003d\u003d Show a list of all data entries in the diabetes tracker app: `list`"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "Format: `list [r/RECORD_TYPE] ...`"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "If a specific RECORD_TYPE is provided, it will list the data entries that are of RECORD_TYPE. If more than 1 RECORD_TYPE is provided, it will list all data entries of the requested types."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "Otherwise, it lists all types of recent data entries."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "\u003d\u003d\u003d\u003d Edit an existing entry in the diabetes tracker app: `edit`"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "Format: `edit INDEX [v/VALUE] [t/TIME] [t/TIME_END]`"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "Edits the entry at the specified INDEX. The index refers to the index number shown in the displayed entries list."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "The index must be a positive integer."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "Existing values will be updated to the input values."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "\u003d\u003d\u003d\u003d Deletes a specified data entry from the diabetes tracker app: `delete`"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "Index must be a positive integer"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "The index refers to the index number shown in the displayed entries list"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "\u003d\u003d\u003d CALENDAR AND REMINDER"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "\u003d\u003d\u003d\u003d Add a reminder: `reminder`"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "Format: `reminder DESCRIPTION t/TIME [t/TIME]... [rp/repetition] [v/venue] [p/people]`"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "Add a reminder at a specific time with possible detail information of other time, repetition, venue(e.g. hospital) ,people(e.g. doctor) and sound."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "\u003d\u003d\u003d\u003d Add an event: `event`"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "Format: `event TITLE [DESCRIPTION] t/TIME [t/END_TIME] [tp/TIME_PERIOD]  [v/venue] [p/people]`"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "Add an event with starting time and optional ending time."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "Set a reminder some time before the event with possible detail information of venue(e.g. hospital) ,people(e.g. doctor) and sound."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "\u003d\u003d\u003d\u003d Add a task: `task`"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "Format: `task TITLE [DESCRIPTION] t/TIME [t/END_TIME] [tp/TIME_PERIOD] [tg/TARGET]`"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "Add a task with starting time and optional ending time."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "Set a reminder some time before the task begins and a target for the task."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "\u003d\u003d\u003d\u003d Snooze reminder: `snooze`"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "Format: `snooze [tp/TIME_PERIOD]`"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "Silence the current reminder and activate it after a time period."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "\u003d\u003d\u003d\u003d Complete a task: `complete`"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "Format: `complete [INDEX]... [t/TIME]`"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "Mark all the reminders before now as completed if no argument provided."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "Otherwise, mark only those tasks with indices provided or before the specific time as completed."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "\u003d\u003d\u003d\u003d Set time zone: `timezone`"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "Format: `timezone tz/TIME_ZONE [t/TIME] [t/TIME_END]`"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "Set the time zone of the application permanently or in any time interval(e.g. For travelling)."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "\u003d\u003d\u003d\u003d Search for entries in calendar: `search`"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "Format: `search [KEYWORD] [t/TIME] [t/END_TIME] [tp/TYPE] [v/VENUE] [p/PEOPLE]`"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "Search for all entries by providing keyword, time interval, type, venue or people."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "\u003d\u003d\u003d\u003d Delete an entry in calendar `[coming in v2.0]`"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "Delete an event that you do not want to keep track anymore."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "\u003d\u003d\u003d PERSONALISED USER EXPERIENCE"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "\u003d\u003d\u003d\u003d Show a list of all achievements the user has attained: `achievement`"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "Format: `achievement`"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "Display the current ranking of the user (i.e. Bronze III, Bronze II, Bronze I, Silver III, Silver II, Silver I, Gold...Platinum...Diamond) followed by milestone achievements acquired by the user."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "\u003d\u003d\u003d\u003d Shows a page displaying the user profile of the user: `bio`"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "Format: `bio`"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "Display a page containing user information such as the user’s profile picture, name, nric, gender, date of birth, contact number, address and other biography information that the user would like to include."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "Includes an icon used to represent the user based on his/ her BMI."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "\u003d\u003d\u003d\u003d Adds a biography for the user using specified fields: `addbio`"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "Format: `addbio n/NAME [nric/NRIC] [g/GENDER] [dob/DATE_OF_BIRTH] p/CONTACT_NUMBER e/EMERGENCY_CONTACT m/MEDICAL_CONDITION [a/ADDRESS] [dp/PROFILE_PICTURE_PATH] [o/OTHERS]`"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "Profile picture of the user is set using a given file path."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "If the file that is given is invalid, the user is shown an error message."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "Name, contact number, emergency contact number and medical condition are compulsory fields. (if a user of this app happens to have no medical condition, he / she may input NIL)"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "\u003d\u003d\u003d\u003d Delete biography `[coming in v2.0]`"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "\u003d\u003d\u003d\u003d Edit a biography for the user using specified fields: `editbio`"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "Format: `editbio [n/NAME] [nric/NRIC] [g/GENDER] [dob/DATE_OF_BIRTH] [p/CONTACT_NUMBER] [e/EMERGENCY_CONTACT] [m/MEDICAL_CONDITION] [a/ADDRESS] [dp/PROFILE_PICTURE_PATH] [o/OTHERS]`"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "Profile picture of the user is set using a given file path."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "If the file that is given is invalid, the user is shown an error message."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "If no parameters are set, the program displays a message suggesting the user to set biography information using the specified fields."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "\u003d\u003d\u003d\u003d Sets the background picture using a specified file path: `bg`"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "Format: `bg p/PATH`"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "If the file that is given is invalid, the user is shown an error message."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "\u003d\u003d\u003d\u003d Sets the font color of the text: `fontcolor`"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "Format: `fontcolor c/COLOUR`"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "Sets the font to a colour specified by the user (eg. yellow, blue 00FF00)"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "\u003d\u003d\u003d\u003d Displays the daily motivation message of the day: `dailymsg`"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "Format: `dailymsg`"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "\u003d\u003d\u003d\u003d Personalized avatar `[coming in v2.0]`"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "User can customize his or her own avatar and the avatar will have body shapes according to user BMI."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "This helps to motivate them to have a healthy BMI."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "\u003d\u003d\u003d DATA ANALYSIS"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "\u003d\u003d\u003d\u003d Display the daily/weekly/monthly average in a graph: `average`"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "Format: `average a/AVERAGE_TYPE r/Record_TYPE [n/COUNT]`"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "AVERAGE_TYPE is either day/week/month."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "Displays a graph of the AVERAGE_TYPE average value of a particular RECORD_TYPE. COUNT is an integer value."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "If COUNT is given, show only the latest COUNT number of average values."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "Else, COUNT is set to 5 and show only latest 5 average values by default."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "\u003d\u003d\u003d\u003d Display interesting statistics: `summary`"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "Examples of statistics: minimum, maximum, average, number of dangerously high blood sugar level, weekly quiz points etc"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "in suitable graph"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "Format: `summary r/RECORD_TYPE [d/START_DATE]`"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "If START_DATE is given, statistics from START_DATE to the current date will be retrieved."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "Else, statistics will be based on all data."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "\u003d\u003d\u003d\u003d Export summary of all medical records into pdf: `export`"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "Format: `export [d/START_DATE]`"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "If START_DATE is given, summary from START_DATE to the current date will be exported."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "Else, summary of all data will be exported."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "\u003d\u003d\u003d EDUCATION AND QUIZ"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "\u003d\u003d\u003d\u003d Recommending food: `recmf`"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "Recommends a list of medically suggested foods for type II diabetes patients."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "The user can specify flags:"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "`-b`: breakfast recommendations"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "`-l`: lunch recommendations"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "`-d`: dinner recommendations"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "`-f`: fruit recommendations"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "`-v`: vegetable recommendations"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "With specified one or more FOOD_ITEM, the user will only view recommendations match at least one item."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "However, if any food item is considered dangerous for type II diabetes patients, a warning will be shown."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "(case-insensitive)"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "Format: `recmf [-b] [-l] [-d] [-f] [-v] [FOOD]...`"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "`recm -b strawberries`"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "`recm -b -l -d`"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "\u003d\u003d\u003d\u003d Recommending exercise: `recme`"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "Recommends a list of medically suggested exercises for type II diabetes patients."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "Format: `recme`"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "\u003d\u003d\u003d\u003d Adding new food items : `put`"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "Adds a new food time into certain category."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "Calorie and glycemic can be attached followed by -i flag."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "Otherwise, another prompt will be shown to ask for these two values."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "Format: `put FOOD[, FOOD]...[-i CALORIE GI] in CATEGORY`"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "`put guava -i 68 20, green apple -i 52 38 in fruits`"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "`put guava in fruits`"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "\u003d\u003d\u003d\u003d Disliking certain foods: `dislike`"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "Dislikes certain foods so that those foods will no longer be shown on the recommendations. (case-insensitive)"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "Format: `dislike FOOD[, FOOD]...`"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "Example: `dislike watermelon, chicken`"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "\u003d\u003d\u003d\u003d Playing flash cards: `game`"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "Shows an interactive page for user to play the flash card game."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "The user will win certain points if answering a question correctly."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "Format: `game`"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "During the game session, the user is able to:"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ". Selecting the correct answer: `\u003calphabet\u003e`"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "* Answers the multiple-choice question."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "If the answer is correct, the user will be awarded a few points."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "If the answer is wrong, multiple, or not within the choice range, a few points will be deducted and the correct answer"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "will be revealed."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "* Format: `\u003calphabet\u003e`"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ". Skipping a certain question: `skip`"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "* Skips a certain question and moves to the next question."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "* Format: `skip`"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ". Exiting the game: `exit`"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "* Exits the game and go back to normal page"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "* Format: `exit`"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "\u003d\u003d\u003d Autocomplete Command"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "SugarMummy will recommend list of possible commands that can be add on to user current input."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "\u003d\u003d Features Coming in v2.0"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "\u003d\u003d\u003d Clearing all entries: `clear all`"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "Clears all recorded data in SugarMummy."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "\u003d\u003d\u003d Encrypting data files: `enc [KEY]`"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "The user can optionally provide a key to encrypt all the data. Afterwards, all the stored user input can only be viewed"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "with the user-defined key."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "\u003d\u003d\u003d Detailing workout schedule"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "User can enter details of a workout schedule. +"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "For example: Do exercise A for 10 minutes then switch to exercise B for 5 minutes."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "\u003d\u003d\u003d Timing Workout"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "Displays workout instructions and a timer on screen."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "Screen instruction changes when the time for that particular exercise is up."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "Time required for each exercise is dictated by stored workout schedule."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "\u003d\u003d\u003d Sharing with community"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "The user is able to interact with others who is using SugarMummy. A community platform will be provided for users to share their daily activities and health tips. This community is expected to help the user obtain encouragements and comforts."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ":hardbreaks:"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "[start\u003d1]"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ". *Achievement*: `achievement`"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ". *Add*: `add r/RECORD_TYPE v/VALUE t/TIME [t/TIME_END]`"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "E.g. `add r/bloodsugar v/10 t/now`"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ". *Add bio* : `addbio n/NAME [nric/NRIC] [g/GENDER] [dob/DATE_OF_BIRTH] p/CONTACT_NUMBER e/EMERGENCY_CONTACT"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "m/MEDICAL_CONDITION [a/ADDRESS] [dp/PROFILE_PICTURE_PATH] [o/OTHERS]`"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "E.g. `addbio n/Bob p/98765432 e/91234567 m/Type II Diabetes`"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ". *Average*: `average a/AVERAGE_TYPE r/Record_TYPE [n/COUNT]`"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "E.g. `average a/weekly r/bloodsugar n/3`"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ". *Bio*: `bio`"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ". *Bg*: `bg p/PATH`"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "E.g. `bg p//Users/Bob/Pictures/bg.jpg`"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ". *Complete*: `complete [INDEX]... [t/TIME]`"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "E.g. `complete t/today`"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ". *Dailymsg*: `dailymsg`"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ". *Delete*: `delete INDEX`"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "E.g. `delete 2`"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ". *Edit*: `edit INDEX [v/VALUE] [t/TIME] [t/TIME_END]`"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "E.g. `edit 1 v/15 t/now`"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ". *Export*: `export [d/START_DATE]`"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "E.g `export d/01.09.2019`"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ". *Event*: `event TITLE [DESCRIPTION] t/TIME [t/END_TIME] [tp/TIME_PERIOD]  [v/venue] [p/people]`"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "E.g. `event appointment t/1400 20/12/2019 v/NUH p/Dr Lim`"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ". *Edit bio*: `edit [n/NAME] [nric/NRIC] [g/GENDER] [dob/DATE_OF_BIRTH] [p/CONTACT_NUMBER] [e/EMERGENCY_CONTACT]"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "[m/MEDICAL_CONDITION] [a/ADDRESS] [dp/PROFILE_PICTURE_PATH] [o/OTHERS]`"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "E.g. `edit g/Male dp//Users/Bob/Pictures/dp.jpg`"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "E.g. `edit dp/C:\\\\Users\\\\Bob\\\\Pictures\\\\dp.jpg`"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ". *Font color*: `fontcolor c/COLOUR`"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "E.g. `fontcolor yellow`"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "E.g. `fontcolor 00FF00`"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ". *List*: `list [r/RECORD_TYPE] ...`"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "E.g. `list r/bloodsugar r/sleep r/food`"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ". *Reminder*: `reminder DESCRIPTION t/TIME [t/TIME]... [rp/repetition] [v/venue] [p/people]`"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "E.g. `reminder insulin injection t/13:00 rp/daily`"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ". *Search*: `search [KEYWORD] [t/TIME] [t/END_TIME] [tp/TYPE] [v/VENUE] [p/PEOPLE]`"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "E.g. `search tp/event v/NUH`"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ". *Snooze*: `snooze [tp/TIME_PERIOD]`"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "E.g `snooze 30min`"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ". *Summary*: `summary r/RECORD_TYPE [d/START_DATE]`"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "E.g `summary r/bloodsugar d/01.09.2019`"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ". *Task*: `task TITLE [DESCRIPTION] t/TIME [t/END_TIME] [tp/TIME_PERIOD] [tg/TARGET]`"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "E.g `task Running running for 40 minutes t/15:00 tp/10 min tg/200 calories`"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ". *Timezone*: `timezone tz/TIME_ZONE [t/TIME] [t/TIME_END]`"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "E.g `timezone tz/GMT+8`"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "[qanda]"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "How should I save my data?::"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "SugarMummy data are saved in the hard disk automatically after any command that changes the data. There is no need to save manually."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 78,
      "jyx11011": 55,
      "-": 88,
      "chen-xi-cx": 188
    }
  },
  {
    "path": "src/main/java/seedu/address/Main.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * This is a workaround for the following error when MainApp is made the entry point of the application:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Error: JavaFX runtime components are missing, and are required to run this application"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * The reason is that MainApp extends Application. In that case, the LauncherHelper will check for the javafx.graphics"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * module to be present as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t find the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * javafx.graphics module, and so the launch is aborted."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * By having a separate main class (Main) that doesn\u0027t extend Application to be the entry point of the application, we"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * avoid this issue."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Application.launch(MainApp.class, args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 10,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import seedu.address.model.RecordBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.address.storage.JsonFoodListStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.sgm.model.food.UniqueFoodList;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        JsonFoodListStorage jsonFoodListStorage \u003d new JsonFoodListStorage(userPrefs.getFoodListFilePath());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage, jsonFoodListStorage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        Model model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        logic \u003d new LogicManager(this.model, storage);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e The"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * data from the sample address book will be used instead if {@code storage}\u0027s address book is not found, or an"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook initialData;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        Optional\u003cUniqueFoodList\u003e foodListOptional;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        UniqueFoodList initialFoodListData;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        RecordBook recordBook \u003d new RecordBook();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            foodListOptional \u003d storage.readFoodList();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            if (addressBookOptional.isEmpty()) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            if (foodListOptional.isEmpty()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "                logger.info(\"Food list data file not found. Will be starting with a sample Foodlist\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            initialFoodListData \u003d foodListOptional.orElseGet(SampleDataUtil::getSampleFoodList);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            initialFoodListData \u003d new UniqueFoodList();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            initialFoodListData \u003d new UniqueFoodList();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return new ModelManager(initialData, userPrefs, initialFoodListData, recordBook);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e The default file path {@code"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Config#DEFAULT_CONFIG_FILE} will be used instead if {@code configFilePath} is null."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Using default config properties\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path, or a new {@code UserPrefs}"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * with default configuration if errors occur when reading from the file."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Using default user prefs\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 25,
      "-": 168,
      "scwaterbear": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/GuiSettings.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * A Serializable class that contains the GUI settings. Guarantees: immutable."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 600;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 740;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 1,
      "-": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/LogsCenter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level Named {@link Logger}s can be obtained from"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * this class\u003cbr\u003e These loggers have been configured to output messages to the console and a {@code .log} file by"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * default, at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log file"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOG_FILE \u003d \"addressbook.log\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object) Loggers obtained *AFTER* this"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * initialization will have their logging level changed\u003cbr\u003e Logging levels for existing loggers will only be updated"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * if the logger with the same name is requested again from the LogsCenter."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 10,
      "-": 99
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Oops! Sorry, SugarMummy doesn\u0027t understand what this \""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"command means :(\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Oops! The command you\u0027ve entered appears to be in \""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"an invalid format. \\n%1$s\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    public static final String MESSAGE_INVALID_PARAMETER \u003d \"Please enter correct input for %2$s! \\n%1$s\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 11,
      "whneo97": 4,
      "chen-xi-cx": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Version.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "                versionMatcher.group(4) !\u003d null);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 2,
      "-": 112
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/index/Index.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what base"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * the other component is using for its index. However, after receiving the {@code Index}, that component can convert it"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 5,
      "-": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/CollectionUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @see #requireAllNonNull(Collection)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 3,
      "-": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/FileUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)}, otherwise"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Writes given string to a file. Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 5,
      "-": 79
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/JsonUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found. If any"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath                   cannot be null."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Saves the Json object to the specified file. Overwrites existing file if it exists, creates a new file if it"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * doesn\u0027t."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e      The generic type to create an instance of"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 8,
      "-": 138
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/StringUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}. Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word     cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * \u003cbr\u003e Will return false for any other non-null string input e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 6,
      "-": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.address.ui.DisplayPaneType;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.sgm.model.food.Food;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException   If an error occurs during parsing."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Returns the {@code DisplayPaneType} for updating the main pane based on different commands."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    DisplayPaneType getDisplayPaneType();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the AddressBook."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.model.Model#getAddressBook()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Returns an unmodifiable view of the filtered list of persons"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Returns the a list of foods."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @see seedu.address.model.Model#getFoodList()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    ObservableList\u003cFood\u003e getFoodList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Returns an unmodifiable view of the filtered list of foods"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    ObservableList\u003cFood\u003e getFilterFoodList();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 24,
      "-": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.AddressBookParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.address.ui.DisplayPaneType;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.sgm.model.food.Food;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser addressBookParser;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private DisplayPaneType displayPaneType;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookParser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        displayPaneType \u003d command.getDisplayPaneType();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            storage.saveFoodList(model.getUniqueFoodListObject());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public DisplayPaneType getDisplayPaneType() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return displayPaneType;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBook();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public ObservableList\u003cFood\u003e getFoodList() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return model.getFoodList();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public ObservableList\u003cFood\u003e getFilterFoodList() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return model.getFilterFoodList();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBookFilePath();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 20,
      "-": 78
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AchvmCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.address.ui.DisplayPaneType;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Displays information on user\u0027s biography."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": "public class AchvmCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"achvm\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Displays information on user\u0027s achievements.\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static final String SHOWING_ACHVM_MESSAGE \u003d \"Here\u0027re your achievements so far. Keep up the good work!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return new CommandResult(SHOWING_ACHVM_MESSAGE, false, false, true, false);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public DisplayPaneType getDisplayPaneType() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return DisplayPaneType.ACHVM;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 6,
      "whneo97": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import seedu.address.model.record.Record;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the address book. \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"ADDRESS \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"friends \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"owesMoney\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New record added: %1$s\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_RECORD \u003d \"This record already exists in the record book\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    private final Record toAdd;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public AddCommand(Record record) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        requireNonNull(record);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        toAdd \u003d record;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        if (model.hasRecord(toAdd)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_RECORD);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        model.addRecord(toAdd);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd.toString()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 56,
      "scwaterbear": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddFoodCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CALORIE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FOOD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FOOD_TYPE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GI;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SUGAR;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.address.ui.DisplayPaneType;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.sgm.model.food.Food;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * Adds a food to the food recommendation list."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "public class AddFoodCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addfood\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a food to the food recommendation list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            + \"Parameters: \" + PREFIX_FOOD + \"FOOD_NAME \" + PREFIX_FOOD_TYPE + \"FOOD_TYPE \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            + PREFIX_CALORIE + \"CALORIE \" + PREFIX_GI + \"GI \" + PREFIX_SUGAR + \"SUGAR \" + PREFIX_FAT + \"FAT\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            + \"Food type can be one of the following:\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            + \"nsv: non-starchy vegetables; sv: starchy vegetables; f: fruit; p: protein; s: snack; m: meal\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            + \"Calorie(Cal), GI, sugar(g), and fat(g) are all numbers.\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            + PREFIX_FOOD + \"Cherry \" + PREFIX_FOOD_TYPE + \"f \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            + PREFIX_CALORIE + \"63 \" + PREFIX_GI + \"20 \" + PREFIX_SUGAR + \"12 \" + PREFIX_FAT + \"0\\n\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New food added: %1$s\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_FOOD \u003d \"This food already exists\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private final Food toAdd;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Creates an AddFoodCommand to add the specified {@code food}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public AddFoodCommand(Food food) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        requireNonNull(food);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        toAdd \u003d food;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        if (model.hasFood(toAdd)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_FOOD);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        model.addFood(toAdd);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public DisplayPaneType getDisplayPaneType() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return DisplayPaneType.RECM_FOOD;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "                || (other instanceof AddFoodCommand"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddFoodCommand) other).toAdd));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AverageCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import java.time.temporal.TemporalAdjuster;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import java.time.temporal.TemporalAdjusters;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import java.util.StringJoiner;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import seedu.address.logic.commands.exceptions.AverageType;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import seedu.address.model.calendar.DateTime;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import seedu.address.model.record.RecordType;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": " * Shows daily/weekly/monthly average of different record types."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "public class AverageCommand extends Command {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"average\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows daily/weekly/monthly average of different \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            + \"record types.\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            + \"Parameters: a/AVERAGE_TYPE rt/RECORD_TYPE [n/COUNT]\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" a/daily r/bloodsugar n/5\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    public static final String MESSAGE_INVALID_COUNT \u003d \"n/COUNT\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    public static final String MESSAGE_INVALID_AVGTYPE \u003d \"a/AVERAGE_TYPE\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    public static final String MESSAGE_INVALID_RECORDTYPE \u003d \"r/RECORD_TYPE\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    public static final String MESSAGE_NO_RECORD \u003d \"Sorry! You do not have any %1$s record.\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    private static final Map\u003cAverageType, TemporalAdjuster\u003e TIMEADJUSTERS \u003d Map.of("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            AverageType.DAILY, TemporalAdjusters.ofDateAdjuster(date -\u003e date),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            AverageType.WEEKLY, TemporalAdjusters.previousOrSame(DayOfWeek.of(1)),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            AverageType.MONTHLY, TemporalAdjusters.firstDayOfMonth()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    );"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    private final AverageType averageType;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    private final RecordType recordType;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    private final int count;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    private final Collection\u003cDummyRecord\u003e recordBook;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    public AverageCommand(AverageType averageType, RecordType recordType, int count) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        requireNonNull(averageType);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        requireNonNull(recordType);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        this.averageType \u003d averageType;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        this.recordType \u003d recordType;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        this.count \u003d count;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        this.recordBook \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        // sample data"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        // TODO: Remove this after integration"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        recordBook.add(new DummyRecord(RecordType.BLOODSUGAR,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "                new DateTime(LocalDate.of(2019, 10, 1), LocalTime.of(12, 24)), 1));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        recordBook.add(new DummyRecord(RecordType.BLOODSUGAR,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "                new DateTime(LocalDate.of(2019, 10, 2), LocalTime.of(12, 24)), 2));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        recordBook.add(new DummyRecord(RecordType.BLOODSUGAR,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "                new DateTime(LocalDate.of(2019, 10, 8), LocalTime.of(12, 24)), 3));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        recordBook.add(new DummyRecord(RecordType.BLOODSUGAR,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "                new DateTime(LocalDate.of(2019, 10, 9), LocalTime.of(12, 24)), 4));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        recordBook.add(new DummyRecord(RecordType.BLOODSUGAR,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "                new DateTime(LocalDate.of(2019, 9, 15), LocalTime.of(12, 24)), 5));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        recordBook.add(new DummyRecord(RecordType.BLOODSUGAR,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "                new DateTime(LocalDate.of(2019, 9, 14), LocalTime.of(12, 24)), 6));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        recordBook.add(new DummyRecord(RecordType.BLOODSUGAR,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "                new DateTime(LocalDate.of(2019, 7, 13), LocalTime.of(12, 24)), 7));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        recordBook.add(new DummyRecord(RecordType.BLOODSUGAR,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "                new DateTime(LocalDate.of(2019, 6, 12), LocalTime.of(12, 24)), 8));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        recordBook.add(new DummyRecord(RecordType.MEDICALEXPENSES,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "                new DateTime(LocalDate.of(2019, 10, 11), LocalTime.of(12, 24)), 9));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        // Remove irrelevant record types"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        Collection\u003cDummyRecord\u003e filteredRecords \u003d recordBook"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "                .stream().filter(ele -\u003e this.recordType.equals(ele.getRecordType()))"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        // Group records according to average type"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        Map\u003cLocalDate, List\u003cDummyRecord\u003e\u003e groupByTimeRecords \u003d filteredRecords.stream()"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "                .collect(Collectors.groupingBy(record -\u003e record.getDateTime()"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "                .getDate().with(TIMEADJUSTERS.get(this.averageType))));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        // Calculate averages for each grouping in groupByTimeRecords"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        Map\u003cLocalDate, Double\u003e averages \u003d groupByTimeRecords.entrySet().stream()"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "                .collect(Collectors.toMap(Map.Entry::getKey, ele -\u003e ele.getValue()"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "                .stream().map(record -\u003e record.getValue()).mapToDouble(Double::doubleValue).average().getAsDouble()));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        // Sort by descending date"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        Map\u003cLocalDate, Double\u003e averagesTreeMap \u003d new TreeMap\u003c\u003e(Collections.reverseOrder());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        averagesTreeMap.putAll(averages);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        StringJoiner result \u003d new StringJoiner(System.lineSeparator());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        averagesTreeMap.entrySet().stream()"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "                .limit(count)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "                .forEach(ele -\u003e result.add(\"average for \" + this.recordType + \" \""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "                + ele.getKey() + \" is \" + ele.getValue()));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        if (result.toString().isEmpty()) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_NO_RECORD, this.recordType));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        return new CommandResult(String.format(result.toString()));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "                || (other instanceof AverageCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "                \u0026\u0026 averageType.equals(((AverageCommand) other).averageType) // state check"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "                \u0026\u0026 recordType.equals(((AverageCommand) other).recordType)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "                \u0026\u0026 count \u003d\u003d ((AverageCommand) other).count);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * A dummy class to replace actual implementation of Record class"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    public static class DummyRecord {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        private final RecordType recordType;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        private final DateTime dateTime;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        private final double value;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        public DummyRecord(RecordType recordType, DateTime dateTime, double value) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            this.recordType \u003d recordType;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            this.value \u003d value;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        public RecordType getRecordType() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            return recordType;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        public DateTime getDateTime() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            return dateTime;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        public double getValue() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            return value;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chen-xi-cx": 162
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/BioCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.address.ui.DisplayPaneType;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Displays information on user\u0027s biography."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": "public class BioCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"bio\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Displays information on user\u0027s biography.\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static final String SHOWING_BIO_MESSAGE \u003d \"Here\u0027s your biography information I\u0027ve displayed on this \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"window.\\nPlease keep your data safe!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return new CommandResult(SHOWING_BIO_MESSAGE, false, true, false, false);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public DisplayPaneType getDisplayPaneType() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return DisplayPaneType.BIO;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 6,
      "whneo97": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.address.ui.DisplayPaneType;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    //TODO: make it abstract"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Returns a {@code DisplayPaneType} that corresponds to a specific certain command."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @return  a {@code DisplayPaneType} based on the specific command"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public DisplayPaneType getDisplayPaneType() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 10,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /** Help information should be shown to the user in a separate window. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * The application should exit."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /** Bio information should be shown to the user in the same window. */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private boolean showBio \u003d false;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private boolean showAchvm \u003d false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields. Fields of showing bio and achievements"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * are false by default."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Constructs a {@code CommandResult} with the additional fields of showing bio and achievements."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean showBio, boolean showAchievements,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                         boolean exit) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        this(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        this.showBio \u003d showBio;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        this.showAchvm \u003d showAchievements;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        this(feedbackToUser, false, false, false, false);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public boolean isShowBio() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return showBio;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public boolean isShowAchvm() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return showAchvm;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                \u0026\u0026 showBio \u003d\u003d otherCommandResult.showBio"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                \u0026\u0026 showAchvm \u003d\u003d otherCommandResult.showAchvm"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, showBio, showAchvm, exit);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 3,
      "-": 66,
      "whneo97": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the displayed person list. \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index                of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param editPersonDescriptor details to edit the person with"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit} edited with {@code"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * editPersonDescriptor}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedTags);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the corresponding field value"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * of the person."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class EditPersonDescriptor {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        public EditPersonDescriptor() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "         * Copy constructor. A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException} if modification is"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "         * attempted. Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}. A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "         */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 38,
      "-": 186
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EventCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CALENDAR_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATETIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME_PERIOD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.model.calendar.CalendarEntry;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " * Adds an Event to the calendar."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public class EventCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"reminder\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a reminder to the calendar. \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            + PREFIX_CALENDAR_DESCRIPTION + \"DESCRIPTION \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            + PREFIX_DATETIME + \"DATETIME \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            + \"[\" + PREFIX_DATETIME + \"ENDING DATETIME] \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            + \"[\" + PREFIX_TIME_PERIOD + \"TIME PERIOD]\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            + PREFIX_CALENDAR_DESCRIPTION + \"Appointment \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            + PREFIX_DATETIME + \"5/4/2020 09:00 \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            + PREFIX_DATETIME + \"5/4/2020 11:00 \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            + PREFIX_TIME_PERIOD + \"1h30m\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New event added: %1$s\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_RECORD \u003d \"This event already exists in the calendar\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private final CalendarEntry toAdd;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Creates an EventCommand to add the specified {@code Event}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public EventCommand(CalendarEntry calendarEntry) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        requireNonNull(calendarEntry);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        toAdd \u003d calendarEntry;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        if (model.hasRecord(toAdd)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_RECORD);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        model.addRecord(toAdd);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd.toString()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                || (other instanceof EventCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                \u0026\u0026 toAdd.equals(((EventCommand) other).toAdd));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * Finds and lists all persons in address book whose name contains any of the argument keywords. Keyword matching is"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * case insensitive."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names contain any of \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 2,
      "-": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RecmFoodCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.address.ui.DisplayPaneType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.sgm.model.food.Food;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.sgm.model.food.FoodTypeIsWantedPredicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * Recommends suitable food or meals for diabetic patients."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "public class RecmFoodCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"recmf\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Gets a list of food recommendations.\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            + \"Recommendations can be filtered by keywords and flags:\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            + \"-nsv: breakfast recommendations\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            + \"-sv: lunch recommendations\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            + \"-f: fruit recommendations\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            + \"-p: protein recommendations\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            + \"-s: snack recommendations\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            + \"-m: meal recommendations\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            + \"Usage:\" + COMMAND_WORD + \"[-FLAG]... [FOOD_NAME]\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private final FoodTypeIsWantedPredicate typePredicate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private final Predicate\u003cFood\u003e namePredicate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public RecmFoodCommand(FoodTypeIsWantedPredicate typePredicate, Predicate\u003cFood\u003e namePredicate) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.typePredicate \u003d typePredicate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.namePredicate \u003d namePredicate;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        model.updateFilteredFoodList(food -\u003e typePredicate.test(food) \u0026\u0026 namePredicate.test(food));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return new CommandResult(\"Hope you like what I\u0027ve found for you~\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public DisplayPaneType getDisplayPaneType() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return DisplayPaneType.RECM_FOOD;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        if (!(other instanceof RecmFoodCommand)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return typePredicate.equals(((RecmFoodCommand) other).typePredicate)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "                \u0026\u0026 namePredicate.equals(namePredicate);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ReminderCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CALENDAR_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CALENDAR_REPETITION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATETIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.model.calendar.CalendarEntry;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " * Adds a reminder to the calendar."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public class ReminderCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"reminder\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a reminder to the calendar. \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            + PREFIX_CALENDAR_DESCRIPTION + \"DESCRIPTION \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            + PREFIX_DATETIME + \"DATETIME \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            + \"[\" + PREFIX_CALENDAR_REPETITION + \"REPETITION]\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            + PREFIX_CALENDAR_DESCRIPTION + \"Insulin injection \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            + PREFIX_DATETIME + \"31/5/2020 16:00 \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            + PREFIX_CALENDAR_REPETITION + \"everyday\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New reminder added: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_REMINDER \u003d \"This reminder already exists in the calendar\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private final CalendarEntry toAdd;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Creates an ReminderCommand to add the specified {@code Reminder}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public ReminderCommand(CalendarEntry calendarEntry) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        requireNonNull(calendarEntry);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        toAdd \u003d calendarEntry;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        if (model.hasRecord(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_RECORD);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        model.addRecord(toAdd);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd.toString()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                || (other instanceof ReminderCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                \u0026\u0026 toAdd.equals(((ReminderCommand) other).toAdd));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/exceptions/AverageType.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "package seedu.address.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": " * Type of average that can be computed."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "public enum AverageType {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    DAILY, WEEKLY, MONTHLY"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chen-xi-cx": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BLOODSUGAR_CONCENTRATION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BMI_HEIGHT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BMI_WEIGHT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATETIME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RECORDTYPE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import java.time.Month;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import seedu.address.model.calendar.DateTime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import seedu.address.model.record.BloodSugar;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import seedu.address.model.record.Bmi;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import seedu.address.model.record.Concentration;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import seedu.address.model.record.Height;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import seedu.address.model.record.RecordType;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import seedu.address.model.record.Weight;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand and returns an AddCommand object"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * for execution."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_RECORDTYPE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_RECORDTYPE) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        RecordType rt \u003d ParserUtil.parseRecordType(argMultimap.getValue(PREFIX_RECORDTYPE).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        LocalDate ld \u003d LocalDate.of(1970, Month.JANUARY, 1);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        LocalTime lt \u003d LocalTime.of(8, 0, 0);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        DateTime dateTime \u003d new DateTime(ld, lt);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        switch(rt) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        case BLOODSUGAR:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            argMultimap \u003d checkAllOtherPrefixes(argMultimap, PREFIX_BLOODSUGAR_CONCENTRATION, PREFIX_DATETIME);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            Concentration concentration \u003d ParserUtil.parseConcentration("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "                argMultimap.getValue(PREFIX_BLOODSUGAR_CONCENTRATION).get()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            );"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            //dateTime \u003d ParserUtil.parseDateTime(argMultimap.getValue(PREFIX_DATETIME).get());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            BloodSugar bloodSugar \u003d new BloodSugar(concentration, dateTime);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            return new AddCommand(bloodSugar);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        case BMI:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            argMultimap \u003d checkAllOtherPrefixes(argMultimap, PREFIX_BMI_HEIGHT, PREFIX_BMI_WEIGHT, PREFIX_DATETIME);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            Height height \u003d ParserUtil.parseHeight(argMultimap.getValue(PREFIX_BMI_HEIGHT).get());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            Weight weight \u003d ParserUtil.parseWeight(argMultimap.getValue(PREFIX_BMI_WEIGHT).get());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            //dateTime \u003d ParserUtil.parseDateTime(argMultimap.getValue(PREFIX_DATETIME).get());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            Bmi bmi \u003d new Bmi(height, weight, dateTime);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            return new AddCommand(bmi);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     * Returns a multimap of new new prefixes."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    private ArgumentMultimap checkAllOtherPrefixes(ArgumentMultimap argMultimap, Prefix... prefixes)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        throws ParseException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        String s \u003d argMultimap.getValue(PREFIX_RECORDTYPE).toString();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        ArgumentMultimap a \u003d ArgumentTokenizer.tokenize(s, prefixes);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        if (!arePrefixesPresent(a, prefixes) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        return a;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given {@code"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * ArgumentMultimap}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 5,
      "-": 34,
      "scwaterbear": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddFoodCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CALORIE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FOOD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FOOD_TYPE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GI;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SUGAR;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.address.logic.commands.AddFoodCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.sgm.model.food.Calorie;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.sgm.model.food.Fat;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.sgm.model.food.Food;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.sgm.model.food.FoodName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.sgm.model.food.FoodType;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.sgm.model.food.Gi;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.sgm.model.food.Sugar;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * Parses input arguments and creates a new AddFoodCommand object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "public class AddFoodCommandParser implements Parser\u003cAddFoodCommand\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given {@code"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * ArgumentMultimap}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddFoodCommand and returns an AddFoodCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * object for execution."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public AddFoodCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_FOOD, PREFIX_FOOD_TYPE, PREFIX_CALORIE,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            PREFIX_GI, PREFIX_SUGAR, PREFIX_FAT);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_FOOD, PREFIX_FOOD_TYPE, PREFIX_CALORIE, PREFIX_GI, PREFIX_SUGAR,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            PREFIX_FAT) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddFoodCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        FoodName name \u003d ParserUtil.parseFoodName(argMultimap.getValue(PREFIX_FOOD).get());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        FoodType foodType \u003d FoodType.getFrom(argMultimap.getValue(PREFIX_FOOD_TYPE).get());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        Calorie calorie \u003d ParserUtil.parseCalorieValue(argMultimap.getValue(PREFIX_CALORIE).get());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        Gi gi \u003d ParserUtil.parseGiValue(argMultimap.getValue(PREFIX_GI).get());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        Sugar sugar \u003d ParserUtil.parseSugarValue(argMultimap.getValue(PREFIX_SUGAR).get());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        Fat fat \u003d ParserUtil.parseFatValue(argMultimap.getValue(PREFIX_FAT).get());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        Food newFood \u003d new Food(name, calorie, gi, sugar, fat, foodType);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return new AddFoodCommand(newFood);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.logic.commands.AchvmCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.address.logic.commands.AddFoodCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import seedu.address.logic.commands.AverageCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.logic.commands.BioCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.address.logic.commands.RecmFoodCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        switch (commandWord.toLowerCase()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        case BioCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            return new BioCommand();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        case AchvmCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            return new AchvmCommand();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        case AverageCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            return new AverageCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        case RecmFoodCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            return new RecmFoodCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        case AddFoodCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            return new AddFoodCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 6,
      "-": 75,
      "whneo97": 9,
      "chen-xi-cx": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ArgumentMultimap.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * Stores mapping of prefixes to their respective arguments. Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained. Keys are unique, but the list"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * of argument values may contain duplicate argument values, i.e. the same argument value can be inserted multiple times"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * for the same prefix."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Prefixes mapped to their respective arguments"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     **/"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map. If the map previously contained a"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Returns all values of {@code prefix}. If the prefix does not exist or has no values, this will return an empty"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * list. Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 11,
      "-": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ArgumentTokenizer.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e e.g. {@code some"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e 1. An argument\u0027s value can be an"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e 2. Leading and trailing whitespaces of an"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * argument value will be discarded.\u003cbr\u003e 3. An argument may be repeated and all its values will be accumulated e.g. the"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * value of {@code t/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in {@code argsString} starting from index {@code"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * fromIndex}. An occurrence is valid if there is a whitespace before {@code prefix}. Returns -1 if no such"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * occurrence can be found."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and {@code fromIndex} \u003d 0, this method returns -1"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * as there are no valid occurrences of \"p/\" with whitespace before it. However, if {@code argsString} \u003d \"e/hi"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * p/900\", {@code prefix} \u003d \"p/\" and {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}. The"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                                               PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                                               PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 14,
      "-": 130
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AverageCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PARAMETER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AVGTYPE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COUNT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RECORDTYPE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import seedu.address.logic.commands.AverageCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import seedu.address.logic.commands.exceptions.AverageType;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import seedu.address.model.record.RecordType;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": " * Parses input arguments and creates a new AverageCommand object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "public class AverageCommandParser implements Parser\u003cAverageCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    private static final String DEFAULT_COUNT_STRING \u003d \"5\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    private static final String COUNT_REGEX \u003d \"[1-9]\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AverageCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * and returns a AverageCommand object for execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    public AverageCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_AVGTYPE, PREFIX_RECORDTYPE, PREFIX_COUNT);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_AVGTYPE, PREFIX_RECORDTYPE)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AverageCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        AverageType averageType;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        switch (argMultimap.getValue(PREFIX_AVGTYPE).get().toUpperCase()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        case \"DAILY\":"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            //fallthrough"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        case \"WEEKLY\":"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            //fallthrough"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        case \"MONTHLY\":"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            averageType \u003d AverageType.valueOf(argMultimap.getValue(PREFIX_AVGTYPE).get().toUpperCase());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_PARAMETER, AverageCommand.MESSAGE_USAGE,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "                    AverageCommand.MESSAGE_INVALID_AVGTYPE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        RecordType recordType;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        switch (argMultimap.getValue(PREFIX_RECORDTYPE).get().toUpperCase()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        case \"DIET\":"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            //fallthrough"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        case \"EXERCISE\":"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            //fallthrough"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        case \"BLOODSUGAR\":"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            //fallthrough"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        case \"HEIGHTANDWEIGHT\":"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            //fallthrough"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        case \"MEDICALEXPENSES\":"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            recordType \u003d RecordType.valueOf(argMultimap.getValue(PREFIX_RECORDTYPE).get().toUpperCase());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_PARAMETER, AverageCommand.MESSAGE_USAGE,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "                    AverageCommand.MESSAGE_INVALID_RECORDTYPE));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        String strCount;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_COUNT)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            strCount \u003d argMultimap.getValue(PREFIX_COUNT).get();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            strCount \u003d DEFAULT_COUNT_STRING;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        if (!strCount.matches(COUNT_REGEX)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_PARAMETER, AverageCommand.MESSAGE_USAGE,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "                    AverageCommand.MESSAGE_INVALID_COUNT));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        int count \u003d Integer.parseInt(strCount);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        return new AverageCommand(averageType, recordType, count);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chen-xi-cx": 98
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public static final Prefix PREFIX_RECORDTYPE \u003d new Prefix(\"rt/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public static final Prefix PREFIX_DATETIME \u003d new Prefix(\"dt/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public static final Prefix PREFIX_BLOODSUGAR_CONCENTRATION \u003d new Prefix(\"con/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public static final Prefix PREFIX_BMI_HEIGHT \u003d new Prefix(\"h/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public static final Prefix PREFIX_BMI_WEIGHT \u003d new Prefix(\"w/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public static final Prefix PREFIX_CALENDAR_DESCRIPTION \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public static final Prefix PREFIX_CALENDAR_REPETITION \u003d new Prefix(\"r/\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public static final Prefix PREFIX_TIME_PERIOD \u003d new Prefix(\"tp/\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final Prefix PREFIX_FOOD \u003d new Prefix(\"fn/\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final Prefix PREFIX_FOOD_TYPE \u003d new Prefix(\"ft/\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final Prefix PREFIX_CALORIE \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final Prefix PREFIX_GI \u003d new Prefix(\"g/\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final Prefix PREFIX_SUGAR \u003d new Prefix(\"s/\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final Prefix PREFIX_FAT \u003d new Prefix(\"f/\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final String ABBR_NON_STARCHY_VEGETABLE \u003d \"nsv\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final String ABBR_STARCHY_VEGETABLE \u003d \"sv\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final String ABBR_FRUIT \u003d \"f\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final String ABBR_PROTEIN \u003d \"p\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final String ABBR_SNACK \u003d \"s\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final String ABBR_MEAL \u003d \"m\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final String FLAG_SIGNAL \u003d \"-\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final Flag FLAG_NSV \u003d new Flag(FLAG_SIGNAL + ABBR_NON_STARCHY_VEGETABLE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final Flag FLAG_SV \u003d new Flag(FLAG_SIGNAL + ABBR_STARCHY_VEGETABLE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final Flag FLAG_F \u003d new Flag(FLAG_SIGNAL + ABBR_FRUIT);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final Flag FLAG_P \u003d new Flag(FLAG_SIGNAL + ABBR_PROTEIN);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final Flag FLAG_S \u003d new Flag(FLAG_SIGNAL + ABBR_SNACK);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final Flag FLAG_M \u003d new Flag(FLAG_SIGNAL + ABBR_MEAL);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final List\u003cFlag\u003e FLAGS \u003d Arrays.asList(new Flag[]{FLAG_NSV, FLAG_SV, FLAG_F, FLAG_P, FLAG_S, FLAG_M});"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    public static final Prefix PREFIX_AVGTYPE \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    public static final Prefix PREFIX_COUNT \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 24,
      "jyx11011": 4,
      "-": 16,
      "scwaterbear": 8,
      "chen-xi-cx": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand and returns a DeleteCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommand(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 3,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RECORDTYPE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand and returns an EditCommand object"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * for execution."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_RECORDTYPE, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "                    PREFIX_ADDRESS, PREFIX_TAG);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!editPersonDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return new EditCommand(index, editPersonDescriptor);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty. If {@code tags}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * contain only one element which is an empty string, it will be parsed into a {@code Set\u003cTag\u003e} containing zero"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * tags."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 6,
      "-": 76,
      "scwaterbear": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand and returns a FindCommand object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 3,
      "-": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/Flag.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * Marks the option flags for selective food recommendations."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * E.g. \u0027-m\u0027 in \u0027recmf -m\u0027 to only show meal recommendations."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "public class Flag {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private final String flag;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public Flag(String flag) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.flag \u003d flag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public String getFlag() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return flag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return getFlag();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return flag \u003d\u003d null ? 0 : flag.hashCode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        if (!(obj instanceof Flag)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        Flag other \u003d (Flag) obj;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return other.getFlag().equals(this.getFlag());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/Parser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 1,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import java.time.Month;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import seedu.address.model.calendar.DateTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import seedu.address.model.record.Concentration;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import seedu.address.model.record.Height;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import seedu.address.model.record.RecordType;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import seedu.address.model.record.Weight;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.sgm.model.food.Calorie;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.sgm.model.food.Fat;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.sgm.model.food.FoodName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.sgm.model.food.Gi;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.sgm.model.food.NutritionValue;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.sgm.model.food.Sugar;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     * Parses a {@code String recordType} into a {@code RecordType}. Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     * @throws ParseException if the given {@code recordType} does not match any of the enums."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public static RecordType parseRecordType(String recordType) throws ParseException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        requireNonNull(recordType);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        String trimmedRType \u003d recordType.split(\" \")[0].trim();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            return RecordType.valueOf(trimmedRType);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            throw new ParseException(\"System does not accommodate such a record type.\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}. Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Parses a {@code String name} into a {@code FoodName}. Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static FoodName parseFoodName(String name) throws ParseException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        if (!FoodName.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return new FoodName(trimmedName);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}. Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}. Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}. Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}. Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Checks whether {@code String value} is valid."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @throws ParseException if the given {@code nutritionValue} is invalid"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private static String verifyNutritionValue(String nutritionValue) throws ParseException {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        requireNonNull(nutritionValue);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        String trimmedValue \u003d nutritionValue.trim();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        if (!NutritionValue.isValidValue(nutritionValue)) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            throw new ParseException(NutritionValue.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return trimmedValue;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Parses a {@code String value} into a {@code Calorie}."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static Calorie parseCalorieValue(String value) throws ParseException {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return new Calorie(verifyNutritionValue(value));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Parses a {@code String value} into a {@code Gi}."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static Gi parseGiValue(String value) throws ParseException {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return new Gi(verifyNutritionValue(value));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Parses a {@code String value} into a {@code Sugar}."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static Sugar parseSugarValue(String value) throws ParseException {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return new Sugar(verifyNutritionValue(value));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Parses a {@code String value} into a {@code Fat}."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static Fat parseFatValue(String value) throws ParseException {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return new Fat(verifyNutritionValue(value));"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     * Parses a {@code String dateTime} into an {@code DateTime}. Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     *"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     * @throws ParseException if the given {@code dateTime} is invalid."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public static DateTime parseDateTime(String dateTime) throws ParseException {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        requireNonNull(dateTime);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        String trimmedDateTime \u003d dateTime.trim();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        if (!DateTime.isValidDateTime(trimmedDateTime)) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            throw new ParseException(DateTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        LocalDate ld \u003d LocalDate.of(1970, Month.JANUARY, 1);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        LocalTime lt \u003d LocalTime.of(8, 0, 0);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        return new DateTime(ld, lt);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     * Parses a {@code String concentration} into an {@code Concentration}."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     *"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     * @throws ParseException if the given {@code concentration} is invalid."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     */"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public static Concentration parseConcentration(String concentration) throws ParseException {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        String trimmedConcentration \u003d concentration.trim();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        if (!Concentration.isValidConcentration(trimmedConcentration)) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            throw new ParseException(Concentration.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        return new Concentration(trimmedConcentration);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     * Parses a {@code String height} into an {@code Height}. Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     *"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     * @throws ParseException if the given {@code height} is invalid."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     */"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public static Height parseHeight(String height) throws ParseException {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        String trimmedHeight \u003d height.trim();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        if (!Height.isValidHeight(trimmedHeight)) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            throw new ParseException(Height.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        return new Height(trimmedHeight);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     * Parses a {@code String weight} into an {@code Weight}. Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     *"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     * @throws ParseException if the given {@code weight} is invalid."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     */"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public static Weight parseWeight(String weight) throws ParseException {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        String trimmedWeight \u003d weight.trim();"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        if (!Weight.isValidWeight(trimmedWeight)) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            throw new ParseException(Weight.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        return new Weight(trimmedWeight);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 69,
      "-": 115,
      "scwaterbear": 78
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/Prefix.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string. E.g. \u0027t/\u0027 in \u0027add James t/ friend\u0027."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 1,
      "-": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/RecmFoodCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.FLAGS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FOOD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.address.logic.commands.RecmFoodCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.sgm.model.food.FoodNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.sgm.model.food.FoodType;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.sgm.model.food.FoodTypeIsWantedPredicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * Parses input arguments and creates a new RecmFoodCommand object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "public class RecmFoodCommandParser implements Parser\u003cRecmFoodCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public RecmFoodCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        ArgumentMultimap argumentMultimap \u003d ArgumentTokenizer.tokenize(userInput, PREFIX_FOOD);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        List\u003cFoodType\u003e foodTypes \u003d getWantedFoodTypes(getParsedFlags(argumentMultimap.getPreamble()));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        Optional\u003cString\u003e foodWords \u003d argumentMultimap.getValue(PREFIX_FOOD);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        if (foodWords.isEmpty()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            return new RecmFoodCommand(new FoodTypeIsWantedPredicate(foodTypes), x -\u003e true);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        String[] foodKeywords \u003d foodWords.get().trim().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return new RecmFoodCommand(new FoodTypeIsWantedPredicate(foodTypes),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            new FoodNameContainsKeywordsPredicate(Arrays.asList(foodKeywords)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private List\u003cFlag\u003e getParsedFlags(String preamble) throws ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        int expectedFlagNumber \u003d preamble.split(\"\\\\s+\").length;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        List\u003cFlag\u003e validFlags \u003d Arrays.stream(preamble.split(\"\\\\s+\"))"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            .map(f -\u003e new Flag(f))"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            .filter(flag -\u003e FLAGS.contains(flag))"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        /*If no flag entered, return all flags to show the full list.*/"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        if (preamble.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            return FLAGS;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        } else if (expectedFlagNumber !\u003d validFlags.size()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            throw new ParseException(\"One or more flags are invalid.\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            return validFlags;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private List\u003cFoodType\u003e getWantedFoodTypes(List\u003cFlag\u003e flags) throws ParseException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        List\u003cFoodType\u003e foodTypes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        for (Flag flag : flags) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            foodTypes.add(FoodType.getFrom(flag.toString()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return foodTypes;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/model/AddressBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * Wraps all data at the address-book level Duplicates are not allowed (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBook implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList persons;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public AddressBook() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddressBook using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook(ReadOnlyAddressBook toBeCopied) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}. {@code persons} must not contain duplicate"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * persons."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.setPersons(persons);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        setPersons(newData.getPersonList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.contains(person);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Adds a person to the address book. The person must not already exist in the address book."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person p) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.add(p);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}. {@code target} must exist in the"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * address book. The person identity of {@code editedPerson} must not be the same as another existing person in the"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * address book."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedPerson);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}. {@code key} must exist in the address book."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removePerson(Person key) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.remove(key);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList().size() + \" persons\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 persons.equals(((AddressBook) other).persons));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.hashCode();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 10,
      "-": 108
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.model.calendar.Reminder;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import seedu.address.model.record.Record;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.sgm.model.food.Food;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.sgm.model.food.UniqueFoodList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * {@code Predicate} that always evaluate to true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //TODO: check what this means"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    Predicate\u003cRecord\u003e PREDICATE_SHOW_ALL_RECORDS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBookFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Returns the AddressBook."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces address book data with the data in {@code addressBook}."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBook(ReadOnlyAddressBook addressBook);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasPerson(Person person);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Deletes the given person. The person must exist in the address book."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    void deletePerson(Person target);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Adds the given person. {@code person} must not already exist in the address book."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    void addPerson(Person person);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}. {@code target} must exist in the address"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * book. The person identity of {@code editedPerson} must not be the same as another existing person in the address"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * book."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    void setPerson(Person target, Person editedPerson);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Returns an unmodifiable view of the filtered person list"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Replaces food list data with the data in {@code newFoodList}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    void setFoodList(UniqueFoodList newFoodList);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    boolean hasFood(Food food);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Deletes the given food. The food must exist in the recommendations."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    void deleteFood(Food food);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Adds the given food. {@code food} must not already exist in the recommendations."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    void addFood(Food food);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Returns the {@code UniqueFoodList} object."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    UniqueFoodList getUniqueFoodListObject();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Returns the a list of foods."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    ObservableList\u003cFood\u003e getFoodList();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Returns an unmodifiable view of the filtered person list"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    ObservableList\u003cFood\u003e getFilterFoodList();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Updates the filter of the filtered food list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    void updateFilteredFoodList(Predicate\u003cFood\u003e predicate);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    void addRecord(Record toAdd);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    boolean hasRecord(Record toAdd);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    void updateFilteredRecordList(Predicate\u003cRecord\u003e predicate);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    ReadOnlyRecordBook getRecordBook();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    boolean hasReminder(Reminder reminder);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    void addReminder(Reminder reminder);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 63,
      "jyx11011": 5,
      "-": 72,
      "scwaterbear": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.model.calendar.Reminder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import seedu.address.model.record.Record;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.sgm.model.food.Food;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.sgm.model.food.UniqueFoodList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    private final RecordBook recordBook;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    private final FilteredList\u003cRecord\u003e filteredRecords;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private final UniqueFoodList foodList;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private final FilteredList\u003cFood\u003e filteredFoodList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyUserPrefs userPrefs, UniqueFoodList foodList,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "                        RecordBook recordBook) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs, foodList);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "                + \" and food map: \" + foodList);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d new AddressBook(addressBook);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        this.recordBook \u003d recordBook;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        this.filteredRecords \u003d new FilteredList\u003c\u003e(this.recordBook.getRecordList());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.foodList \u003d foodList;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.filteredFoodList \u003d new FilteredList\u003c\u003e(this.foodList.asUnmodifiableObservableList());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this(new AddressBook(), new UserPrefs(), new UniqueFoodList(), new RecordBook());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getAddressBookFilePath();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(addressBookFilePath);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBook(ReadOnlyAddressBook addressBook) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook.resetData(addressBook);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        return addressBook.hasPerson(person);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public ReadOnlyRecordBook getRecordBook() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        return recordBook;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public boolean hasReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public void addReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.removePerson(target);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(person);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of {@code"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * versionedAddressBook}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        return filteredPersons;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public boolean equals("
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            Object obj) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.equals(other.addressBook)"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 filteredPersons.equals(other.filteredPersons);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Food Map \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    //addFood() Function"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public boolean hasFood(Food food) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        requireNonNull(food);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return foodList.contains(food);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public void deleteFood(Food food) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        foodList.remove(food);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public void addFood(Food food) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        foodList.add(food);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public void setFoodList(UniqueFoodList uniqueFoodLists) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        requireAllNonNull(uniqueFoodLists);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        foodList.setFoods(uniqueFoodLists);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public UniqueFoodList getUniqueFoodListObject() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return foodList;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public ObservableList\u003cFood\u003e getFoodList() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return foodList.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public ObservableList\u003cFood\u003e getFilterFoodList() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return filteredFoodList;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public void updateFilteredFoodList(Predicate\u003cFood\u003e predicate) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        filteredFoodList.setPredicate(predicate);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public void addRecord(Record record) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        recordBook.addRecord(record);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        updateFilteredRecordList(PREDICATE_SHOW_ALL_RECORDS);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public boolean hasRecord(Record record) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        requireNonNull(record);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        return recordBook.hasRecord(record);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public void updateFilteredRecordList(Predicate\u003cRecord\u003e predicate) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        filteredRecords.setPredicate(predicate);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 63,
      "jyx11011": 9,
      "-": 142,
      "scwaterbear": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyAddressBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Returns an unmodifiable view of the persons list. This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getPersonList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 1,
      "-": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyRecordBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import seedu.address.model.record.Record;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": " * Unmodifiable view of a record book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "public interface ReadOnlyRecordBook {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     * Returns an unmodifiable view of the records list. This list will not contain any duplicate records."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    ObservableList\u003cRecord\u003e getRecordList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "scwaterbear": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/RecordBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import seedu.address.model.record.Record;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import seedu.address.model.record.UniqueRecordList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": " * Wraps all data at the address-book level Duplicates are not allowed (by .isSameRecord comparison)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "public class RecordBook implements ReadOnlyRecordBook {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    private final UniqueRecordList records;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        records \u003d new UniqueRecordList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public RecordBook() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     * Creates an RecordBook using the Records in the {@code toBeCopied}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public RecordBook(ReadOnlyRecordBook toBeCopied) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     * Replaces the contents of the record list with {@code records}. {@code records} must not contain duplicate"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     * records."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public void setRecords(List\u003cRecord\u003e records) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        this.records.setRecords(records);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     * Resets the existing data of this {@code RecordBook} with {@code newData}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public void resetData(ReadOnlyRecordBook newData) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        setRecords(newData.getRecordList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //// record-level operations"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     * Returns true if a record with the same identity as {@code record} exists in the address book."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public boolean hasRecord(Record record) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        requireNonNull(record);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        return records.contains(record);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     * Adds a record to the address book. The record must not already exist in the address book."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public void addRecord(Record p) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        records.add(p);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     * Replaces the given record {@code target} in the list with {@code editedRecord}. {@code target} must exist in the"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     * address book. The record identity of {@code editedRecord} must not be the same as another existing record in the"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     * address book."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public void setRecord(Record target, Record editedRecord) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        requireNonNull(editedRecord);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        records.setRecord(target, editedRecord);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     * Removes {@code key} from this {@code RecordBook}. {@code key} must exist in the address book."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public void removeRecord(Record key) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        records.remove(key);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        return records.asUnmodifiableObservableList().size() + \" records\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public ObservableList\u003cRecord\u003e getRecordList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        return records.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            || (other instanceof RecordBook // instanceof handles nulls"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            \u0026\u0026 records.equals(((RecordBook) other).records));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        return records.hashCode();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "scwaterbear": 118
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addressBookFilePath \u003d Paths.get(\"data\", \"addressbook.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private Path foodListFilePath \u003d Paths.get(\"data\", \"foodlist.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public UserPrefs() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        setAddressBookFilePath(newUserPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookFilePath;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookFilePath \u003d addressBookFilePath;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public Path getFoodListFilePath() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return foodListFilePath;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public void setFoodListFilePath(Path foodListFilePath) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.foodListFilePath \u003d foodListFilePath;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 addressBookFilePath.equals(o.addressBookFilePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(guiSettings, addressBookFilePath);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 11,
      "-": 86
    }
  },
  {
    "path": "src/main/java/seedu/address/model/calendar/CalendarEntry.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package seedu.address.model.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " * Represents a Calendar Entry in the calendar."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public abstract class CalendarEntry {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private Description description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private DateTime dateTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public CalendarEntry(Description description, DateTime dateTime) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public Description getDescription() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public DateTime getDateTime() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return dateTime;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public LocalTime getTime() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return dateTime.getTime();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return dateTime.getDate();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns the day of week of the date in the entry."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @return the day of week of the date in the entry."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public DayOfWeek getDayOfWeek() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return dateTime.getDayOfWeek();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns a String representation of the day of week of the date."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @return a String representation of the day of week of the date."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public String getDayOfWeekString() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return dateTime.getDayOfWeekString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/model/calendar/DateTime.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package seedu.address.model.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " * Represents a date and a time."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public class DateTime {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //TODO: constraint"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"some constraint date time\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private LocalTime time;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public DateTime(LocalDate date, LocalTime time) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        requireNonNull(time);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //TODO: regex for date time"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public static boolean isValidDateTime(String test) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public LocalTime getTime() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public DayOfWeek getDayOfWeek() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return date.getDayOfWeek();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public String getDayOfWeekString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        String dayString \u003d getDayOfWeek().toString();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return dayString.substring(0, 1).concat(dayString.substring(1).toLowerCase());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns true if time are same."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param dateTime the dateTime to be compared with."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @return true if time are same."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public boolean isSameTime(DateTime dateTime) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return this.time.equals(dateTime.getTime());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns true if both date and time are same."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        if (!(other instanceof DateTime)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        DateTime otherDateTime \u003d (DateTime) other;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return LocalDateTime.of(date, time).equals(LocalDateTime.of(otherDateTime.date, otherDateTime.time));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return LocalDateTime.of(date, time).hashCode();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy MMM dd HH:mm\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return LocalDateTime.of(date, time).format(formatter);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 78,
      "scwaterbear": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/model/calendar/Description.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package seedu.address.model.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " * Represents a Description in the calender entry."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public class Description {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Description can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Constructs an {@code Description}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param description A valid description."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public Description(String description) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        checkArgument(isValidDescription(description), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        value \u003d description;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns true if a given string is a valid description."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public static boolean isValidDescription(String test) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                || (other instanceof Description"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                \u0026\u0026 value.equals(((Description) other).value));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/model/calendar/Event.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package seedu.address.model.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " * Represents an Event in the calendar."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public class Event extends CalendarEntry {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private Optional\u003cDateTime\u003e endingDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private Optional\u003cReminder\u003e autoReminder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public Event(Description description, DateTime dateTime) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        super(description, dateTime);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        endingDateTime \u003d Optional.empty();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        autoReminder \u003d Optional.empty();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public void setEndingDateTime(Optional\u003cDateTime\u003e endingDateTime) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        this.endingDateTime \u003d endingDateTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public void setEndingDateTime(DateTime endingDateTime) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        this.endingDateTime \u003d Optional.ofNullable(endingDateTime);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public void setAutoReminder(Optional\u003cReminder\u003e autoReminder) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        this.autoReminder \u003d autoReminder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public void setAutoReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        this.autoReminder \u003d Optional.ofNullable(reminder);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public Optional\u003cDateTime\u003e getEndingDateTime() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return endingDateTime;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public Optional\u003cReminder\u003e getAutoReminder() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return autoReminder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns true if both events have the same description, date and time;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * This defines a weaker notion of equality between two events."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public boolean isSameEvent(Event otherEvent) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        if (otherEvent \u003d\u003d this) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return otherEvent !\u003d null"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                \u0026\u0026 otherEvent.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                \u0026\u0026 otherEvent.getDateTime().equals(getDateTime());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns true if both events have the same description, dateTime, endingDateTime and autoReminder."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        if (!(other instanceof Event)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        Event otherEvent \u003d (Event) other;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return otherEvent.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                \u0026\u0026 otherEvent.getDateTime().equals(getDateTime())"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                \u0026\u0026 otherEvent.getEndingDateTime().equals(getEndingDateTime())"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                \u0026\u0026 otherEvent.getAutoReminder().equals(getAutoReminder());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        builder.append(\"Event\")"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                .append(\" Description: \")"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                .append(getDescription())"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                .append(\" From: \")"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                .append(getDateTime())"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                .append(getEndingTimeString());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private String getEndingTimeString() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        if (endingDateTime.isPresent()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return \" To: \" + endingDateTime.get();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 95
    }
  },
  {
    "path": "src/main/java/seedu/address/model/calendar/Reminder.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package seedu.address.model.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " * Represents a Reminder in the calendar."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public class Reminder extends CalendarEntry {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private Repetition repetition;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public Reminder(Description description, DateTime dateTime, Repetition repetition) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        super(description, dateTime);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        this.repetition \u003d repetition;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public Repetition getRepetition() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return repetition;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns true if both reminders have the same description, date and time;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * This defines a weaker notion of equality between two reminders."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public boolean isSameReminder(Reminder otherReminder) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        if (otherReminder \u003d\u003d this) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return otherReminder !\u003d null"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                \u0026\u0026 otherReminder.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                \u0026\u0026 otherReminder.getDateTime().equals(getDateTime());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns true if both reminders have the same description, dateTime and repetition."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        if (!(other instanceof Reminder)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        Reminder otherReminder \u003d (Reminder) other;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return otherReminder.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                \u0026\u0026 otherReminder.getDateTime().equals(getDateTime())"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                \u0026\u0026 otherReminder.getRepetition().equals(getRepetition());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return Objects.hash(getDescription(), getDateTime(), getRepetition());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        builder.append(\"Reminder\")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                .append(\" Description: \")"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                .append(getDescription());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        if (repetition.equals(Repetition.Once)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            builder.append(\" on: \")"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                    .append(getDateTime());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        } else if (repetition.equals(Repetition.EveryDay)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            builder.append(\" at: \")"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                    .append(getTime())"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                    .append(\" everyday\")"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                    .append(\" from: \")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                    .append(getDate());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        } else if (repetition.equals(Repetition.EveryWeek)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            builder.append(\" at: \")"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                    .append(getTime())"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                    .append(\" every \")"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                    .append(getDayOfWeekString());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 82
    }
  },
  {
    "path": "src/main/java/seedu/address/model/calendar/Repetition.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package seedu.address.model.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " * Represents repetition of a reminder."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public enum Repetition {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * No repetition."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    Once,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Repeats everyday."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    EveryDay,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Repeats everyweek."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    EveryWeek;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Address.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * Represents a Person\u0027s address in the address book. Guarantees: immutable; is valid as declared in {@link"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * #isValidAddress(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Address {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Addresses can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Address}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param address A valid address."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address(String address) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidAddress(address), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d address;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid email."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidAddress(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Address // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Address) other).value)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 2,
      "-": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Email.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * Represents a Person\u0027s email in the address book. Guarantees: immutable; is valid as declared in {@link"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * #isValidEmail(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Email {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"and adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"2. This is followed by a \u0027@\u0027 and then a domain name. \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"The domain name must:\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - be at least 2 characters long\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - start and end with alphanumeric characters\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - consist of alphanumeric characters, a period or a hyphen for the characters in between, if any.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    // alphanumeric and special characters"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d \"[^\\\\W_]\"; // alphanumeric characters except underscore"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_MIDDLE_REGEX \u003d \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]$\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + DOMAIN_FIRST_CHARACTER_REGEX + DOMAIN_MIDDLE_REGEX + DOMAIN_LAST_CHARACTER_REGEX;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Email}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param email A valid email address."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email(String email) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidEmail(email), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns if a given string is a valid email."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidEmail(String test) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Email // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Email) other).value)); // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 2,
      "-": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Name.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * Represents a Person\u0027s name in the address book. Guarantees: immutable; is valid as declared in {@link"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 2,
      "-": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Person.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * Represents a Person in the address book. Guarantees: details are present and not null, field values are validated,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class Person {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException} if modification is attempted."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same. This"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSamePerson(Person otherPerson) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (otherPerson \u003d\u003d this) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson !\u003d null"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 (otherPerson.getPhone().equals(getPhone()) || otherPerson.getEmail().equals(getEmail()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Returns true if both persons have the same identity and data fields. This defines a stronger notion of equality"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * between two persons."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Person)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Person otherPerson \u003d (Person) other;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getAddress().equals(getAddress())"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getTags().equals(getTags());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Address: \")"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getAddress())"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 7,
      "-": 112
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Phone.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * Represents a Person\u0027s phone number in the address book. Guarantees: immutable; is valid as declared in {@link"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * #isValidPhone(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Phone {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Phone numbers should only contain numbers, and it should be at least 3 digits long\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{3,}\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Phone}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param phone A valid phone number."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone(String phone) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidPhone(phone), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid phone number."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPhone(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Phone // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Phone) other).value)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 2,
      "-": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/UniquePersonList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * A list of persons that enforces uniqueness between its elements and does not allow nulls. A person is considered"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * unique by comparing using {@code Person#isSamePerson(Person)}. As such, adding and updating of persons uses"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * Person#isSamePerson(Person) for equality so as to ensure that the person being added or updated is unique in terms of"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * identity in the UniquePersonList. However, the removal of a person uses Person#equals(Object) so as to ensure that"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * the person with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * @see Person#isSamePerson(Person)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonList implements Iterable\u003cPerson\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cPerson\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cPerson\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the list contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean contains(Person toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSamePerson);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Adds a person to the list. The person must not already exist in the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(Person toAdd) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Replaces the person {@code target} in the list with {@code editedPerson}. {@code target} must exist in the list."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the list."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!target.isSamePerson(editedPerson) \u0026\u0026 contains(editedPerson)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.set(index, editedPerson);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Removes the equivalent person from the list. The person must exist in the list."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove(Person toRemove) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(UniquePersonList replacement) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Replaces the contents of this list with {@code persons}. {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(persons);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personsAreUnique(persons)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(persons);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public Iterator\u003cPerson\u003e iterator() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof UniquePersonList // instanceof handles nulls"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniquePersonList) other).internalList));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code persons} contains only unique persons."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean personsAreUnique(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c persons.size() - 1; i++) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int j \u003d i + 1; j \u003c persons.size(); j++) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                if (persons.get(i).isSamePerson(persons.get(j))) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 10,
      "-": 123
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/exceptions/PersonNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that the operation is unable to find the specified person."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "public class PersonNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 2,
      "-": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/model/record/BloodSugar.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "package seedu.address.model.record;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import seedu.address.model.calendar.DateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": " * Represents a Blood Sugar record in the record book."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "public class BloodSugar extends Record {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"BloodSugar can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    private final Concentration concentration;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public BloodSugar(Concentration concentration, DateTime dateTime) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        super(dateTime);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        requireNonNull(concentration);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        this.concentration \u003d concentration;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        builder.append(\"Blood Sugar Record :\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            .append(\" Concentration: \")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            .append(concentration);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        return builder.toString() + \" \" + super.toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "scwaterbear": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/model/record/Bmi.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "package seedu.address.model.record;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import seedu.address.model.calendar.DateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": " * Represents a Bmi record in the record book."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "public class Bmi extends Record {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Bmi can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    private final Height height;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    private final Weight weight;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public Bmi(Height height, Weight weight, DateTime dateTime) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        super(dateTime);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        requireNonNull(height);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        requireNonNull(weight);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        this.height \u003d height;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        this.weight \u003d weight;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        builder.append(\"BMI record :\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            .append(\" Height: \")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            .append(height)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            .append(\" Weight: \")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            .append(weight);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        return builder.toString() + \" \" + super.toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "scwaterbear": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/model/record/Concentration.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "package seedu.address.model.record;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": " * Represents a Blood Sugar Record\u0027s sugar concentration in the record book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidConcentration(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "public class Concentration {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        \"Concentration should only contain numeric characters and at most a single decimal,\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            + \" and it should not be blank\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^+?\\\\d*\\\\.{0,1}\\\\d+$\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    private final double concentration;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public Concentration(String concentration) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        requireNonNull(concentration);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        checkArgument(isValidConcentration(concentration), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        this.concentration \u003d Double.parseDouble(concentration);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public static boolean isValidConcentration(String test) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            || (other instanceof Weight // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            \u0026\u0026 concentration \u003d\u003d ((Concentration) other).concentration); // state check"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        return ((Double) concentration).hashCode();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        return Double.toString(concentration);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "scwaterbear": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/model/record/Height.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "package seedu.address.model.record;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": " * Represents a Bmi Record\u0027s height in the record book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidHeight(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "public class Height {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        \"Height should only contain numeric characters and at most a single decimal,\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            + \" and it should not be blank\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^+?\\\\d*\\\\.{0,1}\\\\d+$\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    private final double height;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public Height(String height) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        requireNonNull(height);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        checkArgument(isValidHeight(height), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        this.height \u003d Double.parseDouble(height);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public static boolean isValidHeight(String test) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            || (other instanceof Weight // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            \u0026\u0026 height \u003d\u003d ((Height) other).height); // state check"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        return ((Double) height).hashCode();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        return Double.toString(height);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "scwaterbear": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/model/record/Record.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "package seedu.address.model.record;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import seedu.address.model.calendar.DateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": " * Represents a record in the record book."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "public abstract class Record {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    private final DateTime dateTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public Record(DateTime dateTime) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        requireNonNull(dateTime);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     * Returns true if both records have the same identity."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public boolean isSameRecord(Record otherRecord) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        if (otherRecord \u003d\u003d this) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        return otherRecord !\u003d null"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            \u0026\u0026 otherRecord.dateTime.equals(dateTime)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            \u0026\u0026 otherRecord.getClass().equals(this.getClass());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     * Returns true if both persons have the same identity and data fields. This defines a stronger notion of equality"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     * between two persons."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        if (!(other instanceof Record)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        Record otherRecord \u003d (Record) other;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        return otherRecord.dateTime.equals(dateTime)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            \u0026\u0026 otherRecord.getClass().equals(this.getClass());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        return Objects.hash(dateTime);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        builder.append(\"at DateTime: \")"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            .append(dateTime);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "scwaterbear": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/model/record/RecordType.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "package seedu.address.model.record;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": " * Represents different possible types of records."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "public enum RecordType {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    BLOODSUGAR, BMI, DIET, EXERCISE, HEIGHTANDWEIGHT, MEDICALEXPENSES"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "scwaterbear": 7,
      "chen-xi-cx": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/record/UniqueRecordList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "package seedu.address.model.record;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import seedu.address.model.record.exceptions.DuplicateRecordException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import seedu.address.model.record.exceptions.RecordNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": " * A list of records that enforces uniqueness between its elements and does not allow nulls. A record is considered"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": " * unique by comparing using {@code Record#isSameRecord(Record)}. As such, adding and updating of records uses"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": " * Record#isSameRecord(Record) for equality so as to ensure that the record being added or updated is unique in terms of"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": " * identity in the UniqueRecordList. However, the removal of a record uses Record#equals(Object) so as to ensure that"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": " * the record with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": " * @see Record#isSameRecord(Record)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "public class UniqueRecordList implements Iterable\u003cRecord\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    private final ObservableList\u003cRecord\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    private final ObservableList\u003cRecord\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     * Returns true if the list contains an equivalent record as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public boolean contains(Record toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameRecord);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     * Adds a record to the list. The record must not already exist in the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public void add(Record toAdd) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            throw new DuplicateRecordException();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     * Replaces the record {@code target} in the list with {@code editedRecord}. {@code target} must exist in the list."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     * The record identity of {@code editedRecord} must not be the same as another existing record in the list."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public void setRecord(Record target, Record editedRecord) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        requireAllNonNull(target, editedRecord);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            throw new RecordNotFoundException();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        if (!target.isSameRecord(editedRecord) \u0026\u0026 contains(editedRecord)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            throw new DuplicateRecordException();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        internalList.set(index, editedRecord);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     * Removes the equivalent record from the list. The record must exist in the list."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public void remove(Record toRemove) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            throw new RecordNotFoundException();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public void setRecords(UniqueRecordList replacement) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     * Replaces the contents of this list with {@code records}. {@code records} must not contain duplicate records."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public void setRecords(List\u003cRecord\u003e records) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        requireAllNonNull(records);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        if (!recordsAreUnique(records)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            throw new DuplicateRecordException();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        internalList.setAll(records);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public ObservableList\u003cRecord\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public Iterator\u003cRecord\u003e iterator() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            || (other instanceof UniqueRecordList // instanceof handles nulls"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            \u0026\u0026 internalList.equals(((UniqueRecordList) other).internalList));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     * Returns true if {@code records} contains only unique records."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    private boolean recordsAreUnique(List\u003cRecord\u003e records) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        for (int i \u003d 0; i \u003c records.size() - 1; i++) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            for (int j \u003d i + 1; j \u003c records.size(); j++) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "                if (records.get(i).isSameRecord(records.get(j))) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "                }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "scwaterbear": 133
    }
  },
  {
    "path": "src/main/java/seedu/address/model/record/Weight.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "package seedu.address.model.record;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": " * Represents a Bmi Record\u0027s weight in the record book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidWeight(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "public class Weight {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        \"Weight should only contain numeric characters and at most a single decimal,\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            + \" and it should not be blank\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^+?\\\\d*\\\\.{0,1}\\\\d+$\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    private final double weight;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public Weight(String weight) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        requireNonNull(weight);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        checkArgument(isValidWeight(weight), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        this.weight \u003d Double.parseDouble(weight);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public static boolean isValidWeight(String test) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            || (other instanceof Weight // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            \u0026\u0026 weight \u003d\u003d ((Weight) other).weight); // state check"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        return ((Double) weight).hashCode();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        return Double.toString(weight);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "scwaterbear": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/model/record/exceptions/DuplicateRecordException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "package seedu.address.model.record.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": " * Signals that the operation will result in duplicate Persons (Persons are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "public class DuplicateRecordException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public DuplicateRecordException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        super(\"Operation would result in duplicate records\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "scwaterbear": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/record/exceptions/RecordNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "package seedu.address.model.record.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": " * Signals that the operation is unable to find the specified person."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "public class RecordNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "scwaterbear": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/Tag.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * Represents a Tag in the address book. Guarantees: immutable; name is valid as declared in {@link"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 2,
      "-": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.sgm.model.food.Food;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.sgm.model.food.FoodBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.sgm.model.food.UniqueFoodList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person[] getSamplePersons() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person[]{"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Geylang Street 29, #06-40\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"friends\")),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"colleagues\", \"friends\")),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"neighbours\")),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"family\")),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 47 Tampines Street 20, #17-35\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"classmates\")),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 45 Aljunied Street 85, #11-31\"),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"colleagues\"))"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static Food[] getSampleFoods() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return new Food[]{"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        new FoodBuilder().build(),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        new FoodBuilder().withFoodName(\"Potatodfafadfafadf\").withFoodType(\"sv\").build(),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        new FoodBuilder().withFoodName(\"Banana\").withFoodType(\"f\").build(),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        new FoodBuilder().withFoodName(\"Chicken\").withFoodType(\"p\").build(),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        new FoodBuilder().withFoodName(\"Potato chips\").withFoodType(\"s\").build(),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        new FoodBuilder().withFoodName(\"Chicken Rice\").withFoodType(\"m\").build(),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        new FoodBuilder().withFoodName(\"Broccoli2\").build(),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        new FoodBuilder().withFoodName(\"Potato2\").withFoodType(\"sv\").build(),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        new FoodBuilder().withFoodName(\"Banana2\").withFoodType(\"f\").build(),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        new FoodBuilder().withFoodName(\"Chicken2\").withFoodType(\"p\").build(),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        new FoodBuilder().withFoodName(\"Potato chips2\").withFoodType(\"s\").build(),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        new FoodBuilder().withFoodName(\"Chicken Rice2\").withFoodType(\"m\").build(),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        new FoodBuilder().withFoodName(\"Broccoli3\").build(),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        new FoodBuilder().withFoodName(\"Potato3\").withFoodType(\"sv\").build(),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        new FoodBuilder().withFoodName(\"Banana3\").withFoodType(\"f\").build(),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        new FoodBuilder().withFoodName(\"Chicken3\").withFoodType(\"p\").build(),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        new FoodBuilder().withFoodName(\"Potato chips3\").withFoodType(\"s\").build(),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        new FoodBuilder().withFoodName(\"Chicken Rice3\").withFoodType(\"m\").build()"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        };"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook sampleAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person samplePerson : getSamplePersons()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            sampleAb.addPerson(samplePerson);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static UniqueFoodList getSampleFoodList() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        UniqueFoodList sampleFl \u003d new UniqueFoodList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        for (Food sampleFood : getSampleFoods()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            sampleFl.add(sampleFood);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return sampleFl;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(Tag::new)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 36,
      "-": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/AddressBookStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a storage for {@link seedu.address.model.AddressBook}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public interface AddressBookStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Returns AddressBook data as a {@link ReadOnlyAddressBook}. Returns {@code Optional.empty()} if storage file is"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException             if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #getAddressBookFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the given {@link ReadOnlyAddressBook} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param addressBook cannot be null."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #saveAddressBook(ReadOnlyAddressBook)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 4,
      "-": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/GeneralStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * Encapsulates the main storage functions for the main data holders and its corresponding"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * {@code JsonSerializableContent}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * {@code T} is the data holder type while {@code U} is the specific JsonSerializableContent type."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * For example, if T is {@code UniqueFoodList}, then U is {@code JsonSerializableFoodList}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "public interface GeneralStorage\u003cT, U extends JsonSerializableContent\u003cT\u003e\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    Path getFilePath();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Returns stored data as a {@link T}. Returns {@code Optional.empty()} if storage file is"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * not found."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @throws IOException             if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    Optional\u003cT\u003e read() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @see #read()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    Optional\u003cT\u003e read(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Saves the given {@link T} to the storage."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @param content cannot be null."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    void save(T content) throws IOException;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @see #save(T)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    void save(T content, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedFood.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.sgm.model.food.Calorie;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.sgm.model.food.Fat;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.sgm.model.food.Food;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.sgm.model.food.FoodName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.sgm.model.food.FoodType;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.sgm.model.food.Gi;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.sgm.model.food.Sugar;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * Represents Jackson-friendly version of {@link Food}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "class JsonAdaptedFood {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Food\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private final String foodName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private final String foodType;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private final String calorie;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private final String gi;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private final String sugar;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private final String fat;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Constructs a {@code JsonAdaptedFood} with the given food details."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public JsonAdaptedFood(@JsonProperty(\"foodName\") String foodName, @JsonProperty(\"foodType\") String foodType,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "                           @JsonProperty(\"calorie\") String calorie, @JsonProperty(\"gi\") String gi,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "                           @JsonProperty(\"sugar\") String sugar, @JsonProperty(\"fat\") String fat) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.foodName \u003d foodName;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.foodType \u003d foodType;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.calorie \u003d calorie;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.gi \u003d gi;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.sugar \u003d sugar;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.fat \u003d fat;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Converts a given {@code Food} into this class for Jackson use."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public JsonAdaptedFood(Food source) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        foodName \u003d source.getFoodName().foodName;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        foodType \u003d source.getFoodType().getShortHand();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        calorie \u003d source.getCalorie().value;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        gi \u003d source.getGi().value;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        sugar \u003d source.getSugar().value;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        fat \u003d source.getFat().value;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Converts this Jackson-friendly adapted food object into the model\u0027s {@code food} object."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted food."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public Food toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        if (foodName \u003d\u003d null) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "                FoodName.class.getSimpleName()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        if (!FoodName.isValidName(foodName)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            throw new IllegalValueException(FoodName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        final FoodName modelFoodName \u003d new FoodName(foodName);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        if (foodType \u003d\u003d null) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "                FoodType.class.getSimpleName()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        final FoodType modelFoodType;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            modelFoodType \u003d FoodType.getFrom(foodType);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            throw new IllegalValueException(FoodType.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        if (calorie \u003d\u003d null) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Calorie.class.getSimpleName()));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        if (!Calorie.isValidValue(calorie)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            throw new IllegalValueException(Calorie.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        final Calorie modelCalorie \u003d new Calorie(calorie);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        if (gi \u003d\u003d null) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Gi.class.getSimpleName()));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        if (!Gi.isValidValue(gi)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            throw new IllegalValueException(Gi.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        final Gi modelGi \u003d new Gi(gi);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        if (sugar \u003d\u003d null) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Sugar.class.getSimpleName()));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        if (!Sugar.isValidValue(sugar)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            throw new IllegalValueException(Sugar.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        final Sugar modelSugar \u003d new Sugar(sugar);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        if (fat \u003d\u003d null) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Fat.class.getSimpleName()));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        if (!Fat.isValidValue(fat)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            throw new IllegalValueException(Fat.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        final Fat modelFat \u003d new Fat(fat);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return new Food(modelFoodName, modelCalorie, modelGi, modelSugar, modelFat, modelFoodType);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 121
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAddressBookStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access AddressBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAddressBookStorage implements AddressBookStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonAddressBookStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAddressBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readAddressBook()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cJsonSerializableAddressBook\u003e jsonAddressBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            filePath, JsonSerializableAddressBook.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!jsonAddressBook.isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.of(jsonAddressBook.get().toModelType());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #saveAddressBook(ReadOnlyAddressBook)}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBook);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableAddressBook(addressBook), filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 2,
      "-": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonFoodListStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.sgm.model.food.UniqueFoodList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * Represents the specific version {@code JsonGeneralStorage} about food list."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "public class JsonFoodListStorage extends JsonGeneralStorage\u003cUniqueFoodList, JsonSerializableFoodList\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public JsonFoodListStorage(Path filePath) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        super(filePath, UniqueFoodList.class, JsonSerializableFoodList.class);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonGeneralStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import java.lang.reflect.InvocationTargetException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * This is a class to access data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "public class JsonGeneralStorage\u003cT, U extends JsonSerializableContent\u003cT\u003e\u003e implements GeneralStorage\u003cT, U\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonGeneralStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private Class\u003cT\u003e itemClassType;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private Class\u003cU\u003e jsonClassType;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    //Due the type erasure of generics, we have to pass the specific class type, such as UniqueFoodList.class"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public JsonGeneralStorage(Path filePath, Class\u003cT\u003e itemClassType, Class\u003cU\u003e jsonClassType) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.itemClassType \u003d itemClassType;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.jsonClassType \u003d jsonClassType;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public Path getFilePath() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public Optional\u003cT\u003e read() throws DataConversionException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return read(filePath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Similar to {@link #read()}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public Optional\u003cT\u003e read(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        Optional\u003cU\u003e jsonContent \u003d JsonUtil.readJsonFile(filePath, jsonClassType);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        if (jsonContent.isEmpty()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            return Optional.of(jsonContent.get().toModelType());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public void save(T content) throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        save(content, filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Similar to {@link #save(T)}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public void save(T content, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        requireNonNull(content);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            JsonUtil.saveJsonFile(jsonClassType.getConstructor(itemClassType).newInstance(content), filePath);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        } catch (NoSuchMethodException | IllegalAccessException | InvocationTargetException"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            | InstantiationException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            assert false : \"Incorrect implement of JsonSerializableItem class\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 95
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableContent.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * Represents one type of Immutable content that is serializable to JSON format."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "public interface JsonSerializableContent\u003cT\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Converts the content into the model\u0027s corresponding object."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public T toModelType() throws IllegalValueException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableFoodList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.sgm.model.food.Food;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.sgm.model.food.UniqueFoodList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * Represents an Immutable FoodList that is serializable to JSON format."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "@JsonRootName(value \u003d \"foodlist\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "public class JsonSerializableFoodList implements JsonSerializableContent\u003cUniqueFoodList\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_FOOD \u003d \"Food list contains duplicate food(s).\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private final List\u003cJsonAdaptedFood\u003e foods \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Constructs a {@code JsonSerializableAddressBook} with the given foods."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public JsonSerializableFoodList(@JsonProperty(\"foods\") List\u003cJsonAdaptedFood\u003e foods) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.foods.addAll(foods);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Converts a given {@code UniqueFoodList} into this class for Jackson use."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableFoodList}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public JsonSerializableFoodList(UniqueFoodList source) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        foods.addAll(source.asUnmodifiableObservableList().stream().map(JsonAdaptedFood::new)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Converts this food list into the model\u0027s {@code UniqueFoodList} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public UniqueFoodList toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        UniqueFoodList foodList \u003d new UniqueFoodList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        for (JsonAdaptedFood jsonAdaptedFood : foods) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            Food food \u003d jsonAdaptedFood.toModelType();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            if (foodList.contains(food)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_FOOD);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            foodList.add(food);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return foodList;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonUserPrefsStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 1,
      "-": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.sgm.model.food.UniqueFoodList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Storage extends AddressBookStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public Path getFoodListFilePath();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public Optional\u003cUniqueFoodList\u003e readFoodList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public Optional\u003cUniqueFoodList\u003e readFoodList(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public void saveFoodList(UniqueFoodList foodList) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public void saveFoodList(UniqueFoodList foodList, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 11,
      "-": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.sgm.model.food.UniqueFoodList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Manages storage of AddressBook data in local storage."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBookStorage addressBookStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private JsonFoodListStorage jsonFoodListStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public StorageManager(AddressBookStorage addressBookStorage, UserPrefsStorage userPrefsStorage,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "                          JsonFoodListStorage jsonFoodListStorage) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookStorage \u003d addressBookStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.jsonFoodListStorage \u003d jsonFoodListStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.readAddressBook(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookStorage.saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d FoodList methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public Path getFoodListFilePath() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return jsonFoodListStorage.getFilePath();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public Optional\u003cUniqueFoodList\u003e readFoodList() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return readFoodList(jsonFoodListStorage.getFilePath());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public Optional\u003cUniqueFoodList\u003e readFoodList(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return jsonFoodListStorage.read(filePath);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public void saveFoodList(UniqueFoodList foodList) throws IOException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        saveFoodList(foodList, jsonFoodListStorage.getFilePath());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public void saveFoodList(UniqueFoodList foodList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        jsonFoodListStorage.save(foodList, filePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 32,
      "-": 76
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/UserPrefsStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a storage for {@link seedu.address.model.UserPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Returns UserPrefs data from storage. Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException             if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the given {@link seedu.address.model.ReadOnlyUserPrefs} to the storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 3,
      "-": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/Achievements.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import javafx.scene.layout.TilePane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * A ui for the user\u0027s list of achievements, displayed in tiles."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": "public class Achievements extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private static final String FXML \u003d \"Achievements.fxml\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private TilePane achievementsTilePane;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public Achievements() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public TilePane getTilePane() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return achievementsTilePane;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whneo97": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/AchievementsImageView.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * A ui for a single ImageView used to contain a tile representing the user\u0027s achievements"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": "public class AchievementsImageView extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private static final String FXML \u003d \"AchievementsImageView.fxml\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private ImageView achievementsImageView;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public AchievementsImageView() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public ImageView getImageView() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return achievementsImageView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whneo97": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/AchievementsPane.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": "public class AchievementsPane extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private static final String FXML \u003d \"AchievementsPane.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private static String displayImage \u003d \"/images/user.png\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private AchievementsTitle achievementsTitle;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private Achievements achievements;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private Profile profile;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private HBox achievementsTitlePlaceholder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private HBox achievementsPlaceholder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public AchievementsPane() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        achievementsTitle \u003d new AchievementsTitle(\"My Achievements\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                \"Hi Amy, here are the list of achievements you have collected so far.\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        achievementsTitlePlaceholder.getChildren().add(achievementsTitle.getRoot());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        achievements \u003d new Achievements();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        for (int i \u003d 0; i \u003c\u003d 24; i++) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            int n \u003d i % 8 + 1;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            Image img \u003d new Image(MainApp.class.getResourceAsStream(\"/images/sample_achievement_\" + n + \".png\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            ImageView imageView \u003d new AchievementsImageView().getImageView();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            imageView.setImage(img);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            achievements.getTilePane().getChildren().add(imageView);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        achievementsPlaceholder.getChildren().add(achievements.getRoot());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whneo97": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/AchievementsTitle.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * A ui for the title of the achievements window used to display the user\u0027s list of"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * achievements."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": "public class AchievementsTitle extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private static final String FXML \u003d \"AchievementsTitle.fxml\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private Label achievementsTitleLabel;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private Label achievementsTitleDescLabel;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public AchievementsTitle(String title, String titleDesc) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        achievementsTitleLabel.setText(title);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        achievementsTitleDescLabel.setText(titleDesc);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whneo97": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/BioPane.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": "public class BioPane extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private static final String FXML \u003d \"BioPane.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private static String displayImage \u003d \"/images/user.png\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private BioTable bioTable;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private Profile profile;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private HBox profilePlaceholder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private VBox bioTablePlaceholder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public BioPane() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        Image img \u003d new Image(MainApp.class.getResourceAsStream(displayImage));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        // SAMPLE DATA"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        BioTableFieldDataPair name \u003d new BioTableFieldDataPair(\"Name:\", \"Amy\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        BioTableFieldDataPair nric \u003d new BioTableFieldDataPair(\"NRIC:\", \"S1234567Z\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        BioTableFieldDataPair gender \u003d new BioTableFieldDataPair(\"Gender:\", \"Female\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        BioTableFieldDataPair dob \u003d new BioTableFieldDataPair(\"DOB:\", \"21/03/1940\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        BioTableFieldDataPair hp \u003d new BioTableFieldDataPair(\"HP:\", \"98765432\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        BioTableFieldDataPair emergencyHp \u003d new BioTableFieldDataPair(\"Emergency HP:\", \"91234567\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        BioTableFieldDataPair medicalCondition \u003d new BioTableFieldDataPair(\"Medical Condition:\","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                \"Type II Diabetes, High Blood Pressure\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        BioTableFieldDataPair address \u003d new BioTableFieldDataPair(\"Address:\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                \"Blk 123 Example Road\\n#12-34\\nS(612345)\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        BioTableFieldDataPair dpPath \u003d new BioTableFieldDataPair(\"DP Path:\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                \"/Users/Amy/dp.png\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        BioTableFieldDataPair bgColour \u003d new BioTableFieldDataPair(\"Background Colour:\", \"navy-blue\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        BioTableFieldDataPair fontColour \u003d new BioTableFieldDataPair(\"Font Colour:\", \"yellow\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        BioTableFieldDataPair myGoals \u003d new BioTableFieldDataPair(\"My Goals:\","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                \"lose 4kg from 29/09/2019 to 30/09/2019\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        ObservableList\u003cBioTableFieldDataPair\u003e list \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        list.addAll(name, nric, gender, dob, hp, emergencyHp, medicalCondition, address, dpPath, bgColour,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                fontColour, myGoals);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        profile \u003d new Profile(img, \"Amy\", \"\\\"If at first you don\u0027t succeed, call it version 1.0.\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                + \"\\\"\\n-Anonymous\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        profilePlaceholder.getChildren().add(profile.getRoot());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        bioTable \u003d new BioTable();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        bioTable.getTableView().setItems(list);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        bioTablePlaceholder.getChildren().add(bioTable.getRoot());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whneo97": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/BioTable.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import javafx.scene.control.TableColumn;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import javafx.scene.control.TableView;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import javafx.scene.control.cell.PropertyValueFactory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * A ui for the table that is used to display the user\u0027s biography."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": "public class BioTable extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private static final String FXML \u003d \"BioTable.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private TableView\u003cBioTableFieldDataPair\u003e tableView;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private TableColumn\u003cString, String\u003e field;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private TableColumn\u003cString, String\u003e data;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public BioTable() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        field.setCellValueFactory(new PropertyValueFactory\u003cString, String\u003e(\"field\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        data.setCellValueFactory(new PropertyValueFactory\u003cString, String\u003e(\"data\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        tableView.setSelectionModel(null);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public TableView\u003cBioTableFieldDataPair\u003e getTableView() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return this.tableView;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whneo97": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/BioTableFieldDataPair.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import javafx.beans.property.SimpleStringProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * A class that fields to display in the bioTable displayed to the user."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Reference to example from: https://docs.oracle.com/javafx/2/ui_controls/table-view.htm"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": "public class BioTableFieldDataPair {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private final SimpleStringProperty field;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private final SimpleStringProperty data;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    BioTableFieldDataPair(String field, String data) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        this.field \u003d new SimpleStringProperty(field);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        this.data \u003d new SimpleStringProperty(data);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public String getField() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return field.get();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void setField(String field) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        this.field.set(field);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public String getData() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return data.get();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void setData(String data) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        this.data.set(data);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whneo97": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/DisplayPaneType.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * Consists the different type of main window contents based on different commands."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "public enum DisplayPaneType {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    MAIN,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    BIO,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    ACHVM,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    RECM_FOOD,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/FoodCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import javafx.scene.layout.Background;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import javafx.scene.layout.BackgroundFill;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import javafx.scene.layout.CornerRadii;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import javafx.scene.shape.Rectangle;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.sgm.model.food.Food;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * Displays information of a {@code Food}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "public class FoodCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private static final String FXML \u003d \"FoodListCard.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private static final String CALORIE_TEXT \u003d \"Calorie\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private static final String GI_TEXT \u003d \"GI\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private static final String SUGAR_TEXT \u003d \"Sugar\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private static final String FAT_TEXT \u003d \"Fat\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private static final String POSTFIX \u003d \":  \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private static final Color ORANGE \u003d Color.rgb(240, 147, 43);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private static final Color GREEN \u003d Color.rgb(186, 220, 88);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private static final Color YELLOW \u003d Color.rgb(249, 202, 36);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private static final Color BLUE \u003d Color.rgb(126, 214, 223);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private static final Color PINK \u003d Color.rgb(214, 162, 232);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private static final Color RED \u003d Color.rgb(255, 127, 80);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public final Food food;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private Rectangle header;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private Label foodName;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private Label calorie;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private Label gi;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private Label sugar;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private Label fat;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public FoodCard(Food food) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.food \u003d food;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        setTitleBackgroundColor();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        foodName.setText(food.getFoodName().foodName);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        calorie.setText(CALORIE_TEXT + POSTFIX + food.getCalorie().value);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        gi.setText(GI_TEXT + POSTFIX + food.getGi().value);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        sugar.setText(SUGAR_TEXT + POSTFIX + food.getSugar().value);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        fat.setText(FAT_TEXT + POSTFIX + food.getFat().value);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private void setTitleBackgroundColor() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        switch (food.getFoodType()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        case NON_STARCHY_VEGETABLE:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            header.setFill(GREEN);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        case STARCHY_VEGETABLE:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            header.setFill(ORANGE);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        case FRUIT:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            header.setFill(YELLOW);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        case PROTEIN:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            header.setFill(BLUE);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        case SNACK:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            header.setFill(PINK);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        case MEAL:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            header.setFill(RED);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            assert false : \"Food type is not found.\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private Background backgroundBuilder(Color color) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return new Background(new BackgroundFill(color, CornerRadii.EMPTY, Insets.EMPTY));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 91
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/FoodFlowPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.sgm.model.food.Food;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * Represents a panel of a list of foods."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "public class FoodFlowPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private static final String FXML \u003d \"FoodFlowPanel.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(FoodFlowPanel.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private FlowPane flowPane;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private ScrollPane mainScrollPanel;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public FoodFlowPanel(ObservableList\u003cFood\u003e foodList) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        foodList.addListener(new ListChangeListener\u003cFood\u003e() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            public void onChanged(Change\u003c? extends Food\u003e c) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "                refreshFlowPanel(foodList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        });"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        foodList.stream().sorted(Comparator.comparing(food -\u003e food.getFoodType()))"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            .forEach(food -\u003e flowPane.getChildren().add(new FoodCard(food).getRoot()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        mainScrollPanel.setContent(flowPane);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Updates the food recommendation panel."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private void refreshFlowPanel(ObservableList\u003cFood\u003e foodList) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        flowPane.getChildren().clear();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        for (Food food : foodList) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            flowPane.getChildren().add(new FoodCard(food).getRoot());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HelpWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://se-education.org/addressbook-level3/UserGuide.html\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @throws IllegalStateException \u003cul\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003cli\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003c/li\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003cli\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003c/li\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003cli\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               if this method is called on the primary stage."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003c/li\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003cli\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003c/li\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003c/ul\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 2,
      "-": 100
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainDisplayPane.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * A class containing enumerations, storing the possible Main Display Panes to be displayed to the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": "public class MainDisplayPane {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private Map\u003cDisplayPaneType, UiPart\u003cRegion\u003e\u003e map;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private DisplayPaneType currPaneType;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public MainDisplayPane(Logic logic) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        map \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        currPaneType \u003d DisplayPaneType.MAIN;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns a UiPart representing the Main Display Pane observed by the user."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @param displayPaneType An enumerated display pane to retrieve or store the corresponding type of UiPart."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @return A UiPart representing the Main Display Pane observed by the user."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public UiPart\u003cRegion\u003e get(DisplayPaneType displayPaneType) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        switch (displayPaneType) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        case MAIN:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            return getMappedPane(displayPaneType, () -\u003e new PersonListPanel(logic.getFilteredPersonList()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        case BIO:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            return getMappedPane(displayPaneType, BioPane::new);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        case ACHVM:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            return getMappedPane(displayPaneType, AchievementsPane::new);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        case RECM_FOOD:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            return getMappedPane(displayPaneType, () -\u003e new FoodFlowPanel(logic.getFilterFoodList()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns a UiPart to be displayed to the user, after adding it to the map of display panes, if not yet added."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @param displayPaneType An enumerated display pane to retrieve or store the corresponding type of UiPart."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param newPaneSupplier A Supplier object containing the UiPart to be returned if a mapping for it does"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     *                        not exist yet."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @return A UiPart representing the Main Display Pane observed by the user."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private UiPart\u003cRegion\u003e getMappedPane(DisplayPaneType displayPaneType, Supplier\u003cUiPart\u003cRegion\u003e\u003e newPaneSupplier) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        UiPart\u003cRegion\u003e mappedPane \u003d map.get(displayPaneType);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        currPaneType \u003d displayPaneType;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        if (mappedPane \u003d\u003d null) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            mappedPane \u003d newPaneSupplier.get();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            map.put(displayPaneType, mappedPane);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return mappedPane;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public DisplayPaneType getCurrPaneType() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return currPaneType;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 24,
      "whneo97": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * The Main Window. Provides the basic application layout containing a menu bar and space where other JavaFX elements"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * can be placed."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonListPanel personListPanel;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private MainDisplayPane mainDisplayPane;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private Scene scene;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private StackPane mainDisplayPanePlaceholder;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        mainDisplayPane \u003d new MainDisplayPane(logic);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public Scene getScene() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return scene;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    void fillInnerParts(String imagePath) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        ImageView imageView \u003d new ImageView(imagePath);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        imageView.fitWidthProperty().bind(mainDisplayPanePlaceholder.widthProperty());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        imageView.fitHeightProperty().bind(mainDisplayPanePlaceholder.heightProperty());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        mainDisplayPanePlaceholder.getChildren().add(imageView);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Switches the main display pane to the specified UI part."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public void switchToMainDisplayPane(DisplayPaneType displayPaneType) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        if (!displayPaneType.equals(mainDisplayPane.getCurrPaneType())) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            mainDisplayPanePlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            mainDisplayPanePlaceholder.getChildren()"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "                .add(requireNonNull(mainDisplayPane.get(displayPaneType).getRoot()));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel getPersonListPanel() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        return personListPanel;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "                switchToMainDisplayPane(logic.getDisplayPaneType());"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "                logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "                resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 20,
      "-": 181,
      "whneo97": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX. As a consequence, UI"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * elements\u0027 variable names cannot be set to such keywords or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public final Person person;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        name.setText(person.getName().fullName);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        phone.setText(person.getPhone().value);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        address.setText(person.getAddress().value);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        email.setText(person.getEmail().value);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().stream()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard card \u003d (PersonCard) other;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 person.equals(card.person);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 2,
      "-": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/Profile.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * A ui for the user\u0027s profile header consisting of the user\u0027s name and customisable description."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": "public class Profile extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private static final String FXML \u003d \"Profile.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public Profile(Image displayPicture, String name, String description) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        this.displayPicture.setImage(displayPicture);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        this.name.setText(name);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        this.description.setText(description);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whneo97": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/Ui.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * API of UI component"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Starts the UI (and the App)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 3,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/address_book_32.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private static final String BACKGROUND_PATH \u003d \"/images/background.png\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            mainWindow.fillInnerParts(BACKGROUND_PATH);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters. This method only returns after the user has"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * closed the alert dialog."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e}, and exits the application after the"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * user has closed the alert dialog."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 6,
      "-": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiPart.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc. It contains a scene graph with"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * a root node of type {@code T}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Resource folder where FXML files are stored."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL. The FXML file must not specify the {@code fx:controller}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * attribute."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object. The FXML file must not specify the {@code"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * fx:controller} attribute."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root     Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 22,
      "-": 71
    }
  },
  {
    "path": "src/main/java/seedu/sgm/model/food/Calorie.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "package seedu.sgm.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * Specifies the nutrition value of Calorie."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "public class Calorie extends NutritionValue {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Constructs a {@code Calorie}."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @param calorieValue a valid calorie value"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public Calorie(String calorieValue) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        super(calorieValue);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 17
    }
  },
  {
    "path": "src/main/java/seedu/sgm/model/food/Fat.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "package seedu.sgm.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * Specifies the nutrition value of Fat."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "public class Fat extends NutritionValue {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Constructs a {@code Fat}."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @param fatValue a valid fat value"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public Fat(String fatValue) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        super(fatValue);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 17
    }
  },
  {
    "path": "src/main/java/seedu/sgm/model/food/Food.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "package seedu.sgm.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * Represents a Food in the food recommendation list. Guarantees: details are present and not null, field values are"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * validated, immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "public class Food {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private final FoodName foodName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private final Calorie calorie;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private final Gi gi;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private final Sugar sugar;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private final Fat fat;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private final FoodType foodType;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public Food(FoodName foodName, Calorie calorie, Gi gi, Sugar sugar, Fat fat, FoodType foodType) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        requireAllNonNull(foodName, calorie, gi, sugar, fat);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.foodName \u003d foodName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.calorie \u003d calorie;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.gi \u003d gi;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.sugar \u003d sugar;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.fat \u003d fat;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.foodType \u003d foodType;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public FoodName getFoodName() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return foodName;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public Calorie getCalorie() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return calorie;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public Gi getGi() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return gi;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public Sugar getSugar() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return sugar;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public Fat getFat() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return fat;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public FoodType getFoodType() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return foodType;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Returns true if both foods have the same food names."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public boolean isSameFood(Food other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        if (!(other instanceof Food)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return this.foodName.equals(other.foodName);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return Objects.hash(foodName, calorie, gi, sugar, fat, foodType);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        builder.append(getFoodName())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "                .append(\" Type: \")"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "                .append(getFoodType().getTypeName())"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "                .append(\" Calorie: \")"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "                .append(getCalorie())"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "                .append(\" GI: \")"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "                .append(getGi())"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "                .append(\" Sugar: \")"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "                .append(getSugar())"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "                .append(\" Fat: \")"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "                .append(getFat());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 90
    }
  },
  {
    "path": "src/main/java/seedu/sgm/model/food/FoodBuilder.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "package seedu.sgm.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * A utility class to help with building Food objects."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "public class FoodBuilder {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final String DEFAULT_FOOD_NAME \u003d \"FOOD\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final String DEFAULT_CALORIE \u003d \"34.0\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final String DEFAULT_GI \u003d \"10.0\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final String DEFAULT_SUGAR \u003d \"1.7\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final String DEFAULT_FAT \u003d \"0.4\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final String DEFAULT_TYPE \u003d \"nsv\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private FoodName foodName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private Calorie calorie;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private Gi gi;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private Sugar sugar;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private Fat fat;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private FoodType foodType;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Initializes the FoodBuilder with the default data."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public FoodBuilder() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.foodName \u003d new FoodName(DEFAULT_FOOD_NAME);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.calorie \u003d new Calorie(DEFAULT_CALORIE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.gi \u003d new Gi(DEFAULT_GI);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.sugar \u003d new Sugar(DEFAULT_SUGAR);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.fat \u003d new Fat(DEFAULT_FAT);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            this.foodType \u003d FoodType.getFrom(DEFAULT_TYPE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            assert false : \"The type cannot be wrong.\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Initializes the FoodBuilder with the data of {@code foodToCopy}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public FoodBuilder(Food foodToCopy) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.foodName \u003d foodToCopy.getFoodName();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.calorie \u003d foodToCopy.getCalorie();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.gi \u003d foodToCopy.getGi();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.sugar \u003d foodToCopy.getSugar();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.fat \u003d foodToCopy.getFat();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.foodType \u003d foodToCopy.getFoodType();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Sets the {@code FoodName} of the {@code Food} that we are building."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public FoodBuilder withFoodName(String foodName) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.foodName \u003d new FoodName(foodName);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Sets the {@code Calorie} of the {@code Food} that we are building."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public FoodBuilder withCalorie(String calorie) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.calorie \u003d new Calorie(calorie);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Sets the {@code Gi} of the {@code Food} that we are building."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public FoodBuilder withGi(String gi) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.gi \u003d new Gi(gi);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Sets the {@code Sugar} of the {@code Food} that we are building."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public FoodBuilder withSugar(String sugar) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.sugar \u003d new Sugar(sugar);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Sets the {@code Fat} of the {@code Food} that we are building."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public FoodBuilder withFat(String fat) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.fat \u003d new Fat(fat);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Sets the {@code Fat} of the {@code Food} that we are building."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public FoodBuilder withFoodType(String foodType) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            this.foodType \u003d FoodType.getFrom(foodType);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            assert false : \"The type cannot be wrong.\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public Food build() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return new Food(foodName, calorie, gi, sugar, fat, foodType);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 108
    }
  },
  {
    "path": "src/main/java/seedu/sgm/model/food/FoodName.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "package seedu.sgm.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * Represents the name of \u003ccode\u003eFood\u003c/code\u003e in the recommended food list. Guarantees: immutable; is valid as declared in"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "public class FoodName {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces. It should not be blank \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "                + \"and longer than 30 characters\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * The first character of the food must not be a whitespace,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public final String foodName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Constructs a {@code FoodName}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @param foodName a valid food name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public FoodName(String foodName) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        requireNonNull(foodName);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        checkArgument(isValidName(foodName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.foodName \u003d foodName;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Returns true if a given string is a valid food name."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return test.matches(VALIDATION_REGEX) \u0026\u0026 test.length() \u003c\u003d 30;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public String getFoodName() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return foodName;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return foodName;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        if (!(other instanceof FoodName)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return foodName.equals(((FoodName) other).foodName);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return foodName.hashCode();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 67
    }
  },
  {
    "path": "src/main/java/seedu/sgm/model/food/FoodNameContainsKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "package seedu.sgm.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * Tests that a {@code Food}\u0027s {@code FoodName} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "public class FoodNameContainsKeywordsPredicate implements Predicate\u003cFood\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public FoodNameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public boolean test(Food food) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(food.getFoodName().toString(), keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "                || (other instanceof FoodNameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "                \u0026\u0026 keywords.equals(((FoodNameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 31
    }
  },
  {
    "path": "src/main/java/seedu/sgm/model/food/FoodType.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "package seedu.sgm.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.ABBR_FRUIT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.ABBR_MEAL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.ABBR_NON_STARCHY_VEGETABLE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.ABBR_PROTEIN;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.ABBR_SNACK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.ABBR_STARCHY_VEGETABLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.FLAG_SIGNAL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * Represents all useful food types for categorizing food recommendations."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "public enum FoodType {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    NON_STARCHY_VEGETABLE(\"Non-starchy vegetable\", ABBR_NON_STARCHY_VEGETABLE),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    STARCHY_VEGETABLE(\"Starchy vegetable\", ABBR_STARCHY_VEGETABLE),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    FRUIT(\"Fruit\", ABBR_FRUIT),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    PROTEIN(\"Protein\", ABBR_PROTEIN),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    SNACK(\"Snack\", ABBR_SNACK),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    MEAL(\"Meal\", ABBR_MEAL);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Food types should only be one of the following\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        + \"nsv(Non-starchy vegetable); sv(Starchy vegetable); f(Fruit); p(Protein); s(Snack); m(Meal) \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private String type;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private String shortHand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    FoodType(String type, String shortHand) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.shortHand \u003d shortHand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static FoodType getFrom(String shortHandType) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        switch (shortHandType.toLowerCase()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        case ABBR_NON_STARCHY_VEGETABLE:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        case FLAG_SIGNAL + ABBR_NON_STARCHY_VEGETABLE:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            return NON_STARCHY_VEGETABLE;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        case ABBR_STARCHY_VEGETABLE:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        case FLAG_SIGNAL + ABBR_STARCHY_VEGETABLE:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            return STARCHY_VEGETABLE;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        case ABBR_FRUIT:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        case FLAG_SIGNAL + ABBR_FRUIT:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            return FRUIT;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        case ABBR_PROTEIN:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        case FLAG_SIGNAL + ABBR_PROTEIN:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            return PROTEIN;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        case ABBR_SNACK:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        case FLAG_SIGNAL + ABBR_SNACK:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            return SNACK;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        case ABBR_MEAL:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        case FLAG_SIGNAL + ABBR_MEAL:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            return MEAL;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            throw new ParseException(\"Invalid food type\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public String getTypeName() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public String getShortHand() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return shortHand;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 66
    }
  },
  {
    "path": "src/main/java/seedu/sgm/model/food/FoodTypeIsWantedPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "package seedu.sgm.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * Tests that a {@code Food} belongs to any given {@code FoodType}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "public class FoodTypeIsWantedPredicate implements Predicate\u003cFood\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private final List\u003cFoodType\u003e foodTypes;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public FoodTypeIsWantedPredicate(List\u003cFoodType\u003e foodTypes) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.foodTypes \u003d foodTypes;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public boolean test(Food food) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return foodTypes.stream()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            .anyMatch(foodType -\u003e food.getFoodType().equals(foodType));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            || (other instanceof FoodTypeIsWantedPredicate"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            \u0026\u0026 foodTypes.equals(((FoodTypeIsWantedPredicate) other).foodTypes));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 28
    }
  },
  {
    "path": "src/main/java/seedu/sgm/model/food/Gi.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "package seedu.sgm.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * Specifies the nutrition value of glycemic index(GI)."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "public class Gi extends NutritionValue {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Constructs a {@code GI}."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @param giValue a valid glycemic index value"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public Gi(String giValue) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        super(giValue);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 17
    }
  },
  {
    "path": "src/main/java/seedu/sgm/model/food/NutritionValue.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "package seedu.sgm.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * Represents a kind of nutrition value of \u003ccode\u003eFood\u003c/code\u003e in the recommended food list. Guarantees: immutable; is"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * valid as declared in {@link #isValidValue(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "public class NutritionValue {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            \"Nutrition value should only contain number and should be non-negative.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^[+]?\\\\d+\\\\.?\\\\d*\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Constructs a {@code NutritionValue}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @param value a valid nutrition value"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public NutritionValue(String value) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        requireNonNull(value);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        checkArgument(isValidValue(value.toString()), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.value \u003d value;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Returns true if a given string is a valid nutrition value."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static boolean isValidValue(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Returns the double value indicated in the {@code value} string"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public double getNumericalValue() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return Double.parseDouble(value);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        if (!(other instanceof NutritionValue)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return value.equals(((NutritionValue) other).value);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 60
    }
  },
  {
    "path": "src/main/java/seedu/sgm/model/food/Sugar.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "package seedu.sgm.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * Specifies the nutrition value of Sugar."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "public class Sugar extends NutritionValue {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Constructs a {@code Sugar}."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @param sugarValue a valid sugar value"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public Sugar(String sugarValue) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        super(sugarValue);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 17
    }
  },
  {
    "path": "src/main/java/seedu/sgm/model/food/TypicalFoods.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "package seedu.sgm.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * Tests."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "public class TypicalFoods {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final Food BROCCOLI \u003d new FoodBuilder().build();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final Food POTATO \u003d new FoodBuilder().withFoodName(\"Potatodfafadfafadf\").withFoodType(\"sv\").build();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final Food BANANA \u003d new FoodBuilder().withFoodName(\"Banana\").withFoodType(\"f\").build();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final Food CHICKEN \u003d new FoodBuilder().withFoodName(\"Chicken\").withFoodType(\"p\").build();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final Food POTATO_CHIPS \u003d new FoodBuilder().withFoodName(\"Potato chips\").withFoodType(\"s\").build();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final Food CHICKEN_RICE \u003d new FoodBuilder().withFoodName(\"Chicken Rice\").withFoodType(\"m\").build();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final Food BROCCOLI2 \u003d new FoodBuilder().withFoodName(\"Broccoli2\").build();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final Food POTATO2 \u003d new FoodBuilder().withFoodName(\"Potato2\").withFoodType(\"sv\").build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final Food BANANA2 \u003d new FoodBuilder().withFoodName(\"Banana2\").withFoodType(\"f\").build();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final Food CHICKEN2 \u003d new FoodBuilder().withFoodName(\"Chicken2\").withFoodType(\"p\").build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final Food POTATO_CHIPS2 \u003d new FoodBuilder().withFoodName(\"Potato chips2\").withFoodType(\"s\").build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final Food CHICKEN_RICE2 \u003d new FoodBuilder().withFoodName(\"Chicken Rice2\").withFoodType(\"m\").build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final Food BROCCOLI3 \u003d new FoodBuilder().withFoodName(\"Broccoli3\").build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final Food POTATO3 \u003d new FoodBuilder().withFoodName(\"Potato3\").withFoodType(\"sv\").build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final Food BANANA3 \u003d new FoodBuilder().withFoodName(\"Banana3\").withFoodType(\"f\").build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final Food CHICKEN3 \u003d new FoodBuilder().withFoodName(\"Chicken3\").withFoodType(\"p\").build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final Food POTATO_CHIPS3 \u003d new FoodBuilder().withFoodName(\"Potato chips3\").withFoodType(\"s\").build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final Food CHICKEN_RICE3 \u003d new FoodBuilder().withFoodName(\"Chicken Rice3\").withFoodType(\"m\").build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final List\u003cFood\u003e FOODS \u003d new ArrayList\u003c\u003e(Arrays.asList(new Food[]{BROCCOLI, POTATO, BANANA, CHICKEN,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        POTATO_CHIPS, CHICKEN_RICE, BROCCOLI2, POTATO2, BANANA2, CHICKEN2, POTATO_CHIPS2, CHICKEN_RICE2, BROCCOLI3,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        POTATO3, BANANA3, CHICKEN3, POTATO_CHIPS3, CHICKEN_RICE3}));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 34
    }
  },
  {
    "path": "src/main/java/seedu/sgm/model/food/UniqueFoodList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "package seedu.sgm.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.sgm.model.food.exception.DuplicateFoodException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.sgm.model.food.exception.FoodNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * This class represents a list of foods that enforces uniqueness between its elements and does not allow nulls. A food"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * is considered unique by comparing using {@code Food#isSameFood(Food)}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * @see Food#isSameFood(Food)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "public class UniqueFoodList implements Iterable\u003cFood\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private final ObservableList\u003cFood\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private final ObservableList\u003cFood\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Returns true if the list contains an equivalent food as the given argument."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public boolean contains(Food toCheck) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameFood);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Adds a food to the list. The food must not already exist in the list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public void add(Food toAdd) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            throw new DuplicateFoodException();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Replaces the food {@code target} in the list with {@code editedFood}. {@code target} must exist in the list. The"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * food identity of {@code editedFood} must not be the same as another existing food in the list."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public void setFood(Food target, Food editedFood) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        requireAllNonNull(target, editedFood);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            throw new FoodNotFoundException();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        if (!target.isSameFood(editedFood) \u0026\u0026 contains(editedFood)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            throw new DuplicateFoodException();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        internalList.set(index, editedFood);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Removes the equivalent food from the list. The food must exist in the list."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public void remove(Food toRemove) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            throw new FoodNotFoundException();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public void setFoods(UniqueFoodList replacement) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Replaces the contents of this list with {@code foods}. {@code foods} must not contain duplicate foods."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public void setFoods(List\u003cFood\u003e foods) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        requireAllNonNull(foods);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        if (!foodsAreUnique(foods)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            throw new DuplicateFoodException();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        internalList.setAll(foods);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public ObservableList\u003cFood\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public Iterator\u003cFood\u003e iterator() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "                || (other instanceof UniqueFoodList"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueFoodList) other).internalList));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Returns true if {@code foods} contains only unique foods."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private boolean foodsAreUnique(List\u003cFood\u003e foods) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        for (int i \u003d 0; i \u003c foods.size() - 1; i++) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            for (int j \u003d i + 1; j \u003c foods.size(); j++) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "                if (foods.get(i).isSameFood(foods.get(j))) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 129
    }
  },
  {
    "path": "src/main/java/seedu/sgm/model/food/exception/DuplicateFoodException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "package seedu.sgm.model.food.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * Signals that the operation will result in duplicate Foods. Foods are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * name."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "public class DuplicateFoodException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public DuplicateFoodException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        super(\"Operation would result in duplicate foods\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 11
    }
  },
  {
    "path": "src/main/java/seedu/sgm/model/food/exception/FoodNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "package seedu.sgm.model.food.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * Signals that the operation is unable to find the specified food."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "public class FoodNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public FoodNotFoundException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        super(\"Cannot find the specified food!\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 10
    }
  },
  {
    "path": "src/main/resources/view/Achievements.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": "\u003c?import javafx.scene.layout.TilePane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": "\u003cHBox fx:id\u003d\"achievementsPlaceHolder\" HBox.hgrow\u003d\"ALWAYS\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": "      \u003cScrollPane fx:id\u003d\"achievementsScrollPane\" fitToWidth\u003d\"true\" pannable\u003d\"true\" styleClass\u003d\"profile-scroll\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": "         \u003ccontent\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            \u003cTilePane fx:id\u003d\"achievementsTilePane\" hgap\u003d\"10\" vgap\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": "         \u003c/content\u003e\u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": "   \u003cpadding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": "      \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": "   \u003c/padding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "whneo97": 18
    }
  },
  {
    "path": "src/main/resources/view/AchievementsImageView.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": "\u003cImageView fx:id\u003d\"achievementsImageView\" fitHeight\u003d\"100.0\" fitWidth\u003d\"100.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" /\u003e"
      }
    ],
    "authorContributionMap": {
      "whneo97": 6
    }
  },
  {
    "path": "src/main/resources/view/AchievementsPane.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": "      \u003cHBox fx:id\u003d\"achievementsTitlePlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": "          \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": "      \u003cHBox fx:id\u003d\"achievementsPlaceholder\" styleClass\u003d\"pane-with-border\" HBox.Hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": "          \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "whneo97": 21
    }
  },
  {
    "path": "src/main/resources/view/AchievementsTitle.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": "\u003cHBox fx:id\u003d\"achievementsTitle\" HBox.hgrow\u003d\"ALWAYS\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": "      \u003cScrollPane fx:id\u003d\"scrollPane\" minHeight\u003d\"62\" fitToWidth\u003d\"true\" pannable\u003d\"true\" styleClass\u003d\"profile-scroll\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        \u003ccontent\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                  \u003cVBox maxHeight\u003d\"Infinity\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                        \u003cLabel fx:id\u003d\"achievementsTitleLabel\" alignment\u003d\"TOP_LEFT\" contentDisplay\u003d\"TOP\" maxHeight\u003d\"Infinity\" styleClass\u003d\"profile-name\" text\u003d\"Label\" wrapText\u003d\"true\" VBox.vgrow\u003d\"always\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                           \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                              \u003cInsets /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                           \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                        \u003c/Label\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                        \u003cLabel fx:id\u003d\"achievementsTitleDescLabel\" alignment\u003d\"TOP_LEFT\" contentDisplay\u003d\"TOP\" maxHeight\u003d\"Infinity\" styleClass\u003d\"profile-asl\" text\u003d\"Label\" wrapText\u003d\"true\" VBox.vgrow\u003d\"always\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                     \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                        \u003cInsets top\u003d\"7.0\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                     \u003c/VBox.margin\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whneo97"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                  \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whneo97"
        },
        "content": "               \u003c/padding\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                  \u003c/VBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        \u003c/content\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whneo97"
        },
        "content": "      \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whneo97"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whneo97"
        },
        "content": "   \u003cpadding\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whneo97"
        },
        "content": "      \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whneo97"
        },
        "content": "   \u003c/padding\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "whneo97"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "whneo97": 35
    }
  },
  {
    "path": "src/main/resources/view/BioPane.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": "      \u003cHBox fx:id\u003d\"profilePlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": "         \u003c/padding\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     \u003c/HBox\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     \u003cVBox fx:id\u003d\"bioTablePlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": "          \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "whneo97": 21
    }
  },
  {
    "path": "src/main/resources/view/BioTable.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "\u003c?import javafx.scene.control.TableColumn?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": "\u003c?import javafx.scene.control.TableView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": "      \u003cTableView fx:id \u003d \"tableView\" styleClass\u003d\"bio-table\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        \u003ccolumnResizePolicy\u003e\u003cTableView fx:constant\u003d\"CONSTRAINED_RESIZE_POLICY\"/\u003e\u003c/columnResizePolicy\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        \u003ccolumns\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": "          \u003cTableColumn minWidth\u003d\"150\" maxWidth\u003d\"150\" reorderable\u003d\"false\" fx:id\u003d\"field\" text\u003d\"Field\" sortable\u003d\"false\" styleClass\u003d\"field-column\"/\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": "          \u003cTableColumn reorderable\u003d\"false\" fx:id\u003d\"data\" text\u003d\"Data\" sortable\u003d\"false\" styleClass\u003d\"data-column\"/\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        \u003c/columns\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": "      \u003c/TableView\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "whneo97": 17
    }
  },
  {
    "path": "src/main/resources/view/FoodFlowPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "\u003cScrollPane fx:id\u003d\"mainScrollPanel\" hbarPolicy\u003d\"NEVER\" vbarPolicy\u003d\"AS_NEEDED\" fitToWidth\u003d\"true\" fitToHeight\u003d\"true\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            style\u003d\"-fx-background: #383838; -fx-background-color: #1d1d1d\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    \u003cFlowPane fx:id\u003d\"flowPane\" orientation\u003d\"HORIZONTAL\" hgap\u003d\"10\" vgap\u003d\"10\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            \u003cInsets top\u003d\"5\" bottom\u003d\"5\" left\u003d\"5\" right\u003d\"5\"/\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    \u003c/FlowPane\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "\u003c/ScrollPane\u003e"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 15
    }
  },
  {
    "path": "src/main/resources/view/FoodListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "\u003c?import javafx.scene.shape.Rectangle?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "\u003cVBox alignment\u003d\"TOP_CENTER\" styleClass\u003d\"v-box\" minHeight\u003d\"200\" minWidth\u003d\"150\" prefHeight\u003d\"200\" prefWidth\u003d\"150\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "      maxHeight\u003d\"200\" maxWidth\u003d\"150\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    \u003cStackPane\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        \u003cRectangle fx:id\u003d\"header\" height\u003d\"70\" width\u003d\"150\"/\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        \u003cLabel fx:id\u003d\"foodName\" styleClass\u003d\"card_big_label\"/\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            \u003cInsets bottom\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    \u003cLabel fx:id\u003d\"calorie\" styleClass\u003d\"card_small_label\"/\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    \u003cLabel fx:id\u003d\"gi\" styleClass\u003d\"card_small_label\"/\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    \u003cLabel fx:id\u003d\"sugar\" styleClass\u003d\"card_small_label\"/\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    \u003cLabel fx:id\u003d\"fat\" styleClass\u003d\"card_small_label\"/\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 22
    }
  },
  {
    "path": "src/main/resources/view/HelpWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": "\u003cfx:root resizable\u003d\"false\" title\u003d\"Help\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/help_icon.png\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003cHBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cLabel fx:id\u003d\"helpMessage\" text\u003d\"Label\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                     \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c/Label\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cButton fx:id\u003d\"copyButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyUrl\" text\u003d\"Copy URL\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                     \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c/Button\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 38,
      "whneo97": 1
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "         title\u003d\"Address App\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    \u003cScene fx:id\u003d\"scene\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        \u003cVBox styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" minHeight\u003d\"270\" prefHeight\u003d\"270\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "whneo97"
        },
        "content": "          \u003cStackPane fx:id\u003d\"mainDisplayPanePlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 1,
      "-": 56,
      "whneo97": 2
    }
  },
  {
    "path": "src/main/resources/view/Profile.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": "\u003cHBox fx:id\u003d\"profile\" HBox.hgrow\u003d\"ALWAYS\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"76.0\" fitWidth\u003d\"76.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": "      \u003cScrollPane fx:id\u003d\"scrollPane\" fitToWidth\u003d\"true\" pannable\u003d\"true\" styleClass\u003d\"profile-scroll\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                  \u003cVBox maxHeight\u003d\"Infinity\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                        \u003cLabel fx:id\u003d\"name\" alignment\u003d\"TOP_LEFT\" contentDisplay\u003d\"TOP\" maxHeight\u003d\"Infinity\" styleClass\u003d\"profile-name\" text\u003d\"Label\" wrapText\u003d\"true\" VBox.vgrow\u003d\"always\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                           \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                              \u003cInsets /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                           \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                        \u003c/Label\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                        \u003cLabel fx:id\u003d\"description\" alignment\u003d\"TOP_LEFT\" contentDisplay\u003d\"TOP\" maxHeight\u003d\"Infinity\" styleClass\u003d\"profile-asl\" text\u003d\"Label\" wrapText\u003d\"true\" VBox.vgrow\u003d\"always\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                     \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                        \u003cInsets top\u003d\"7.0\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                     \u003c/VBox.margin\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whneo97"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                  \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whneo97"
        },
        "content": "               \u003c/padding\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                  \u003c/VBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        \u003c/content\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whneo97"
        },
        "content": "      \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whneo97"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whneo97"
        },
        "content": "   \u003cpadding\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "whneo97"
        },
        "content": "      \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "whneo97"
        },
        "content": "   \u003c/padding\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "whneo97"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "whneo97": 37
    }
  },
  {
    "path": "src/main/resources/view/ResultDisplay.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cStackPane fx:id\u003d\"placeHolder\" styleClass\u003d\"pane-with-border\" xmlns\u003d\"http://javafx.com/javafx/8\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": "  \u003cTextArea fx:id\u003d\"resultDisplay\" text\u003d\"Hi Amy! How are you feeling, and how can SugarMummy assist you today?\" editable\u003d\"false\" styleClass\u003d\"result-display\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 8,
      "whneo97": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import seedu.address.model.RecordBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.address.storage.JsonFoodListStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.sgm.model.food.UniqueFoodList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonAddressBookStorage(temporaryFolder.resolve(\"addressBook.json\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        JsonFoodListStorage jsonFoodListStorage \u003d new JsonFoodListStorage(temporaryFolder.resolve(\"foodList.json\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage, jsonFoodListStorage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //TODO: rewrite test with different add command"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //                new JsonAddressBookIoExceptionThrowingStub("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //                temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //        // Execute add command"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //                + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //        expectedModel.addPerson(expectedPerson);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Executes the command and confirms that - no exceptions are thrown \u003cbr\u003e - the feedback message is equal to {@code"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * expectedMessage} \u003cbr\u003e - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                                      Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                                      String expectedMessage) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs(), new UniqueFoodList(),"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            new RecordBook());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Executes the command and confirms that - the {@code expectedException} is thrown \u003cbr\u003e - the resulting error"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * message is equal to {@code expectedMessage} \u003cbr\u003e - the internal model manager state is the same as that in {@code"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "                                      String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 15,
      "-": 125,
      "scwaterbear": 23
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AchvmCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import static seedu.address.logic.commands.AchvmCommand.SHOWING_ACHVM_MESSAGE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": "class AchvmCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void execute_achvm_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_ACHVM_MESSAGE, false, false,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                true, false);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assertCommandSuccess(new AchvmCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whneo97": 21
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import seedu.address.model.RecordBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.sgm.model.food.UniqueFoodList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new UniqueFoodList(), new RecordBook());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //    public void execute_newPerson_success() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs(), new FoodMap(),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //        new RecordBook());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //        expectedModel.addPerson(validPerson);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //        assertCommandSuccess(new AddCommand(validPerson), model,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //                String.format(AddCommand.MESSAGE_SUCCESS, validPerson), expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //    public void execute_duplicateRecord_throwsCommandException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //        Person personInList \u003d model.getAddressBook().getPersonList().get(0);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //        assertCommandFailure(new AddCommand(personInList), model, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 2,
      "-": 23,
      "scwaterbear": 18
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import java.time.Month;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import seedu.address.model.ReadOnlyRecordBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import seedu.address.model.RecordBook;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import seedu.address.model.calendar.DateTime;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.model.calendar.Reminder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import seedu.address.model.record.BloodSugar;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import seedu.address.model.record.Bmi;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import seedu.address.model.record.Concentration;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import seedu.address.model.record.Height;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import seedu.address.model.record.Record;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import seedu.address.model.record.Weight;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.sgm.model.food.Food;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.sgm.model.food.UniqueFoodList;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    private LocalDate ld \u003d LocalDate.of(1970, Month.JANUARY, 1);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    private LocalTime lt \u003d LocalTime.of(8, 0, 0);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    private DateTime dt \u003d new DateTime(ld, lt);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    private BloodSugar bs \u003d new BloodSugar(new Concentration(\"12.34\"), dt);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    private Bmi bmi \u003d new Bmi(new Height(\"12.34\"), new Weight(\"23.34\"), dt);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public void constructor_nullRecord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public void execute_recordAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        ModelStubAcceptingRecordAdded modelStub \u003d new ModelStubAcceptingRecordAdded();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(bs).execute(modelStub);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, bs), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertEquals(Arrays.asList(bs), modelStub.recordsAdded);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public void execute_duplicateRecord_throwsCommandException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(bs);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithRecord(bs);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_RECORD, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        AddCommand addBloodSugarCommand \u003d new AddCommand(bs);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        AddCommand addBmiCommand \u003d new AddCommand(bmi);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertTrue(addBloodSugarCommand.equals(addBloodSugarCommand));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        AddCommand addBloodSugarCommandCopy \u003d new AddCommand(bs);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertTrue(addBloodSugarCommand.equals(addBloodSugarCommandCopy));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertFalse(addBloodSugarCommand.equals(1));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertFalse(addBloodSugarCommand.equals(null));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        // different record -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertFalse(addBloodSugarCommand.equals(addBmiCommand));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBook(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        public void setFoodList(UniqueFoodList newFoodList) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        public boolean hasFood(Food food) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        public void addFood(Food food) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        public void deleteFood(Food food) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        public UniqueFoodList getUniqueFoodListObject() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        public ObservableList\u003cFood\u003e getFoodList() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        public void addRecord(Record toAdd) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        public boolean hasRecord(Record toAdd) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        public void updateFilteredRecordList(Predicate\u003cRecord\u003e predicate) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        public ReadOnlyRecordBook getRecordBook() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        public boolean hasReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        public void addReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        public ObservableList\u003cFood\u003e getFilterFoodList() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        public void updateFilteredFoodList(Predicate\u003cFood\u003e predicate) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Person person;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubWithPerson(Person person) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "            this.person \u003d person;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "            return this.person.isSamePerson(person);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "            return personsAdded.stream().anyMatch(person::isSamePerson);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "            personsAdded.add(person);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     */"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    private class ModelStubAcceptingRecordAdded extends ModelStub {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        final ArrayList\u003cRecord\u003e recordsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        public boolean hasRecord(Record record) {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            requireNonNull(record);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            return recordsAdded.stream().anyMatch(record::isSameRecord);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        public void addRecord(Record record) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            requireNonNull(record);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            recordsAdded.add(record);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        public ReadOnlyRecordBook getRecordBook() {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            return new RecordBook();"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     */"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    private class ModelStubWithRecord extends ModelStub {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        private final Record record;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        ModelStubWithRecord(Record record) {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            requireNonNull(record);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            this.record \u003d record;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        public boolean hasRecord(Record record) {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            requireNonNull(record);"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            return this.record.isSameRecord(record);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 41,
      "jyx11011": 11,
      "-": 173,
      "scwaterbear": 99
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddFoodCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.address.model.ReadOnlyRecordBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.address.model.calendar.Reminder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.address.model.record.Record;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.address.testutil.FoodBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.sgm.model.food.Food;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.sgm.model.food.UniqueFoodList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "class AddFoodCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private Food food;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddFoodCommand(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public void execute_foodAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        AddFoodCommandTest.ModelStubAcceptingFoodAdded modelStub \u003d new AddFoodCommandTest.ModelStubAcceptingFoodAdded();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        Food food \u003d new FoodBuilder().build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        CommandResult commandResult \u003d new AddFoodCommand(food).execute(modelStub);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        assertEquals(String.format(AddFoodCommand.MESSAGE_SUCCESS, food), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        assertEquals(Arrays.asList(food), modelStub.foodsAdded);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public void execute_duplicateFood_throwsCommandException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        Food validFood \u003d new FoodBuilder().build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        AddFoodCommand addFoodCommand \u003d new AddFoodCommand(validFood);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        AddFoodCommandTest.ModelStub modelStub \u003d new AddFoodCommandTest.ModelStubWithFood(validFood);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        assertThrows(CommandException.class, AddFoodCommand.MESSAGE_DUPLICATE_FOOD, () -\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            addFoodCommand.execute(modelStub));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        Food yogurt \u003d new FoodBuilder().withFoodName(\"Yogurt\").build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        Food water \u003d new FoodBuilder().withFoodName(\"water\").build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        AddFoodCommand addYogurtCommand \u003d new AddFoodCommand(yogurt);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        AddFoodCommand addWaterCommand \u003d new AddFoodCommand(water);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        assertTrue(addYogurtCommand.equals(addYogurtCommand));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        AddFoodCommand addFoodCommandCopy \u003d new AddFoodCommand(yogurt);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        assertTrue(addYogurtCommand.equals(addFoodCommandCopy));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        assertFalse(addYogurtCommand.equals(1));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        assertFalse(addYogurtCommand.equals(null));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        // different food -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        assertFalse(addYogurtCommand.equals(addWaterCommand));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        public void setAddressBook(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        public void addRecord(Record toAdd) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        public boolean hasRecord(Record toAdd) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        public void updateFilteredRecordList(Predicate\u003cRecord\u003e predicate) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        public ReadOnlyRecordBook getRecordBook() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        public boolean hasReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        public void addReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        public boolean hasFood(Food food) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        public void addFood(Food food) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        public void deleteFood(Food food) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        public UniqueFoodList getUniqueFoodListObject() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        public ObservableList\u003cFood\u003e getFoodList() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        public void setFoodList(UniqueFoodList newFoodList) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        public ObservableList\u003cFood\u003e getFilterFoodList() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        public void updateFilteredFoodList(Predicate\u003cFood\u003e predicate) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * A Model stub that contains a single food."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private class ModelStubWithFood extends AddFoodCommandTest.ModelStub {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        private final Food food;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        ModelStubWithFood(Food food) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            requireNonNull(food);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            this.food \u003d food;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        public boolean hasFood(Food food) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            requireNonNull(food);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            return this.food.isSameFood(food);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * A Model stub that always accept the food being added."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private class ModelStubAcceptingFoodAdded extends AddFoodCommandTest.ModelStub {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        final ArrayList\u003cFood\u003e foodsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        public boolean hasFood(Food food) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            requireNonNull(food);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            return foodsAdded.stream().anyMatch(food::isSameFood);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        public void addFood(Food food) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            requireNonNull(food);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            foodsAdded.add(food);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 266
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AverageCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import static seedu.address.logic.commands.AverageCommand.MESSAGE_NO_RECORD;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import seedu.address.logic.commands.exceptions.AverageType;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import seedu.address.model.record.RecordType;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "public class AverageCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    public void execute_zeroRecordType_throwsCommandException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        AverageCommand command \u003d new AverageCommand(AverageType.DAILY,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "                RecordType.HEIGHTANDWEIGHT, 5);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        assertThrows(CommandException.class, String.format(MESSAGE_NO_RECORD,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "                RecordType.HEIGHTANDWEIGHT), () -\u003e command.execute(model));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chen-xi-cx": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/BioCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import static seedu.address.logic.commands.BioCommand.SHOWING_BIO_MESSAGE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": "class BioCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void execute_bio_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_BIO_MESSAGE, false, true,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                false, false);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assertCommandSuccess(new BioCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whneo97": 21
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import seedu.address.model.RecordBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.sgm.model.food.UniqueFoodList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new UniqueFoodList(),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            new RecordBook());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new UniqueFoodList(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            new RecordBook());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 5,
      "-": 30,
      "scwaterbear": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import seedu.address.model.RecordBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.sgm.model.food.UniqueFoodList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new UniqueFoodList(),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        new RecordBook());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs(), new UniqueFoodList(),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            new RecordBook());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs(), new UniqueFoodList(),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            new RecordBook());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(p -\u003e false);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(model.getFilteredPersonList().isEmpty());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 5,
      "-": 106,
      "scwaterbear": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import seedu.address.model.RecordBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.sgm.model.food.UniqueFoodList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new UniqueFoodList(),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        new RecordBook());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs(),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            new UniqueFoodList(), new RecordBook());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs(),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            new UniqueFoodList(), new RecordBook());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(lastPerson, editedPerson);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs(),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            new UniqueFoodList(), new RecordBook());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs(),"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            new UniqueFoodList(), new RecordBook());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PERSON, descriptor);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit person in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInList \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder(personInList).build());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_AMY);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 11,
      "-": 168,
      "scwaterbear": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ELLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.FIONA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import seedu.address.model.RecordBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.sgm.model.food.UniqueFoodList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new UniqueFoodList(),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        new RecordBook());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new UniqueFoodList(),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        new RecordBook());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_zeroKeywords_noPersonFound() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_multipleKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 4,
      "-": 81,
      "scwaterbear": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import seedu.address.model.RecordBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.sgm.model.food.UniqueFoodList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new UniqueFoodList(), new RecordBook());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs(), new UniqueFoodList(),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            new RecordBook());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 4,
      "-": 37,
      "scwaterbear": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ReminderCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.model.ReadOnlyRecordBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.model.calendar.Reminder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.model.record.Record;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.testutil.ReminderBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.sgm.model.food.Food;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.sgm.model.food.UniqueFoodList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "class ReminderCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ReminderCommand(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public void execute_reminderAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        ModelStubAcceptingReminder modelStub \u003d new ModelStubAcceptingReminder();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        Reminder validReminder \u003d new ReminderBuilder().build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        CommandResult commandResult \u003d new ReminderCommand(validReminder).execute(modelStub);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        assertEquals(String.format(ReminderCommand.MESSAGE_SUCCESS, validReminder), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        //assertEquals(Arrays.asList(validReminder), modelStub.remindersAdded);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public void execute_duplicateReminder_throwsCommandException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        Reminder validReminder \u003d new ReminderBuilder().build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        ReminderCommand reminderCommand \u003d new ReminderCommand(validReminder);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithReminder(validReminder);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        assertThrows(CommandException.class, ReminderCommand.MESSAGE_DUPLICATE_REMINDER,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                () -\u003e reminderCommand.execute(modelStub));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "         */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        Reminder insulinInjection \u003d new ReminderBuilder().build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        Reminder wakeUp \u003d new ReminderBuilder().withDescription(\"Wake up\").build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        ReminderCommand insulinInjectionCommand \u003d new ReminderCommand(insulinInjection);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        ReminderCommand wakeUpCommand \u003d new ReminderCommand(wakeUp);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        assertTrue(insulinInjection.equals(insulinInjection));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        ReminderCommand insulinInjectionCommandCopy \u003d new ReminderCommand(insulinInjection);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        assertTrue(insulinInjectionCommand.equals(insulinInjectionCommandCopy));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        assertFalse(insulinInjectionCommand.equals(1));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        assertFalse(insulinInjectionCommand.equals(null));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        // different reminders -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        assertFalse(insulinInjectionCommand.equals(wakeUpCommand));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        public void setAddressBook(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        public void addRecord(Record toAdd) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        public boolean hasRecord(Record toAdd) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        public void updateFilteredRecordList(Predicate\u003cRecord\u003e predicate) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        public ReadOnlyRecordBook getRecordBook() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        public boolean hasReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        public void addReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        public boolean hasFood(Food food) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        public void addFood(Food food) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        public void deleteFood(Food food) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        public UniqueFoodList getUniqueFoodListObject() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        public ObservableList\u003cFood\u003e getFoodList() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        public void setFoodList(UniqueFoodList newFoodList) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        public ObservableList\u003cFood\u003e getFilterFoodList() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        public void updateFilteredFoodList(Predicate\u003cFood\u003e predicate) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * A Model stub that contains a single reminder."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private class ModelStubWithReminder extends ModelStub {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        private final Reminder reminder;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        ModelStubWithReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            requireNonNull(reminder);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            this.reminder \u003d reminder;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        public boolean hasReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            requireNonNull(reminder);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return this.reminder.isSameReminder(reminder);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * A Model stub that always accept the reminder being added."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private class ModelStubAcceptingReminder extends ModelStub {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        final ArrayList\u003cReminder\u003e remindersAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        public boolean hasReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            requireNonNull(reminder);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return remindersAdded.stream().anyMatch(reminder::isSameReminder);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        public void addReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            requireNonNull(reminder);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            remindersAdded.add(reminder);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 39,
      "jyx11011": 228
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import java.time.Month;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import seedu.address.model.calendar.DateTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import seedu.address.model.record.BloodSugar;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import seedu.address.model.record.Bmi;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import seedu.address.model.record.Concentration;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import seedu.address.model.record.Height;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import seedu.address.model.record.Weight;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        LocalDate ld \u003d LocalDate.of(1970, Month.JANUARY, 1);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        LocalTime lt \u003d LocalTime.of(8, 0, 0);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        DateTime dt \u003d new DateTime(ld, lt);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //bloodsugar success"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        BloodSugar bs \u003d new BloodSugar(new Concentration(\"12.34\"), dt);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertParseSuccess(parser, \" rt/BLOODSUGAR con/12.34 dt/01/01/1970 08:00\", new AddCommand(bs));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //bmi success"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        Bmi bmi \u003d new Bmi(new Height(\"12.34\"), new Weight(\"23.34\"), dt);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertParseSuccess(parser, \" rt/BMI h/12.34 w/23.45 dt/01/01/1970 08:00\", new AddCommand(bmi));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //            + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(bmi));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //        Person expectedPerson \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //        // whitespace only preamble"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //        // multiple names - last name accepted"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //        // multiple tags - all accepted"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //        Person expectedPersonMultipleTags \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //        VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //                .build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddCommand(expectedPersonMultipleTags));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //        // zero tags"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertParseFailure(parser, \" rt/BLOODSUGAR dt/01/01/1970 08:00\","
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertParseFailure(parser, \" rt/BLOODSUGAR con/12.34\","
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            expectedMessage);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertParseFailure(parser, \" rt/BMI h/1 w/1\","
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            expectedMessage);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertParseFailure(parser, \" rt/BMI h/1 dt/01/01/1970 08:00\","
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            expectedMessage);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertParseFailure(parser, \" rt/BMI dt/01/01/1970 08:00 w/1\","
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            expectedMessage);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //        // missing name prefix"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //                expectedMessage);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //        // missing phone prefix"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //                expectedMessage);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //        // missing email prefix"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //                expectedMessage);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //        // missing address prefix"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //                expectedMessage);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //        // all prefixes missing"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //                expectedMessage);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //        assertParseFailure(parser, \" rt/BLOODSUGAR con/-1.23 dt/hello\", BloodSugar.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //        assertParseFailure(parser, \" rt/BMI h/-1 w/-1 dt/hello\", Bmi.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //        // invalid name"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //        // invalid phone"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //        // invalid email"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //        // invalid address"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //        // invalid tag"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //                + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //        // non-empty preamble"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 33,
      "scwaterbear": 121
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddressBookParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import java.time.Month;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.logic.commands.AchvmCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.logic.commands.BioCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import seedu.address.model.calendar.DateTime;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import seedu.address.model.record.BloodSugar;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import seedu.address.model.record.Concentration;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParserTest {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser parser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        LocalDate ld \u003d LocalDate.of(1970, Month.JANUARY, 1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        LocalTime lt \u003d LocalTime.of(8, 0, 0);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        DateTime dt \u003d new DateTime(ld, lt);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        BloodSugar bs \u003d new BloodSugar(new Concentration(\"12.34\"), dt);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(bs));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(\"add rt/BLOODSUGAR con/12.34 dt/01/01/1970 08:00\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertEquals(new AddCommand(bs), command);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void parseCommand_bio() throws Exception {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assertTrue(parser.parseCommand(BioCommand.COMMAND_WORD) instanceof BioCommand);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assertTrue(parser.parseCommand(BioCommand.COMMAND_WORD + \" 3\") instanceof BioCommand);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void parseCommand_achvm() throws Exception {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assertTrue(parser.parseCommand(AchvmCommand.COMMAND_WORD) instanceof AchvmCommand);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assertTrue(parser.parseCommand(AchvmCommand.COMMAND_WORD + \" 3\") instanceof AchvmCommand);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 98,
      "scwaterbear": 16,
      "whneo97": 14
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    private static final String INVALID_POSITIVEFLOAT_1 \u003d \"-1\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    private static final String INVALID_POSITIVEFLOAT_2 \u003d \"123asb\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    private static final String INVALID_POSITIVEFLOAT_3 \u003d \"-1.asd\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    private static final String INVALID_POSITIVEFLOAT_4 \u003d \"asbd123\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    private static final String VALID_POSITIVEFLOAT \u003d \"12.34\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public void parseHeight_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseHeight((String) null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public void parseWeight_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseWeight((String) null));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public void parseConcentration_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseConcentration((String) null));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public void parseHeight_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseHeight(INVALID_POSITIVEFLOAT_1));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseHeight(INVALID_POSITIVEFLOAT_2));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseHeight(INVALID_POSITIVEFLOAT_3));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseHeight(INVALID_POSITIVEFLOAT_4));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public void parseWeight_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseWeight(INVALID_POSITIVEFLOAT_1));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseWeight(INVALID_POSITIVEFLOAT_2));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseWeight(INVALID_POSITIVEFLOAT_3));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseWeight(INVALID_POSITIVEFLOAT_4));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public void parseConcentration_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseConcentration(INVALID_POSITIVEFLOAT_1));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseConcentration(INVALID_POSITIVEFLOAT_2));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseConcentration(INVALID_POSITIVEFLOAT_3));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseConcentration(INVALID_POSITIVEFLOAT_4));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //TODO: make these 6 tests pass"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //    public void parseHeight_validValueWithoutWhitespace_returnsHeight() throws Exception {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //        Height expectedHeight \u003d new Height(VALID_POSITIVEFLOAT);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //        assertEquals(expectedHeight, ParserUtil.parseHeight(VALID_POSITIVEFLOAT));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //    public void parseWeight_validValueWithoutWhitespace_returnsWeight() throws Exception {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //        Weight expectedWeight \u003d new Weight(VALID_POSITIVEFLOAT);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //        assertEquals(expectedWeight, ParserUtil.parseWeight(VALID_POSITIVEFLOAT));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //    public void parseConcentration_validValueWithoutWhitespace_returnsConcentration() throws Exception {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //        Concentration expectedConcentration \u003d new Concentration(VALID_POSITIVEFLOAT);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //        assertEquals(expectedConcentration, ParserUtil.parseConcentration(VALID_POSITIVEFLOAT));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //    public void parseHeight_validValueWithWhitespace_returnsTrimmedHeight() throws Exception {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //        String heightWithWhitespace \u003d WHITESPACE + VALID_POSITIVEFLOAT + WHITESPACE;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //        Height expectedHeight \u003d new Height(VALID_POSITIVEFLOAT);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //        assertEquals(expectedHeight, ParserUtil.parseHeight(heightWithWhitespace));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //    public void parseWeight_validValueWithWhitespace_returnsTrimmedWeight() throws Exception {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //        String weightWithWhitespace \u003d WHITESPACE + VALID_POSITIVEFLOAT + WHITESPACE;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //        Weight expectedWeight \u003d new Weight(VALID_POSITIVEFLOAT);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //        assertEquals(expectedWeight, ParserUtil.parseWeight(weightWithWhitespace));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //    public void parseConcentration_validValueWithWhitespace_returnsTrimmedConcentration() throws Exception {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //        String concentrationWithWhitespace \u003d WHITESPACE + VALID_POSITIVEFLOAT + WHITESPACE;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //        Concentration expectedConcentration \u003d new Concentration(VALID_POSITIVEFLOAT);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //        assertEquals(expectedConcentration, ParserUtil.parseConcentration(concentrationWithWhitespace));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 196,
      "scwaterbear": 85
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import static seedu.sgm.model.food.TypicalFoods.FOODS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.sgm.model.food.UniqueFoodList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddressBook(), new AddressBook(modelManager.getAddressBook()));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setAddressBookFilePath(null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setAddressBookFilePath(path);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(path, modelManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasPerson(null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook differentAddressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        UniqueFoodList foodList \u003d new UniqueFoodList();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        foodList.setFoods(FOODS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        RecordBook recordBook \u003d new RecordBook();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        modelManager \u003d new ModelManager(addressBook, userPrefs, foodList, recordBook);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs, foodList, recordBook);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs, foodList, recordBook)));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs, foodList, recordBook)));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, differentUserPrefs, foodList, recordBook)));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 9,
      "-": 127,
      "scwaterbear": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/calendar/DateTimeTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package seedu.address.model.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "class DateTimeTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private LocalDate validDate \u003d LocalDate.of(2020, 1, 20);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private LocalTime validTime \u003d LocalTime.of(12, 30);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private DateTime validDateTime \u003d new DateTime(validDate, validTime);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new DateTime(null, null));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new DateTime(null, validTime));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new DateTime(validDate, null));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public void getDate() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        assertEquals(validDate, validDateTime.getDate());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public void getTime() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        assertEquals(validTime, validDateTime.getTime());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    void getDayOfWeek() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        assertEquals(DayOfWeek.MONDAY, validDateTime.getDayOfWeek());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    void getDayOfWeekString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        assertEquals(\"Monday\", validDateTime.getDayOfWeekString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        assertEquals(\"2020 Jan 20 12:30\", validDateTime.toString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 48
    }
  },
  {
    "path": "src/test/java/seedu/address/model/calendar/DescriptionTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package seedu.address.model.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "class DescriptionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Description(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public void constructor_invalidDescription_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        String invalidDescription \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Description(invalidDescription));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public void isValidDescription() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Description.isValidDescription(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        assertFalse(Description.isValidDescription(\"\")); // empty string"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        assertFalse(Description.isValidDescription(\" \")); // spaces only"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        assertTrue(Description.isValidDescription(\"Appointment\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        assertTrue(Description.isValidDescription(\"-\")); // one character"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        assertTrue(Description.isValidDescription(\"Insulin injection before lunch\")); // long appointment"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/model/calendar/EventTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package seedu.address.model.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.APPOINTMENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.AUTO_REMINDER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.DATE_FEB10;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.DATE_MAR22;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.MEETING;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.TIME_EVEN;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.TIME_MORN;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.testutil.EventBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "class EventTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    void isSameEvent() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        assertTrue(APPOINTMENT.isSameEvent(APPOINTMENT));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        assertFalse(APPOINTMENT.isSameEvent(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        // different description and date, time -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        Event editedEvent \u003d new EventBuilder(APPOINTMENT).withDescription(\"description\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                .withDateTime(DATE_MAR22, TIME_MORN).build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        assertFalse(APPOINTMENT.isSameEvent(editedEvent));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        // different date and time -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        editedEvent \u003d new EventBuilder(APPOINTMENT).withDateTime(DATE_MAR22, TIME_EVEN).build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        assertFalse(APPOINTMENT.isSameEvent(editedEvent));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        // different description"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        editedEvent \u003d new EventBuilder(APPOINTMENT).withDescription(\"description\").build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        assertFalse(APPOINTMENT.isSameEvent(editedEvent));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        // same description and date, time, different endingDateTime -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        editedEvent \u003d new EventBuilder(APPOINTMENT).withEndingDateTime(null).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        assertTrue(APPOINTMENT.isSameEvent(editedEvent));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        // same description and date, time, different autoReminder -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        editedEvent \u003d new EventBuilder(APPOINTMENT).withAutoReminder(null).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        assertTrue(APPOINTMENT.isSameEvent(editedEvent));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        editedEvent \u003d new EventBuilder(APPOINTMENT).withAutoReminder(AUTO_REMINDER).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        assertTrue(APPOINTMENT.isSameEvent(editedEvent));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        Event appointmentCopy \u003d new EventBuilder(APPOINTMENT).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        assertTrue(APPOINTMENT.equals(appointmentCopy));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        assertTrue(APPOINTMENT.equals(APPOINTMENT));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        assertFalse(APPOINTMENT.equals(null));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        assertFalse(APPOINTMENT.equals(5));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        // different event -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        assertFalse(APPOINTMENT.equals(MEETING));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        // different description -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        Event editedEvent \u003d new EventBuilder(APPOINTMENT).withDescription(\"description\").build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        assertFalse(APPOINTMENT.equals(editedEvent));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        // different date, time -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        editedEvent \u003d new EventBuilder(APPOINTMENT).withDateTime(DATE_FEB10, TIME_EVEN).build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        assertFalse(APPOINTMENT.equals(editedEvent));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        // different ending date time -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        editedEvent \u003d new EventBuilder(APPOINTMENT).withEndingDateTime(DATE_FEB10, TIME_EVEN).build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        assertFalse(APPOINTMENT.equals(editedEvent));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        // different autoReminder -\u003e return false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        editedEvent \u003d new EventBuilder(APPOINTMENT).withAutoReminder(AUTO_REMINDER).build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        assertFalse(APPOINTMENT.equals(editedEvent));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 85
    }
  },
  {
    "path": "src/test/java/seedu/address/model/calendar/ReminderTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package seedu.address.model.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import static seedu.address.testutil.TypicalReminders.BUY_INSULIN;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import static seedu.address.testutil.TypicalReminders.DATE_DEC20;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import static seedu.address.testutil.TypicalReminders.DATE_JAN04;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import static seedu.address.testutil.TypicalReminders.LUNCH_INSULIN_INJECTION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import static seedu.address.testutil.TypicalReminders.ONCE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import static seedu.address.testutil.TypicalReminders.TIME_EVEN;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import static seedu.address.testutil.TypicalReminders.TIME_MORN;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import static seedu.address.testutil.TypicalReminders.WEEKLY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.testutil.ReminderBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public class ReminderTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public void isSamePersonReminder() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        assertTrue(LUNCH_INSULIN_INJECTION.isSameReminder(LUNCH_INSULIN_INJECTION));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        assertFalse(LUNCH_INSULIN_INJECTION.isSameReminder(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        // different description and date, time -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        Reminder editedReminder \u003d new ReminderBuilder(LUNCH_INSULIN_INJECTION).withDescription(\"description\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                .withDateTime(DATE_DEC20, TIME_MORN).build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        assertFalse(LUNCH_INSULIN_INJECTION.isSameReminder(editedReminder));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        // different date and time -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        editedReminder \u003d new ReminderBuilder(LUNCH_INSULIN_INJECTION).withDateTime(DATE_JAN04, TIME_EVEN).build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        assertFalse(LUNCH_INSULIN_INJECTION.isSameReminder(editedReminder));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        // different description"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        editedReminder \u003d new ReminderBuilder(LUNCH_INSULIN_INJECTION).withDescription(\"description\").build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        assertFalse(LUNCH_INSULIN_INJECTION.isSameReminder(editedReminder));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        // same description and date, time, different repetition -\u003e returns true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        editedReminder \u003d new ReminderBuilder(LUNCH_INSULIN_INJECTION).withRepetition(WEEKLY).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        assertTrue(LUNCH_INSULIN_INJECTION.isSameReminder(editedReminder));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        Reminder lunchInsulinInjectionCopy \u003d new ReminderBuilder(LUNCH_INSULIN_INJECTION).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        assertTrue(LUNCH_INSULIN_INJECTION.equals(lunchInsulinInjectionCopy));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        assertTrue(LUNCH_INSULIN_INJECTION.equals(LUNCH_INSULIN_INJECTION));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        assertFalse(LUNCH_INSULIN_INJECTION.equals(null));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        assertFalse(LUNCH_INSULIN_INJECTION.equals(5));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        // different reminder -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        assertFalse(LUNCH_INSULIN_INJECTION.equals(BUY_INSULIN));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        // different description -\u003e returns false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        Reminder editedReminder \u003d new ReminderBuilder(LUNCH_INSULIN_INJECTION).withDescription(\"description\").build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        assertFalse(LUNCH_INSULIN_INJECTION.equals(editedReminder));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        // different date, time -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        editedReminder \u003d new ReminderBuilder(LUNCH_INSULIN_INJECTION).withDateTime(DATE_DEC20, TIME_EVEN).build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        assertFalse(LUNCH_INSULIN_INJECTION.equals(editedReminder));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        // different repetition -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        editedReminder \u003d new ReminderBuilder(LUNCH_INSULIN_INJECTION).withRepetition(ONCE).build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        assertFalse(LUNCH_INSULIN_INJECTION.equals(editedReminder));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 76
    }
  },
  {
    "path": "src/test/java/seedu/address/model/record/BloodSugarTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "package seedu.address.model.record;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "public class BloodSugarTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "scwaterbear": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/model/record/BmiTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "package seedu.address.model.record;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "public class BmiTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "scwaterbear": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/model/record/ConcentrationTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "package seedu.address.model.record;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "public class ConcentrationTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Concentration(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public void constructor_invalidConcentration_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        String invalidConcentration \u003d \"-1\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Concentration(invalidConcentration));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public void isValidConcentration() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Concentration.isValidConcentration(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        // invalid concentration"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertFalse(Concentration.isValidConcentration(\"\")); // empty string"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertFalse(Concentration.isValidConcentration(\" \")); // spaces only"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertFalse(Concentration.isValidConcentration(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertFalse(Concentration.isValidConcentration(\"peter\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertFalse(Concentration.isValidConcentration(\"-2323\")); // negative double"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        // valid concentration"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertTrue(Concentration.isValidConcentration(\"0.12\")); // ≤1 double"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertTrue(Concentration.isValidConcentration(\"12.34\")); // ≥1 double"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertTrue(Concentration.isValidConcentration(\"10000\")); // positive"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertTrue(Concentration.isValidConcentration(\"0\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "scwaterbear": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/model/record/HeightTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "package seedu.address.model.record;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "public class HeightTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Height(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public void constructor_invalidHeight_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        String invalidHeight \u003d \"-1\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Height(invalidHeight));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public void isValidHeight() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Height.isValidHeight(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        // invalid height"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertFalse(Height.isValidHeight(\"\")); // empty string"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertFalse(Height.isValidHeight(\" \")); // spaces only"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertFalse(Height.isValidHeight(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertFalse(Height.isValidHeight(\"peter\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertFalse(Height.isValidHeight(\"-2323\")); // negative double"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        // valid height"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertTrue(Height.isValidHeight(\"0.12\")); // ≤1 double"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertTrue(Height.isValidHeight(\"12.34\")); // ≥1 double"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertTrue(Height.isValidHeight(\"10000\")); // positive"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertTrue(Height.isValidHeight(\"0\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "scwaterbear": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/model/record/RecordTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "package seedu.address.model.record;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "public class RecordTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "scwaterbear": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/model/record/WeightTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "package seedu.address.model.record;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "public class WeightTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Weight(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public void constructor_invalidWeight_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        String invalidWeight \u003d \"-1\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Weight(invalidWeight));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public void isValidWeight() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Weight.isValidWeight(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        // invalid weight"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertFalse(Weight.isValidWeight(\"\")); // empty string"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertFalse(Weight.isValidWeight(\" \")); // spaces only"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertFalse(Weight.isValidWeight(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertFalse(Weight.isValidWeight(\"peter\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertFalse(Weight.isValidWeight(\"-2323\")); // negative double"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        // valid weight"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertTrue(Weight.isValidWeight(\"0.12\")); // ≤1 double"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertTrue(Weight.isValidWeight(\"12.34\")); // ≥1 double"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertTrue(Weight.isValidWeight(\"10000\")); // positive"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertTrue(Weight.isValidWeight(\"0\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "scwaterbear": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        JsonFoodListStorage jsonFoodListStorage \u003d new JsonFoodListStorage(getTempFilePath(\"fl\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage, jsonFoodListStorage);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonAddressBookStorage} class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveAddressBook(original);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(retrieved));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(storageManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 2,
      "-": 67
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EventBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.model.calendar.DateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.model.calendar.Description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.model.calendar.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.model.calendar.Reminder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.model.calendar.Repetition;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " * A utility class to help with building Event objects."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public class EventBuilder {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public static final String DEFAULT_DESCRIPTION \u003d \"Appointment\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public static final LocalDate DEFAULT_DATE \u003d LocalDate.of(2020, 1, 10);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public static final LocalTime DEFAULT_TIME \u003d LocalTime.of(14, 45);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public static final LocalTime DEFAULT_ENDING_TIME \u003d LocalTime.of(16, 0);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public static final Reminder DEFAULT_AUTO_REMINDER \u003d new Reminder(new Description(\"auto reminder\"),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            new DateTime(DEFAULT_DATE, LocalTime.of(13, 20)), Repetition.Once);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private Description description;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private DateTime dateTime;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private Optional\u003cDateTime\u003e endingDateTime;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private Optional\u003cReminder\u003e autoReminder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public EventBuilder() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        description \u003d new Description(DEFAULT_DESCRIPTION);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        dateTime \u003d new DateTime(DEFAULT_DATE, DEFAULT_TIME);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        endingDateTime \u003d Optional.of(new DateTime(DEFAULT_DATE, DEFAULT_ENDING_TIME));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        autoReminder \u003d Optional.of(DEFAULT_AUTO_REMINDER);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Initializes the EventBuilder with the data of {@code eventToCopy}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public EventBuilder(Event eventToCopy) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        description \u003d eventToCopy.getDescription();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        dateTime \u003d eventToCopy.getDateTime();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        endingDateTime \u003d eventToCopy.getEndingDateTime();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        autoReminder \u003d eventToCopy.getAutoReminder();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Sets the {@code Description} of the {@code Event} that we are building."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public EventBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        this.description \u003d new Description(description);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Sets the {@code DateTime} of the {@code Event} that we are building."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public EventBuilder withDateTime(LocalDate date, LocalTime time) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        this.dateTime \u003d new DateTime(date, time);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Sets the {@code endingDateTime} of the {@code Event} that we are building."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public EventBuilder withEndingDateTime(LocalDate date, LocalTime time) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        this.endingDateTime \u003d Optional.ofNullable(new DateTime(date, time));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Sets the {@code endingDateTime} of the {@code Event} that we are building."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public EventBuilder withEndingDateTime(DateTime endingDateTime) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        this.endingDateTime \u003d Optional.ofNullable(endingDateTime);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Sets the {@code autoReminder} of the {@code Event} that we are building."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public EventBuilder withAutoReminder(Reminder autoReminder) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        this.autoReminder \u003d Optional.ofNullable(autoReminder);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Build a event."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @return a event."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public Event build() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        Event event \u003d new Event(description, dateTime);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        event.setEndingDateTime(endingDateTime);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        event.setAutoReminder(autoReminder);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return event;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 98
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/FoodBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.sgm.model.food.Calorie;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.sgm.model.food.Fat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.sgm.model.food.Food;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.sgm.model.food.FoodName;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.sgm.model.food.FoodType;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.sgm.model.food.Gi;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.sgm.model.food.Sugar;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * This is a utility class to help with building Food objects."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "public class FoodBuilder {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final String DEFAULT_FOOD_NAME \u003d \"FOOD\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final String DEFAULT_CALORIE \u003d \"34.0\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final String DEFAULT_GI \u003d \"10.0\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final String DEFAULT_SUGAR \u003d \"1.7\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final String DEFAULT_FAT \u003d \"0.4\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final String DEFAULT_TYPE \u003d \"nsv\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private FoodName foodName;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private Calorie calorie;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private Gi gi;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private Sugar sugar;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private Fat fat;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private FoodType foodType;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Initializes the FoodBuilder with the default data."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public FoodBuilder() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.foodName \u003d new FoodName(DEFAULT_FOOD_NAME);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.calorie \u003d new Calorie(DEFAULT_CALORIE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.gi \u003d new Gi(DEFAULT_GI);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.sugar \u003d new Sugar(DEFAULT_SUGAR);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.fat \u003d new Fat(DEFAULT_FAT);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            this.foodType \u003d FoodType.getFrom(DEFAULT_TYPE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            assert false : \"The type cannot be wrong.\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Initializes the FoodBuilder with the data of {@code foodToCopy}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public FoodBuilder(Food foodToCopy) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.foodName \u003d foodToCopy.getFoodName();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.calorie \u003d foodToCopy.getCalorie();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.gi \u003d foodToCopy.getGi();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.sugar \u003d foodToCopy.getSugar();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.fat \u003d foodToCopy.getFat();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.foodType \u003d foodToCopy.getFoodType();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Sets the {@code FoodName} of the {@code Food} that we are building."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public FoodBuilder withFoodName(String foodName) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.foodName \u003d new FoodName(foodName);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Sets the {@code Calorie} of the {@code Food} that we are building."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public FoodBuilder withCalorie(String calorie) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.calorie \u003d new Calorie(calorie);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Sets the {@code Gi} of the {@code Food} that we are building."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public FoodBuilder withGi(String gi) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.gi \u003d new Gi(gi);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Sets the {@code Sugar} of the {@code Food} that we are building."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public FoodBuilder withSugar(String sugar) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.sugar \u003d new Sugar(sugar);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Sets the {@code Fat} of the {@code Food} that we are building."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public FoodBuilder withFat(String fat) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.fat \u003d new Fat(fat);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Sets the {@code Fat} of the {@code Food} that we are building."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public FoodBuilder withFoodType(String foodType) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            this.foodType \u003d FoodType.getFrom(foodType);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            assert false : \"The type cannot be wrong.\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public Food build() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return new Food(foodName, calorie, gi, sugar, fat, foodType);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 115
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for Person."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonUtil {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //     * Returns an add command string for adding the {@code person}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //    public static String getAddCommand(Record record) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //        return AddCommand.COMMAND_WORD + \" \" + getRecordDetails();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //     * Returns the part of command string for the given {@code person}\u0027s details."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //    public static String getRecordDetails() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //        sb.append(PREFIX_BLOODSUGAR_CONCENTRATION + \"12.34\" + \" \");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //        sb.append(PREFIX_DATETIME + \"datetime\" + \" \");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //        return sb.toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 39,
      "scwaterbear": 16
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ReminderBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.model.calendar.DateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.model.calendar.Description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.model.calendar.Reminder;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.model.calendar.Repetition;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "* A utility class to help with building Reminder objects."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "*/"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public class ReminderBuilder {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public static final String DEFAULT_DESCRIPTION \u003d \"Insulin injection\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public static final LocalDate DEFAULT_DATE \u003d LocalDate.of(2019, 10, 12);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public static final LocalTime DEFAULT_TIME \u003d LocalTime.of(11, 30);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public static final Repetition DEFAULT_REPETITION \u003d Repetition.EveryDay;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private Description description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private DateTime dateTime;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private Repetition repetition;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public ReminderBuilder() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        description \u003d new Description(DEFAULT_DESCRIPTION);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        dateTime \u003d new DateTime(DEFAULT_DATE, DEFAULT_TIME);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        repetition \u003d DEFAULT_REPETITION;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Initializes the ReminderBuilder with the data of {@code reminderToCopy}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public ReminderBuilder(Reminder reminderToCopy) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        description \u003d reminderToCopy.getDescription();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        dateTime \u003d reminderToCopy.getDateTime();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        repetition \u003d reminderToCopy.getRepetition();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Sets the {@code Description} of the {@code Reminder} that we are building."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public ReminderBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        this.description \u003d new Description(description);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Sets the {@code DateTime} of the {@code Reminder} that we are building."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public ReminderBuilder withDateTime(LocalDate date, LocalTime time) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        this.dateTime \u003d new DateTime(date, time);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Sets the {@code repetition} of the {@code Reminder} that we are building."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public ReminderBuilder withRepetition(Repetition repetition) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        this.repetition \u003d repetition;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public Reminder build() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return new Reminder(description, dateTime, repetition);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 67
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalEvents.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.model.calendar.DateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.model.calendar.Description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.model.calendar.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.model.calendar.Reminder;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.model.calendar.Repetition;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " * A utility class containing a list of {@code Event} objects to be used in tests."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public class TypicalEvents {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public static final LocalDate DATE_FEB10 \u003d LocalDate.of(2020, 2, 10);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public static final LocalDate DATE_MAR22 \u003d LocalDate.of(2020, 3, 22);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public static final LocalTime TIME_MORN \u003d LocalTime.of(7, 45);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public static final LocalTime TIME_EVEN \u003d LocalTime.of(19, 0);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public static final Reminder AUTO_REMINDER \u003d new Reminder(new Description(\"description\"),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            new DateTime(DATE_FEB10, TIME_EVEN), Repetition.Once);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public static final Event APPOINTMENT \u003d new EventBuilder().build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public static final Event MEETING \u003d new EventBuilder().withDescription(\"Team meeting\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            .withDateTime(DATE_MAR22, TIME_MORN).build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private TypicalEvents() {} // prevents instantiation"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 27
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalFoods.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.sgm.model.food.Food;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * This is a utility class containing a list of {@code Food} objects to be used in tests."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "public class TypicalFoods {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final Food BROCCOLI \u003d new FoodBuilder().build();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final Food POTATO \u003d new FoodBuilder().withFoodName(\"Potatodfafadfafadf\").withFoodType(\"sv\").build();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final Food BANANA \u003d new FoodBuilder().withFoodName(\"Banana\").withFoodType(\"f\").build();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final Food CHICKEN \u003d new FoodBuilder().withFoodName(\"Chicken\").withFoodType(\"p\").build();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final Food POTATO_CHIPS \u003d new FoodBuilder().withFoodName(\"Potato chips\").withFoodType(\"s\").build();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final Food CHICKEN_RICE \u003d new FoodBuilder().withFoodName(\"Chicken Rice\").withFoodType(\"m\").build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final Food BROCCOLI2 \u003d new FoodBuilder().withFoodName(\"Broccoli2\").build();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final Food POTATO2 \u003d new FoodBuilder().withFoodName(\"Potato2\").withFoodType(\"sv\").build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final Food BANANA2 \u003d new FoodBuilder().withFoodName(\"Banana2\").withFoodType(\"f\").build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final Food CHICKEN2 \u003d new FoodBuilder().withFoodName(\"Chicken2\").withFoodType(\"p\").build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final Food POTATO_CHIPS2 \u003d new FoodBuilder().withFoodName(\"Potato chips2\").withFoodType(\"s\").build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final Food CHICKEN_RICE2 \u003d new FoodBuilder().withFoodName(\"Chicken Rice2\").withFoodType(\"m\").build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final Food BROCCOLI3 \u003d new FoodBuilder().withFoodName(\"Broccoli3\").build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final Food POTATO3 \u003d new FoodBuilder().withFoodName(\"Potato3\").withFoodType(\"sv\").build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final Food BANANA3 \u003d new FoodBuilder().withFoodName(\"Banana3\").withFoodType(\"f\").build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final Food CHICKEN3 \u003d new FoodBuilder().withFoodName(\"Chicken3\").withFoodType(\"p\").build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final Food POTATO_CHIPS3 \u003d new FoodBuilder().withFoodName(\"Potato chips3\").withFoodType(\"s\").build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final Food CHICKEN_RICE3 \u003d new FoodBuilder().withFoodName(\"Chicken Rice3\").withFoodType(\"m\").build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final List\u003cFood\u003e FOODS \u003d new ArrayList\u003c\u003e(Arrays.asList(new Food[]{BROCCOLI, POTATO, BANANA, CHICKEN,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        POTATO_CHIPS, CHICKEN_RICE, BROCCOLI2, POTATO2, BANANA2, CHICKEN2, POTATO_CHIPS2, CHICKEN_RICE2, BROCCOLI3,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        POTATO3, BANANA3, CHICKEN3, POTATO_CHIPS3, CHICKEN_RICE3}));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalReminders.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.model.calendar.Reminder;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.model.calendar.Repetition;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " * A utility class containing a list of {@code Reminder} objects to be used in tests."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public class TypicalReminders {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public static final LocalDate DATE_DEC20 \u003d LocalDate.of(2019, 12, 20);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public static final LocalDate DATE_JAN04 \u003d LocalDate.of(2020, 1, 4);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public static final LocalTime TIME_MORN \u003d LocalTime.of(7, 45);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public static final LocalTime TIME_NOON \u003d LocalTime.of(11, 30);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public static final LocalTime TIME_EVEN \u003d LocalTime.of(18, 0);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public static final Repetition DAILY \u003d Repetition.EveryDay;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public static final Repetition WEEKLY \u003d Repetition.EveryWeek;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public static final Repetition ONCE \u003d Repetition.Once;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public static final Reminder LUNCH_INSULIN_INJECTION \u003d new ReminderBuilder()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            .withDescription(\"Lunch insulin injection\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            .withDateTime(DATE_DEC20, TIME_NOON).withRepetition(DAILY).build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public static final Reminder DINNER_INSULIN_INJECTION \u003d new ReminderBuilder()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            .withDescription(\"Dinner insulin injection\").withDateTime(DATE_DEC20, TIME_EVEN)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            .withRepetition(DAILY).build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public static final Reminder BUY_INSULIN \u003d new ReminderBuilder().withDescription(\"Buy insulin\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            .withDateTime(DATE_JAN04, TIME_MORN).withRepetition(ONCE).build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public static final Reminder CHECK_WEEKLY_SUMMARY \u003d new ReminderBuilder().withDescription(\"Check weekly summary\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            .withDateTime(DATE_DEC20, TIME_EVEN).withRepetition(WEEKLY).build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private TypicalReminders() {} // prevents instantiation"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public static List\u003cReminder\u003e getTypicalReminders() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(LUNCH_INSULIN_INJECTION, DINNER_INSULIN_INJECTION, BUY_INSULIN,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                CHECK_WEEKLY_SUMMARY));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 42
    }
  }
]
