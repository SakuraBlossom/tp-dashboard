[
  {
    "path": "README.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bigjunnn"
        },
        "content": "\u003d DukeCooks"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bigjunnn"
        },
        "content": "https://travis-ci.org/AY1920S1-CS2103T-T10-2/main[image:https://travis-ci.org/AY1920S1-CS2103T-T10-2/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bigjunnn"
        },
        "content": "https://ci.appveyor.com/project/bigjunnn/main-egc3b[image:https://ci.appveyor.com/api/projects/status/xvn06l5c3s9dqi57/branch/master?svg\u003dtrue[Build Status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bigjunnn"
        },
        "content": "https://coveralls.io/github/AY1920S1-CS2103T-T10-2/main?branch\u003dmaster[image:https://coveralls.io/repos/github/AY1920S1-CS2103T-T10-2/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bigjunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bigjunnn"
        },
        "content": "This is a lifestyle application. It\u0027s designed for health-conscious individuals with the preference of using *Command Line Interface (CLI)*."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bigjunnn"
        },
        "content": "You\u0027ll be able to manage various aspects of your life, such as your diet, health and exercise regime."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bigjunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bigjunnn"
        },
        "content": "DukeCooks in your hands, get your life all planned!"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bigjunnn"
        },
        "content": "Work in Progress, to be linked."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bigjunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bigjunnn"
        },
        "content": "* Project is inspired by  https://se-education.org[AddressBook-Level3] by SE-EDU initiative."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://openjfx.io/[JavaFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/junit-team/junit5[JUnit5]"
      }
    ],
    "authorContributionMap": {
      "bigjunnn": 12,
      "-": 19
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    String javaFxVersion \u003d \u002711.0.1\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    archiveName \u003d \u0027dukecooks.jar\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        \u0027site-name\u0027: \u0027DukeCooks\u0027,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://ay1920s1-cs2103t-t10-2.github.io/main/\u0027,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "khairulazman1997": 3,
      "-": 151,
      "bakwxh": 1
    }
  },
  {
    "path": "config/travis/deploy_github_pages.sh",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/bin/sh"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "# Pushes files generated by Asciidoctor and associated files to gh-pages branch for commits to master branch."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "set -o errexit # exit with nonzero exit code if any line fails"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -z \"$GITHUB_TOKEN\" ]; then"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  echo \u0027GITHUB_TOKEN is not set up in Travis. Skipping deploy.\u0027"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "  exit 0"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "fi;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "set -o nounset # exit if variable is unset"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "cd build/docs/html5"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "git init"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "git config user.exerciseName \u0027Deployment Bot (Travis)\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "git config user.email \u0027deploy@travis-ci.org\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "git config credential.helper \u0027store --file\u003d.git/credentials\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "echo \"https://${GITHUB_TOKEN}:@github.com\" \u003e .git/credentials"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "git remote add upstream \"https://github.com/${TRAVIS_REPO_SLUG}.git\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "# Reset to gh-pages branch, or create orphan branch if gh-pages does not exist in remote."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "if git ls-remote --exit-code --heads upstream gh-pages; then"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    git fetch --depth\u003d1 upstream gh-pages"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    git reset upstream/gh-pages"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "elif [ $? -eq 2 ]; then # exit code of git ls-remote is 2 if branch does not exist"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    git checkout --orphan gh-pages"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "else # error occurred"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    exit $?"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "# Exit if there are no changes to gh-pages files."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "if changes\u003d$(git status --porcelain) \u0026\u0026 [ -z \"$changes\" ]; then"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \u0027No changes to GitHub Pages files; exiting.\u0027"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "git add -A ."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "git commit -m \"Rebuild pages at ${TRAVIS_COMMIT}\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "git push --quiet upstream HEAD:gh-pages"
      }
    ],
    "authorContributionMap": {
      "khairulazman1997": 1,
      "-": 41
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hua-lun"
        },
        "content": "DukeCooks is a lifestyle app developed by our team."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hua-lun"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hua-lun"
        },
        "content": "We are a team of students from: http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hua-lun"
        },
        "content": "\u003d\u003d\u003d Chua Hua Lun"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hua-lun"
        },
        "content": "image::hua-lun.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hua-lun"
        },
        "content": "{empty}[https://github.com/hua-lun[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hua-lun"
        },
        "content": "Role: Scheduling and Tracking +"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hua-lun"
        },
        "content": "Responsibilities: Dashboard (Statistics and Suggestions)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hua-lun"
        },
        "content": "\u003d\u003d\u003d Lee Wah"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hua-lun"
        },
        "content": "image::bakwxh.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hua-lun"
        },
        "content": "{empty}[http://github.com/bakwxh[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hua-lun"
        },
        "content": "Role: Testing +"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hua-lun"
        },
        "content": "Responsibilities: Recipe Book"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hua-lun"
        },
        "content": "\u003d\u003d\u003d Liew Jun Wei"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hua-lun"
        },
        "content": "image::bigjunnn.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hua-lun"
        },
        "content": "{empty}[http://github.com/bigjunnn[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hua-lun"
        },
        "content": "Role: Documentation +"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hua-lun"
        },
        "content": "Responsibilities: Food Diary"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hua-lun"
        },
        "content": "\u003d\u003d\u003d Khairul"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hua-lun"
        },
        "content": "image::khairulazman1997.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hua-lun"
        },
        "content": "{empty}[http://github.com/khairulazman1997[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hua-lun"
        },
        "content": "Role: Integration +"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hua-lun"
        },
        "content": "Responsibilities: Exercise Tracker"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hua-lun"
        },
        "content": "\u003d\u003d\u003d Yeo Yuan Xin"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hua-lun"
        },
        "content": "image::yyuanxin.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hua-lun"
        },
        "content": "{empty}[http://github.com/yyuanxin[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hua-lun"
        },
        "content": "Role: UI Design +"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hua-lun"
        },
        "content": "Responsibilities: Health Records"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "hua-lun": 28,
      "-": 28
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "* *Bug reports, Suggestions:* Post in our https://github.com/se-edu/addressbook-level3/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "* *Contributing:* We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "* *Email us:* You may also reach out to any of us via the following emails:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "** *Yuan Xin:* `e0318874@u.nus.edu`"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "** *Hua Lun:* `e0318762@u.nus.edu`"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "** *Khairul:* `e0309879@u.nus.edu`"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bigjunnn"
        },
        "content": "** *Jun Wei:* `e0309430@u.nus.edu`"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "** *Lee Wah:* `e0310436@u.nus.edu`"
      }
    ],
    "authorContributionMap": {
      "bigjunnn": 1,
      "-": 4,
      "bakwxh": 11
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "\u003d DukeCooks v1.1 - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level3/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "By: `Team SE-EDU`      Since: `Jun 2016`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cSettingUp#, here\u003e\u003e."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureDiagram.png[]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "The `.puml` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the \u003c\u003cUsingPlantUml#, Using PlantUML guide\u003e\u003e to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has two classes called link:{repoURL}/src/main/java/seedu/address/Main.java[`Main`] and link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureSequenceDiagram.png[]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ".  `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeleteSequenceDiagram.png[]"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[]"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the Address Book data."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `Address Book`, which `Person` can reference. This would allow `Address Book` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "image:BetterModelClassDiagram.png[]"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[]"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the Address Book data in json format and read it back."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Undo/Redo feature"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Proposed Implementation"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedAddressBook`."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` -- Saves the current address book state in its history."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` -- Restores the previous address book state from its history."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` -- Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState0.png[]"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState1.png[]"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "Step 3. The user executes `add n/David ...` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState2.png[]"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState3.png[]"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial address book state, then there are no previous address book states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoSequenceDiagram.png[]"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone address book states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState4.png[]"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/David ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState5.png[]"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "image::CommitActivityDiagram.png[]"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of address book states."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedAddressBook`."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Data Encryption"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data encryption feature will be implemented}_"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDocumentation#, here\u003e\u003e."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cTesting#, here\u003e\u003e."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDevOps#, here\u003e\u003e."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "* health conscious individuals"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "* prefers to have a complete health monitoring all in one app"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "*Value proposition*: monitors all aspects of health in one application"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "|`* * *` |Home Cook |store all my recipes |easily list out all the ingredients I have to buy for a weekly meal plan"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "|`* * *` |Indecisive person |get food suggestions |save time when deciding what to eat"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "|`* * *` |Health conscious person |track my health progress |manage my diet"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "|`* * *` |Fitness enthusiast |track my exercises |keep a history of my fitness progress"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "|`* * *` |Food Blogger |consolidate my food and exercise plan |share them with other interested individuals"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "|`* *` |Foodie |find new places to eat |try out new places and share the experience with others"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "|`*` |Fun Seeker |keep track of my health in a game like way |have fun and be healthy at the same time"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "(For all use cases below, the *System* is `DukeCooks` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "\u003d\u003d\u003d Use case: Add recipe"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "1.  User requests to list recipes"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "2.  DukeCooks shows a list of recipes"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "3.  User requests to add a recipe to the list"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "4.  DukeCooks adds the recipe to the list"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "** 3a1. DukeCooks shows an error message."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "\u003d\u003d\u003d Use case: Suggest Food"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "1.  User requests for a food suggestion"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "2.  DukeCooks gives a food recommendation"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "3.  User is satisfied with the recommendation"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "+"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "* 3a. User is unsatisfied with the food recommendations."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "+"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "** 3a1. User asks for another suggestion."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "+"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "\u003d\u003d\u003d Use case: Add Calorie Intake"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "1.  User requests to add calorie intake for the day"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "2.  DukeCooks shows a list of Nutrition (Breakdown)"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "3.  User requests to add certain nutrition value fields"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "4.  DukeCooks updates Health Records"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "+"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "* 2a. The Nutrition list is empty (User did not give any nutrition inputs)."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "+"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "** 2a1. DukeCooks updates calorie count in Health Records (omit nutritional information)."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "+"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "+"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "** 3a1. DukeCooks shows an error message."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "+"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "\u003d\u003d\u003d Use case: Create Workout"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "1.  User requests to list \u003c\u003cexercise\u003e\u003e"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "2.  DukeCooks shows a list of \u003c\u003cexercise\u003e\u003e"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "3.  User requests to add an exercise into their \u003c\u003cworkout\u003e\u003e"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "4.  DukeCooks adds the exercise into the \u003c\u003cworkout\u003e\u003e"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "+"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "* 2a. The exercise list is empty"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "+"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "** 2a1. DukeCooks updates the list with pre-made exercises."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "+"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "+"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "** 3a1. DukeCooks shows an error message."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "+"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "\u003d\u003d\u003d Use case: Create a new diary"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "1.  User requests to create a new diary"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "2.  A new diary is created with the specified name"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "+"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "* 1a. Diary name already exists."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "+"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "** 1a1. DukeCooks displays an error message."
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "+"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ".  Should be able to hold up to 1000 recipes without a significant reduction in performance for typical usage."
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "[[workout]] Workout::"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "A list of \u003c\u003cexercise\u003e\u003e planned to be done in one session."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "[[exercise]] Exercise::"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "An activity that works a specific or multiple muscles, usually a repetition of an action."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": "*Product Name*"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": "Author: ..."
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ". Deleting a person while all userprofile are listed"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ".. Prerequisites: List all userprofile using the `list` command. Multiple userprofile in the list."
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "yyuanxin": 2,
      "khairulazman1997": 124,
      "-": 402
    }
  },
  {
    "path": "docs/Documentation.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d AddressBook Level 3 - Documentation"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level3/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Editing Diagrams"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingPlantUml#, UsingPlantUml.adoc\u003e\u003e to find out how to create and update the UML diagrams in the developer guide."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site-wide Documentation Settings"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/build.gradle[`build.gradle`] file specifies some project-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "|Attribute exerciseName |Description |Default value"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "|`site-exerciseName`"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "|The exerciseName of the website."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "If set, the exerciseName will be displayed near the top of the page."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-seedu`"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "|Define this attribute if the project is an official SE-EDU project."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "This will render the SE-EDU navigation bar at the top of the page, and add some SE-EDU-specific navigation items."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Per-file Documentation Settings"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "|Attribute exerciseName |Description |Default value"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, ``LearningOutcomes``{asterisk}, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "_{asterisk} Official SE-EDU projects only_"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Template"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "Modifying the template files in link:{repoURL}/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "The SE-EDU team does not provide support for modified template files."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      }
    ],
    "authorContributionMap": {
      "khairulazman1997": 5,
      "-": 118
    }
  },
  {
    "path": "docs/SettingUp.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d AddressBook Level 3 - Setting Up"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level3/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `11`* or above"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ". Run the `seedu.address.Main` and try a few commands"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting#,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "After forking the repo, the documentation will still have the SE-EDU branding and refer to the `se-edu/addressbook-level3` repo."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "If you plan to develop this fork as a separate product (i.e. instead of contributing to `se-edu/addressbook-level3`), you should do the following:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ". Configure the \u003c\u003cDocumentation#Docs-SiteWideDocSettings, site-wide documentation settings\u003e\u003e in link:{repoURL}/build.gradle[`build.gradle`], such as the `site-exerciseName`, to suit your own project."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the URL in the attribute `repoURL` in link:{repoURL}/docs/DeveloperGuide.adoc[`DeveloperGuide.adoc`] and link:{repoURL}/docs/UserGuide.adoc[`UserGuide.adoc`] with the URL of your fork."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "When you are ready to start coding, we recommend that you get some sense of the overall design by reading about \u003c\u003cDeveloperGuide#Design-Architecture, AddressBook\u0027s architecture\u003e\u003e."
      }
    ],
    "authorContributionMap": {
      "khairulazman1997": 1,
      "-": 83
    }
  },
  {
    "path": "docs/Testing.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d AddressBook Level 3 - Testing"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level3/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "There are two ways to run tests."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean test` (Mac/Linux: `./gradlew clean test`)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "We have three types of tests:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ".  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.commons.StringUtilTest`"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ".  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "e.g. `seedu.address.storage.WorkoutPlannerStorageManagerTest`"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ".  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: Keyboard and mouse movements are not simulated on macOS Mojave, resulting in GUI Tests failure.**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: From macOS Mojave onwards, applications without `Accessibility` permission cannot simulate certain keyboard and mouse movements."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Open `System Preferences`, click `Security and Privacy` -\u003e `Privacy` -\u003e `Accessibility`, and check the box beside `Intellij IDEA`."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".`Accessibility` permission is granted to `IntelliJ IDEA`"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "image::testfx-idea-accessibility-permissions.png[width\u003d\"600\"]"
      }
    ],
    "authorContributionMap": {
      "khairulazman1997": 1,
      "-": 51
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "\u003d DukeCooks - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ":toclevels: 5"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level3"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "By: `Team 10`      Since: `Sep 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "DukeCooks is a lifestyle app, specially designed for health-conscious individuals who are comfortable with the usage of Command Line Interface (CLI). You will be able to manage various aspects of your lifestyle through this app."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ".  Download the latest `DukeCooks`."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for your Address Book."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "* Items in angle brackets are the parameters to be supplied by the user"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "* Items in square brackets are optional"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "\u003d\u003d Recipe Book"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "\u003d\u003d\u003d Adding a recipe:  `add recipe`"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Initializes creation of a recipe with input exerciseName. DukeCooks will prompt for ingredients. User may key in ingredients with price, in the format: `\u003cexerciseName\u003e` `$\u003cprice\u003e`. Once done, user may enter `done`. DukeCooks will prompt for nutritional value in the format: `\u003ckcal\u003e \u003ccarbs(g)\u003e \u003cfat(g)\u003e \u003cprotein(g)\u003e`.  +"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Format: `add recipe \u003cexerciseName\u003e`"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "* `add recipe Chicken Rice` +"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Output: Recipe “Chicken Rice” has been created! Please enter the ingredients."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "* `Chicken Breast $2` +"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Output: _“Chicken Breast” has been added to the ingredients list. Anything else?_"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "* `Seasoned Rice $1` +"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Output: _“Seasoned Rice” has been added to the ingredients list. Anything else?_"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "* `done` +"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Output: _Ingredients list for “Chicken Rice” is complete! Please enter the nutritional value._"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "* `666 55 44 30` +"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Output: _Nutritional value for “Chicken Rice” captured. “Chicken Rice” successfully created!_"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "\u003d\u003d\u003d Deleting a recipe: `delete recipe`"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Deletes recipe with specified exerciseName. +"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Format: `delete recipe \u003cexerciseName\u003e`"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "* `delete recipe Chicken Rice` +"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Output: _“Chicken Rice” has been deleted from the recipe book!_"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "\u003d\u003d\u003d Listing your recipes: `list recipe`"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Lists all recipe names. +"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Format: `list recipe`"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "* `list recipe` +"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Output: Lists all recipes."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "\u003d\u003d\u003d  Viewing a recipe: `view recipe`"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Lists ingredients of specified recipe, nutritional value, and image, difficulty and preparation time, if applicable. +"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Format: `view recipe \u003cexerciseName\u003e`"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "* `view recipe Chicken Rice` +"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Output: Shows the recipe named “Chicken Rice”, as long as it exists in the recipe book."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "\u003d\u003d\u003d Giving a recipe an image: `[coming in v2.0]`"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Adds image of recipe by retrieving the image with the specified file exerciseName. Files are to be placed in the folder [to be implemented]. +"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Format: `recipe \u003cexerciseName\u003e image \u003cfilename\u003e`"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "\u003d\u003d\u003d Giving a recipe a difficulty level: `[coming in v2.0]`"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Tags the recipe specified with the difficulty, ranging from 1 to 3. +"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Format: `recipe \u003cexerciseName\u003e difficulty \u003cdifficulty\u003e`"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "\u003d\u003d\u003d Giving a recipe preparation timing: `[coming in v2.0]`"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Tags the recipe specified with the preparation time, in minutes. +"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Format: `recipe \u003cexerciseName\u003e preptime \u003ctime(min)\u003e`"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "\u003d\u003d\u003d Adding a shopping list: `[coming in v2.0]`"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Creates a new shopping list with specified exerciseName. +"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Format: `add shoplist \u003cexerciseName\u003e`"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "\u003d\u003d\u003d  Deleting a shopping list: `[coming in v2.0]`"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Deletes specified shopping list. +"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Format: `delete shoplist \u003cexerciseName\u003e`"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "\u003d\u003d\u003d Listing your shopping lists: `[coming in v2.0]`"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Lists all shopping list names. +"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Format: `list shoplist`"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "\u003d\u003d\u003d Viewing a shopping list: `[coming in v2.0]`"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Collates the ingredients to be bought and returns them as a list. Also displays the total cost of the shopping list, and each ingredient’s individual price. +"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Format: `view shoplist \u003cexerciseName\u003e`"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "\u003d\u003d\u003d Adding recipe to a shopping list: `[coming in v2.0]`"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Adds specified recipe to the shopping list. +"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Format: `shoplist \u003cexerciseName\u003e add \u003crecipe\u003e`"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "\u003d\u003d\u003d Deleting a recipe from a shopping list: `[coming in v2.0]`"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Deletes specified recipe from the shopping list. +"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Format: `shoplist \u003cexerciseName\u003e delete \u003crecipe\u003e`"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "\u003d\u003d\u003d Add a meal plan: `[coming in v2.0]`"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Creates a new meal plan with specified exerciseName. +"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Format: `add mealplan \u003cexerciseName\u003e`"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "\u003d\u003d\u003d Delete a meal plan: `[coming in v2.0]`"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Deletes specified meal plan. +"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Format: `delete mealplan \u003cexerciseName\u003e`"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "\u003d\u003d\u003d List your meal plans: `[coming in v2.0]`"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Lists all meal plan names. +"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Format: `list mealplan`"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "\u003d\u003d\u003d View a meal plan: `[coming in v2.0]`"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Displays daily nutritional value of the meal plan. +"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Format: `view mealplan \u003cexerciseName\u003e`"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "\u003d\u003d\u003d Add recipe to a meal plan: `[coming in v2.0]`"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Adds the specified recipe to the specified meal plan, according to the day listed in the `\u003cday\u003e` field. The `\u003cday\u003e` field is a number ranging from 1 to 7, for the 7 days present in the meal plan. +"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Format: `mealplan \u003cexerciseName\u003e \u003cday\u003e add \u003crecipe exerciseName\u003e`"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "\u003d\u003d\u003d Generate a shopping list for a meal plan: `[coming in v2.0]`"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Generates a shopping list for the specified meal plan. If `\u003cshoplist exerciseName\u003e` is not specified, we use `\u003cexerciseName\u003e` by default. +"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Format: `mealplan \u003cexerciseName\u003e shoplist \u003cshoplist exerciseName\u003e`"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "\u003d\u003d Dashboard (Analytics + Suggestions)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hua-lun"
        },
        "content": "\u003d\u003d\u003d Get suggestions: `suggest` `[coming in v2.0]`"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Provides an overview analysis based on past records. Gives suggestions on things the user should do more or less on. +"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Format: `suggest`"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hua-lun"
        },
        "content": "\u003d\u003d\u003d Get random food suggestions: `suggest food` `[coming in v2.0]`"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Gives a random food suggestion for the user. +"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Format: `suggest food`"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hua-lun"
        },
        "content": "\u003d\u003d\u003d Get new food suggestions: `suggest new food` `[coming in v2.0]`"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Gives a recommendation of a food item that is not logged by the user. +"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Format: `suggest new food`"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hua-lun"
        },
        "content": "\u003d\u003d\u003d Get Statistics: `stats` `[coming in v1.3]`"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Gives all the statistics available. +"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Format: `stats`"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "\u003d\u003d Health Records"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "\u003d\u003d\u003d View User Profile:  `view profile`"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Show a summary of user’s medical history, allergies, body measurements +"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Format: `view profile`"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "* Prompt to create profile if user profile does not exist"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "NOTE: DukeCooks will only have one user profile!"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "\u003d\u003d\u003d View Health Data:  `view health`"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Views Health Records of specific type. +"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Format: `view health \u003ctype\u003e [time period]`"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "IMPORTANT:  By default, DukeCooks will show health records of past 1 month if [time period] is not specified."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "User can view health data under the following 8 types:"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ". Weight"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ". Waist"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ". Body Fat"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ". Calories"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ". Heart Rate"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ". Blood Pressure"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ". Glucose (i.e. blood sugar)"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ". Menstrual Cycle"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "NOTE: Records of Menstrual Cycle will only be made available for users declared as female under *User Profile*."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "* `view health glucose 3 month` +"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Shows user’s blood sugar records of the past 3 months as of today."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "* `view health exerciseWeight` +"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Shows user’s exerciseWeight of the past *1* month as of today."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "\u003d\u003d\u003d Add Health Data:  `add health`"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Adds a health record of specified type with input value. +"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Format: `add health \u003ctype\u003e \u003cvalue\u003e [date] \u003ctime\u003e`"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "IMPORTANT:  if [date] is not specified, DukeCooks will set as *today* to be the default."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "User can add health data of the following 8 types:"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ". Weight (in KG)"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ". Waist (in CM)"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ". Body Fat (in %)"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ". Calories (in KCAL)"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ". Heart Rate (in BPM)"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ". Blood Pressure (in Systolic/Diastolic mmHg)"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ". Glucose (in mmol/L)"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ". Menstrual Cycle (by date)"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "** DukeCooks can recognise if it’s a start or end date."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "NOTE: Records of Menstrual Cycle will only be made available for users declared as female under *User Profile*."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "* `add health blood pressure 120/80 9am` +"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Adds a new blood pressure record of 120/80 mmHg as of today 9am."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "* `add health menstrual` +"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Adds a new start date record if DukeCooks finds no menstrual records for the month. Else, Dukecooks will add as new end date record."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "\u003d\u003d\u003d Edit Health Data:  `edit health`"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Edits an existing health record of specified record ID with input value to overwrite. +"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Format: `edit health \u003crecord id\u003e \u003cvalue\u003e`"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "* \u003crecord id\u003e refers to the unique identifier attributed to each health record upon creation."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "* `edit health BP129391 133/80` +"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Edits the existing blood pressure record from today 9am to 133/80 mmHg."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "* `edit health W000123 50` +"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Edits exerciseWeight record id of W000123 to 50kg."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "\u003d\u003d\u003d Delete Health Data:  `delete health`"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Deletes an existing health record of specified record ID. +"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Format: `delete health \u003crecord id\u003e`"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "* \u003crecord id\u003e refers to the unique identifier attributed to each health record upon creation."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "* `delete health BP129391` +"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Deletes the health record of BP129391."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "* `delete health W000123` +"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Deletes the health record of W000123."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "\u003d\u003d\u003d View Medical Appointments:  `[coming in v2.0]`"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Shows all the medical appointment for the month. +"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Format: `view appt [time period]`"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "* `view appt` +"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "View all the medical appointments for the month."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "* `view appt 3 month` +"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "View all the medical appointments of the next 3 months."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "\u003d\u003d\u003d Add Medical Appointment:  `[coming in v2.0]`"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Adds a new medical appointment where user can include an optional note. +"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Format: `add appt \u003cdate time\u003e [note]`"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "* DukeCooks will prompt reminder when appointment is in a week’s time."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "* `add appt 31/12/2019 8am` +"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Add a new medical appointment for 31st Dec 2019, 8AM."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "* `add appt 31/12/2019 8am thomson medical - blood glucose` +"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Add a new medical appointment for 31st Dec 2019, 8AM with note “thomson medical - blood glucose” ."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "\u003d\u003d\u003d Edit Medical Appointment:  `[coming in v2.0]`"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Edits an existing medical appointment. +"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Format: `edit appt \u003cAppt ID\u003e [date time] [note]`"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "* \u003cAppt ID\u003e refers to the unique identifier attributed to each medical appointment upon creation."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "* At least one of the optional fields must be provided"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "* Existing value will be overwritten with the new inputs given"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "* `edit appt APPT0001 CGH - blood glucose` +"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Edits the note to “CGH - blood glucose”."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "* `edit appt APPT0001 31/12/2019 12pm` +"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Change the medical appointment to be 31st Dec 2019, 12PM."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "* `edit appt APPT0001 31/12/2019 1.30pm CGH - blood glucose` +"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Change the medical appointment to be 31st Dec 2019, 1.30PM with “CGH - blood glucose” note."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "\u003d\u003d\u003d Delete Medical Appointment `[coming in v2.0]`"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Deletes an existing medical appointment. +"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Format: `delete appt \u003cAPPT ID\u003e`"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "* \u003cAPPT ID\u003e refers to the unique identifier attributed to each medical appointment upon creation."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "* `delete appt APPT0001` +"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Deletes the medical appointment of APPT0001."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "\u003d\u003d\u003d Print Health Records to PDF `[coming in v2.0]`"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Generates a PDF copy of health records. +"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Format: `print health \u003ctype\u003e [MORE_TYPES] [time period]`"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "* If more than one type of data to print, the data will be displayed in the order of input (refer to example)."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "IMPORTANT: By default, DukeCooks will generate pdf with health records for the past 1 month if [time period] is not specified."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "* `print health glucose` +"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Generates a PDF copy of all the blood sugar records for the past month as of today"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "* `print health glucose blood pressure` +"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Generates a PDF copy of all the blood sugar and blood pressure records respectively from the past month as of today. Data on blood sugar will come before blood pressure."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "* `print health glucose blood pressure 01/01/2019 - 31/08/2019` +"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Generates a PDF copy of all the blood sugar and blood pressure records respectively from 1st Jan 2019 to 31st Aug 2019."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "\u003d\u003d Workout Tracker"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "\u003d\u003d\u003d Adding an exercise: `add exercise`"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Adds an exercise to exercise list. App will then prompt for the muscle type, level of intensity (out of 5), instructions as well as images of the steps (in directory form) (optional) in order."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Once done you can add the recommended number of sets (optional), recommended number of repetitions (optional), recommended timing in minutes(optional), exerciseWeight (optional) in the format: `s/SETS r/REPETITIONS w/WEIGHT t/TIMING` +"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Format: `add exercise \u003cexerciseName\u003e`"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "* `add exercise Inclined Bench Press` +"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Output: _Exercise “Inclined Bench Press” has been created. Please enter the muscle groups it trains, separating each muscle by a “/”._"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "* `lats/chest` +"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Output: _Muscle group(s) have been added! Now lets add intensity level out of 5!_"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "* `4` +"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Output: _Now let’s add the instructions!_"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "* `Lie down on an inclined bench` +"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Output: _Step 1 added! Type done when you’re done with all the instructions!_"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "* `Push exerciseWeight above head` +"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Output: _Step 2 added! Type done when you’re done with all the instructions!_"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "* `done` +"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Output: _Almost done! If you want to add an image please specify the folder! Otherwise type “/”._"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "* `/` +"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Output: _If you want to specify your reps, sets and exerciseWeight you may now do so. Otherwise type “/”._"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "* `w/30kg r/5 s/5 t/1:00` +"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Output: _Nice exercise has been created!_"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "\u003d\u003d\u003d List Exercise: `list exercise`"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "List exercises which matches optional parameters specified eg. muscle type/intensity. +"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Format: `list exercise m/MUSCLEGROUP i/INTENSITY`"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "\u003d\u003d\u003d Delete exercise: `delete exercise`"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Deletes exercise of specified index. +"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Format: `delete exercise \u003cindex\u003e`"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "\u003d\u003d\u003d View exercise: `view exercise`"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "View all the details of an exercise of the specified index. +"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Format: `view exercise\u003cindex\u003e`"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "\u003d\u003d\u003d Add calorie: `[coming in v1.3]`"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Tracks calorie burned per rep/set of the exercise in kcal. +"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Format: `calorie \u003cindex\u003e \u003ccalories\u003e`"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "\u003d\u003d\u003d Check History: `[coming in v2.0]`"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Checks the history of all the pass workouts as well as their statistics eg. exerciseWeight used, number of times exercise is carried out, workouts that use this exercise."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "\u003d\u003d\u003d Preset Exercises: `[coming in v2.0]`"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "If the list of exercises is empty, a list of preset exercises are generated."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "\u003d\u003d\u003d Create Workout: `workout`"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Adds a workout to workout list. The app will then display a list of exercises to be added to the workout, you can then filter this by adding specifications such as muscle type. To add an exercise, simply specify the index on the current list that is displayed. If the exercise has a recommended number or reps, sets, exerciseWeight and timing you will be asked whether to follow it. Otherwise you can specify what you wish. Once you have added all the exercises, you will then be asked to specify the amount of time for rest in between sets. +"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Format: `workout \u003cexerciseName\u003e`"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "\u003d\u003d\u003d List Workout: `list workout`"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "List exercises which matches optional parameters specified eg. muscle type/intensity/total time. +"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Format: `list exercise m/MUSCLEGROUP i/INTENSITY t/TOTALTIME`"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "\u003d\u003d\u003d Delete workout: `delete workout`"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Deletes workout of specified index. +"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Format: `delete workout \u003cindex\u003e`"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "\u003d\u003d\u003d Run Workout: `run`"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Runs a workout with a timer. Shows the details of the exercise: instructions, reps, sets, exerciseWeight as well images if provided. After workout, stats will be automatically be updated and weights of workout will be increased accordingly. +"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Format: `run \u003cindex\u003e`"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "\u003d\u003d\u003d Schedule Workout: `[coming in v1.3]`"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "\u003d\u003d\u003d Track Body Fitness: `[coming in v1.3]`"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "\u003d\u003d Food Diary"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "\u003d\u003d\u003d Create Diary: `create diary`"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Creates a new diary with the specified exerciseName +"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Format: `create diary \u003cdiary exerciseName\u003e`"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "* Diary names are unique"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "* `create diary Healthy Living` +"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": " Creates a new diary with the exerciseName “Healthy Living”"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "\u003d\u003d\u003d Delete Diary: `delete diary`"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Deletes the diary with the specified exerciseName +"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Format: `delete diary \u003cdiary exerciseName\u003e`"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "* Diary exerciseName should already exist"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "* `delete diary Healthy Living` +"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": " Deletes the diary with the exerciseName “Healthy Living”"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "\u003d\u003d\u003d Add Page: `add page`"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Adds a page to the end of the specified diary +"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Format: `add page \u003ctype\u003e \u003cdiary exerciseName\u003e` +"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "* Diary should already exist"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "NOTE: Users can only add pages of types: health, food or exercise."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "* `add page health Healthy Living` +"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": " Adds a health page to the diary named “Healthy Living”"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "* `add page food Healthy Living` +"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Adds a food page to the diary named “Healthy Living”"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "* `add page exercise Healthy Living` +"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Adds an exercise page to the diary named “Healthy Living”"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "\u003d\u003d\u003d Delete Page: `delete page`"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Deletes the specified page from the specified diary +"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Format: `delete page \u003cindex\u003e \u003cdiary exerciseName\u003e`"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "* Diary should already exist"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "* Index should a positive integer"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "* `delete page 2 Healthy Living` +"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": " Deletes page 2 of the diary named “Healthy Living”"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "\u003d\u003d\u003d Link Recipes: `[Coming in v2.0]`"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Creates a new food page in the specified diary, using pre-existing recipes +"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Format: `link recipe \u003crecipe exerciseName\u003e /to \u003cdiary exerciseName\u003e`"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "* Diary should already exist"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "* Recipe should already exist"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "NOTE: Deleting recipes will not delete the linked pages in diary!"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "* `link recipe Caesar Salad /to Healthy Living` +"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": " Creates a food page about “Caesar Salad” and adds it to the diary named “Healthy Living”"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "\u003d\u003d\u003d  Link Exercises: `[Coming in v2.0]`"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Creates a new exercise page in the specified diary, using pre-existing exercises +"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Format: `link exercise \u003cexercise exerciseName\u003e /to \u003cdiary exerciseName\u003e`"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "* Diary should already exist"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "* Exercise should already exist"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "NOTE: Deleting exercises will not delete the linked pages in diary!"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "* `link exercise Crunch /to Healthy Living` +"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": " Creates an exercise page about “Crunch” and adds it to the diary named “Healthy Living”"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "\u003d\u003d\u003d Link Health Records: `[Coming in v2.0]`"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Creates a new health page in the specified diary, using pre-existing records +"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Format: `link records \u003crecord id\u003e /to \u003cdiary exerciseName\u003e`"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "* Diary should already exist"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "* Records should already exist"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "NOTE: Deleting health records will not delete the linked pages in diary!"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "* `link records BP129391 /to Healthy Living` +"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": " Creates a health page about “BP129391” and adds it to the diary named “Healthy Living”"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "\u003d\u003d\u003d Edit Diary: `[Coming in v2.0]`"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Allows user to edit some basic information in the diary +"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Format: `edit \u003cdiary exerciseName\u003e`"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "* Diary should already exist"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "* `edit Healthy Living` +"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": " Users will now be able to edit basic information in the diary named “Healthy Living”"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "\u003d\u003d\u003d Edit Page: `[Coming in v2.0]`"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Allows user to edit basic information in the specified page of the specified diary +"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Format: `edit page \u003cindex\u003e \u003cdiary exerciseName\u003e`"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "* Diary should already exist"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "* Index should be a positive integer"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "* `edit page 2 Healthy Living` +"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": " Users will be able to edit some basic information in page 2 of the diary named “Healthy Living”"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "\u003d\u003d\u003d View Diary: `[Coming in v2.0]`"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Allows user to view the specified diary in a page-form +"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Format: `view  \u003cdiary exerciseName\u003e`"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "* Diary should already exist"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "* `view Healthy Living` +"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": " Users will now be able to view the diary in a page-view in the GUI"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "\u003d\u003d\u003d Print Diary: `[Coming in v2.0]`"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Allows user to print the specified diary in PDF format +"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Format: `print \u003cdiary exerciseName\u003e`"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "* Diary should already exist"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "* `print Healthy Living` +"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "A PDF format of the diary named “Healthy Living” will be generated"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "*Recipe Book*"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "* *Add recipe* : `add recipe \u003cexerciseName\u003e` +"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "e.g. `add recipe Chicken Rice`"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "* *Delete recipe* : `delete recipe \u003cexerciseName\u003e` +"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "e.g. `delete recipe Chicken Rice`"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "* *List recipes* : `list recipe`"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "* *View recipe* : `view recipe` +"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "e.g. `view recipe Chicken Rice`"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "*Dashboard (Analytics \u0026 Suggestions)*"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "* *Get suggestions* : `suggest`"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "* *Get random food suggestions* : `suggest food`"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "* *Get new food suggestions* : `suggest new food`"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "* *Get statistics* : `stats`"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "* *Get food statistics* : `stats food`"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "* *Get exercise statistics* : `stats exercise`"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "*Health Records*"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "* *View User Profile* : `view profile`"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "* *View health data* : `view health \u003ctype\u003e [time period]` +"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "e.g. `view health glucose 3 month`"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "* *Add health data* : `add health \u003ctype\u003e \u003cvalue\u003e [date] \u003ctime\u003e` +"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "e.g. `add health blood pressure 120/80 9am`"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "* *Edit health data* : `edit health \u003crecord id\u003e \u003cvalue\u003e` +"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "e.g. `edit health BP129391 133/80`"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "* *Delete health data* : `delete health \u003crecord id\u003e` +"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "e.g. `delete health BP129391`"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "*Workout Tracker*"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "* *Adding an exercise* : `add exercise \u003cexerciseName\u003e` +"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "e.g. `add exercise Inclined Bench Press`"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "* *List exercise* : `list exercise [MUSCLEGROUP] [INTENSITY]`"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "* *Delete exercise* : `delete exercise \u003cindex\u003e`"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "* *View exercise* : `view exercise\u003cindex\u003e`"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "* *Create workout* : `workout \u003cexerciseName\u003e`"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "* *List workout* : `list exercise [MUSCLEGROUP] [INTENSITY] [TOTALTIME]`"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "* *Delete workout* : `delete workout \u003cindex\u003e`"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "* *Run workout* : `run \u003cindex\u003e`"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "*Food Diary*"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "* *Create Diary* : `create diary` +"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "e.g. `create diary Healthy Living`"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "* *Delete Diary* : `delete diary \u003cdiary exerciseName\u003e` +"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "e.g. `delete diary Healthy Living`"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "* *Add page* : `add page \u003ctype\u003e \u003cdiary exerciseName\u003e` +"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "e.g. `add page health Healthy Living`"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "* *Delete page* : `delete page \u003cindex\u003e \u003cdiary exerciseName\u003e` +"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "e.g. `delete page 2 Healthy Living`"
      }
    ],
    "authorContributionMap": {
      "hua-lun": 4,
      "khairulazman1997": 503,
      "-": 82
    }
  },
  {
    "path": "docs/UsingCoveralls.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Using Coveralls"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "This document was originally written for _AddressBook Level 4_ and hence its screenshots refer to `addressbook-level4`."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "For use with _AddressBook Level 3_, wherever `addressbook-level4` is used in the screenshots, you should use *`addressbook-level3`*."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "https://coveralls.io/[Coveralls] is a web service that tracks code coverage over time for GitHub projects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Coveralls requires Travis CI to be set up beforehand as Travis sends the coverage report from the latest build to Coveralls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "If you have not set up Travis CI, see \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e. Currently, Coveralls supports Travis CI but not AppVeyor."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up Coveralls"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to https://coveralls.io/ and click `SIGN IN`. Then click `GITHUB SIGN IN` and enter your GitHub account details if needed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ".  After logging in, you will be brought to the `Your Repositories` page. On the site\u0027s navigation bar, click https://coveralls.io/repos/new[ADD REPOS]."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ".  Find the switch for the forked repository."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* If the organization is not shown, click `GITHUB SETTINGS` as shown below:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "image:coveralls/github_settings.png[GitHub settings]"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "This should bring you to a GitHub page that manages the access of third-party applications. Depending on whether you are the owner of the repository, you can either grant access"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "image:grant_access.png[Grant Access]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "or request access"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "image:request_access.png[Request Access]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "to Coveralls so that it can access your repository."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* If your repository cannot be found, click `SYNC REPOS`."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "image:coveralls/sync_repos.png[Sync repos]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ".  Activate the switch."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "image:coveralls/flick_repository_switch.png[Activate the switch]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ".  Update the link of the `Coverage Status` badge at the top of your \u003c\u003cREADME#, README.adoc\u003e\u003e to point to that of your own repo by replacing the outlined areas with `your-org-exerciseName/your-repo-exerciseName`."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "image:coveralls/coverage_asciidoc_code.png[Coverage Status Badge]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".  You can now see the coverage report for your project after each Travis build by clicking on the `Coverage Status` badge."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "image:coveralls/coverage_report.png[Coverage Report Summary]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Disabling Coveralls Automatic Comments on Pull Requests"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "Coveralls automatically comments on the coverage status of the pull requests in GitHub. If it\u0027s a hindrance, you can disable it in the settings of your project in Coveralls:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ".  Click `Settings`."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ".  Uncheck the `LEAVE COMMENTS?` checkbox. Then click `SAVE CHANGES`."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "image:coveralls/disable_comments.png[Disable comments, width \u003d 942]"
      }
    ],
    "authorContributionMap": {
      "khairulazman1997": 1,
      "-": 62
    }
  },
  {
    "path": "docs/UsingNetlify.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Using Netlify"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "This document was originally written for _AddressBook Level 4_ and hence its screenshots refer to `addressbook-level4`."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "For use with _AddressBook Level 3_, wherever `addressbook-level4` is used in the screenshots, you should use *`addressbook-level3`*."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "https://www.netlify.com/[Netlify] is an automated hosting platform for deploying static websites. With the aid of build tools such as Gradle, Netlify provides a smoother experience for previewing documentation. This can be done by using Netlify\u0027s https://www.netlify.com/blog/2016/07/20/introducing-deploy-previews-in-netlify/[Deploy Previews] feature, which shows a preview of the updated documentation whenever a pull request is made."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up Netlify"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork the repository to your own organization."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to https://www.netlify.com/ and click `Sign Up`. Next, click `GITHUB SIGN IN`, enter your GitHub account details and authorize netlify."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ". After logging in, click `New site from Git`."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ". You will then be brought to the setup page. Click `GitHub` to link your repository to Netlify."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* Depending on whether you are the owner of the repository, you can either grant or request access to Netlify so that it can access your repository and build your documentation."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "image:netlify/grant_or_request_access.png[Grant or request access, width \u003d 630]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* After granting or requesting access to your repository, click `Authorize netlify`."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ". Pick your repository from the list."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ". Fill out the details as follows and then click `Deploy site`."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "* Branch to deploy: select `master` branch"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "* Build command: `./gradlew asciidoctor`"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "The build command is the command that builds the documentation into HTML format."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* Publish directory: `build/docs/html5`"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "The publish directory is the directory in which the built HTML documentation resides."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ". Once Netlify has completed building your project, you can now:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "* View your main branch\u0027s deployed documentation on the site exerciseName given by Netlify (customizable as shown \u003c\u003cChanging the site exerciseName of your project, below\u003e\u003e)."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "image:netlify/temp_site_name.png[Temporary site exerciseName, width \u003d 630]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* Preview the updated documentation whenever a pull request is made by clicking the `Details` hyperlink next to the Netlify test status."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "image:netlify/netlify_details.png[Netlify details link, width \u003d 630]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "\u003d\u003d Changing the site exerciseName of your project"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "If you don\u0027t like the site exerciseName given by Netlify, you can change it as follows:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on `Settings`."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ". Then click `Change site exerciseName` and fill in your desired site exerciseName."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "image:netlify/change_site_name.png[Change site exerciseName, width \u003d 630]"
      }
    ],
    "authorContributionMap": {
      "khairulazman1997": 6,
      "-": 53
    }
  },
  {
    "path": "docs/UsingTravis.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Travis CI"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "This document was originally written for _AddressBook Level 4_ and hence its screenshots refer to `addressbook-level4`."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "For use with _AddressBook Level 3_, wherever `addressbook-level4` is used in the screenshots, you should use *`addressbook-level3`*."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "https://travis-ci.org/[Travis CI] is a _Continuous Integration_ platform for GitHub projects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Travis CI can run the projects\u0027 tests automatically whenever new code is pushed to the repo. This ensures that existing functionality and features have not been broken by the changes."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "The current Travis CI set up performs the following things whenever someone push code to the repo:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "* Runs the `./gradlew clean test coverage coveralls -i` command (see \u003c\u003cUsingGradle#, UsingGradle\u003e\u003e for more details on what this command means)."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* Renders documentation from asciidoc to html and automatically publishes them using GitHub Pages."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* Runs additional link:#repository-wide-checks[repository-wide checks]."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "If you would like to customise your travis build further, you can learn more about Travis from https://docs.travis-ci.com/[Travis CI Documentation]."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up Travis CI"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ".  Fork the repo to your own organization."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to https://travis-ci.org/ and click `Sign in with GitHub`, then enter your GitHub account details if needed."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "image:signing_in.png[Signing into Travis CI]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ".  Head to the https://travis-ci.org/profile[Accounts] page, and find the switch for the forked repository."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "* If the organization is not shown, click `Review and add` as shown below:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "image:review_and_add.png[Review and add]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "This should bring you to a GitHub page that manages the access of third-party applications. Depending on whether you are the owner of the repository, you can either grant access"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "image:grant_access.png[Grant Access]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "or request access"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "image:request_access.png[Request Access]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "to Travis CI so that it can access your commits and build your code."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* If repository cannot be found, click `Sync account`"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ".  Activate the switch."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "image:flick_repository_switch.png[Activate the switch]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ".  This repo comes with a link:../.travis.yml[`.travis.yml`] that tells Travis what to do. So there is no need for you to create one yourself."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ".  To see the CI in action, push a commit to the master branch!"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "* Go to the repository and see the pushed commit. There should be an icon which will link you to the Travis build."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "image:build_pending.png[Commit build]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "* As the build is run on a provided remote machine, we can only examine the logs it produces:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "image:travis_build.png[Travis build]"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ".  If the build is successful, you should be able to check the coverage details of the tests at http://coveralls.io/[Coveralls]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the link to the \u0027build status\u0027 badge at the top of the `README.adoc` to point to the build status of your own repo."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Enabling auto-publishing of documentation"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure that you have followed the steps above to set up Travis CI."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ".  On GitHub, create a new user account and give this account collaborator and admin access to the repo. +"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "   Using this account, generate a personal access token https://github.com/settings/tokens/new[here]."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "Personal access tokens are like passwords so make sure you keep them secret! If the personal access token is leaked, please delete it and generate a new one."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "We use a new user account to generate the token for team projects to prevent team members from gaining access to other team members\u0027 repos. +"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "If you are the only one with write access to the repo, you can use your own account to generate the token."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "--"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "* Add a description for the token. (e.g. `Travis CI - deploy docs to gh-pages`)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "* Check the `public_repo` checkbox."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "* Click `Generate Token` and copy your new personal access token."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "--"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "We will use this token to grant Travis access to the repo."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "image:generate_token.png[Generate token]"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ".  Head to the https://travis-ci.org/profile[Accounts] page, and find the switch for the forked repository."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "image:flick_repository_switch.png[Activate the switch]"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ".  Click on the settings button next to the switch. In the Environment Variables section, add a new environment variable with"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "--"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "* exerciseName: `GITHUB_TOKEN`"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "* value: personal access token copied in step 1"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "* Display value in build log: `OFF`"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "--"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "image:travis_add_token.png[Travis add token]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "*Make sure you set `Display value in build log` to `OFF`.* +"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "Otherwise, other people will be able to see the personal access token and thus have access this repo. +"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "Similarly, make sure you *do not print `$GITHUB_TOKEN` to the logs* in Travis scripts as the logs are viewable by the public."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".  Now, whenever there\u0027s a new commit to master branch, Travis will push the latest documentation to gh-pages branch."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "**To verify that it works,**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".  Trigger Travis to regenerate documentation. To do so, you need to push a new commit to the master branch of the fork. +"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "   Suggested change: Remove the codacy badge from `README`."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ".  Wait for Travis CI to finish running the build on your new commit."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ".  Go to the URL `\\https://\u003cyour-username-or-organization-exerciseName\u003e.github.io/addressbook-level3/`. You should see your `README` file displayed."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Repository-wide checks"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "In addition to running Gradle checks, we also configure Travis CI to run some repository-wide checks. Unlike the Gradle checks which only cover files used in the build process, these repository-wide checks cover _all_ files in the repository. They check for repository rules which are hard to enforce on development machines such as line ending requirements."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "These checks are implemented as POSIX shell scripts, and thus can only be run on POSIX-compliant operating systems such as macOS and Linux. To run all checks locally on these operating systems, execute the following in the repository root directory:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "[source,shell]"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "./config/travis/run-checks.sh"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "Any warnings or errors will be printed out to the console."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Implementing new checks"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "Checks are implemented as executable `check-*` scripts within the `config/travis/` directory. The `run-checks.sh` script will automatically pick up and run files named as such."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "Check scripts should print out errors in the following format:"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "...."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "SEVERITY:FILENAME:LINE: MESSAGE"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "...."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "where `SEVERITY` is either `ERROR` or `WARN`, `FILENAME` is the path to the file relative to the current directory, `LINE` is the line of the file where the error occurred and `MESSAGE` is the message explaining the error."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "Check scripts must exit with a non-zero exit code if any errors occur."
      }
    ],
    "authorContributionMap": {
      "khairulazman1997": 2,
      "-": 138
    }
  },
  {
    "path": "docs/tutorials/RemovingFields.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Tutorial - Removing a field from an entity"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images/remove"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "[quote, Antoine de Saint-Exupery]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "When working on Address Book, you will most likely find that some features and fields that are no longer necessary."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "In scenarios like this, you can consider refactoring the existing `Person` model to suit your use case."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we\u0027ll do exactly just that and remove the `address` field from `Person`."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Safely deleting `Address`"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "Fortunately, the IntelliJ IDEA provides a robust refactoring tool that can identify _most_ usages."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s try to use it as much as we can."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Assisted refactoring"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "The `address` field in `Person` is actually an instance of the `seedu.address.model.person.Address` class."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Since removing the `Address` class will break the application, we start by identifying ``Address``\u0027s usages."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "This allows us to see code that depends on `Address` to function properly and edit them on a case-by-case basis."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "Right-click the `Address` class and select `Refactor` \u003e `Safe Delete` through the menu."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".Usages detected"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "image::UnsafeDelete.png[width\u003d787px. height\u003d238px]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Choose to `View Usages` and you should be presented with a list of `Safe Delete Conflicts`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "These conflicts describe locations in which the `Address` class is used."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ".List of conflicts"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "image::SafeDeleteConflicts.png[width\u003d955, height\u003d640px]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "Remove usages of `Address` by performing ``Safe Delete``s on each entry."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "You will need to exercise discretion when removing usages of `Address`."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Functions like `ParserUtil#parseAddress()` can be safely removed but its usages must be removed as well."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "Other usages like in `EditPersonDescriptor` may require more careful inspection."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s try removing references to `Address` in `EditPersonDescriptor`."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ". Safe delete the field `address` in `EditPersonDescriptor`"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Yes` when prompted to remove getters and setters"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `View Usages` again image:UnsafeDeleteOnField.png[width\u003d1145px, height\u003d583px]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ". Remove the usages of `address` and select `Do refactor` when you are done."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "TIP: Removing usages may result in errors."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Exercise discretion and fix them."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "For example, removing the `address` field from the `Person` class will require you to modify its constructor."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ". Repeat the steps for the remaining usages of `Address`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "After you are done, verify that the application still works by compiling and running it again."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Manual refactoring"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, there are usages of `Address` that IntelliJ IDEA cannot identify."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "You can find them by searching for instances of the word `address` in your code (`Edit` \u003e `Find` \u003e `Find in path`)."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Places of interest to look out for would be resources used by the application."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "`main/resources` contains images and `fxml` files used by the application and `test/resources` contains test data."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "For example, there is a `$address` in each `PersonCard` that has not been removed nor identified."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "image::$address.png[width\u003d1090px, height\u003d890px]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the `PersonCard` class and its `fxml` file quickly reveals why it slipped past the automated refactoring."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ".PersonCard.java"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "private Label address;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ".PersonCard.fxml"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "[source, xml]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "After removing the `Label`, we can proceed to formally test our code."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "If everything went well, you should have most of your tests pass."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "Fix any remaining errors until the tests all pass."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Tidying up"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "At this point, your application is working as intended and all your tests are passing."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "What\u0027s left to do is to clean up references to `Address` in test data and documentation."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "In `src/test/data/`, data meant for testing purposes are stored."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "While keeping the `address` field in the json files does not cause the tests to fail, it is not good practice to let cruft from old features accumulate."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ".invalidPersonAddressBook.json"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "[source, json]"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "  \"userprofile\": [ {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"4th street\""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "You can go through each individual `json` file and manually remove the `address` field."
      }
    ],
    "authorContributionMap": {
      "yyuanxin": 1,
      "-": 116
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.HealthRecords;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.ReadOnlyHealthRecords;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.ReadOnlyRecipeBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.ReadOnlyUserProfile;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.ReadOnlyWorkoutPlanner;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.RecipeBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.UserProfile;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.WorkoutPlanner;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.util.SampleRecipeDataUtil;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import seedu.address.storage.HealthRecordsStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import seedu.address.storage.JsonHealthRecordsStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.storage.JsonRecipeBookStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import seedu.address.storage.JsonUserProfileStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.storage.JsonWorkoutPlannerStorage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.storage.RecipeBookStorage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import seedu.address.storage.UserProfileStorage;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.storage.WorkoutPlannerStorage;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing DukeCooks ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        RecipeBookStorage recipeBookStorage \u003d new JsonRecipeBookStorage(userPrefs.getRecipesFilePath());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        UserProfileStorage userProfileStorage \u003d new JsonUserProfileStorage(userPrefs.getUserProfileFilePath());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        HealthRecordsStorage healthRecordsStorage \u003d new JsonHealthRecordsStorage(userPrefs.getHealthRecordsFilePath());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        WorkoutPlannerStorage workoutPlannerStorage \u003d new JsonWorkoutPlannerStorage(userPrefs.getExercisesFilePath());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        storage \u003d new StorageManager(userProfileStorage, healthRecordsStorage, recipeBookStorage,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                workoutPlannerStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s duke cooks and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * The data from the sample duke cooks will be used instead if {@code storage}\u0027s Duke Cooks is not found,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * or an empty dukeCooks will be used instead if errors occur when reading {@code storage}\u0027s Duke Cooks."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        ReadOnlyUserProfile initialDukeCooks;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        initialDukeCooks \u003d initUserProfile(storage);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        ReadOnlyRecipeBook initialRecipeBook;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        initialRecipeBook \u003d initRecipeBook(storage);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        ReadOnlyHealthRecords initialHealthRecords;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        initialHealthRecords \u003d initHealthRecords(storage);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        ReadOnlyWorkoutPlanner initialWorkoutPlanner;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        initialWorkoutPlanner \u003d initWorkoutPlanner(storage);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        return new ModelManager(initialDukeCooks, initialHealthRecords, initialRecipeBook, initialWorkoutPlanner,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                userPrefs);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * Returns a {@code ReadOnlyUserProfile} with the data from {@code storage}\u0027s UserProfile. \u003cbr\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * The data from the sample UserProfile will be used instead if {@code storage}\u0027s persons is not found,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * or an empty DukeCook will be used instead if errors occur when reading {@code storage}\u0027s UserProfile."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    private ReadOnlyUserProfile initUserProfile(Storage storage) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        Optional\u003cReadOnlyUserProfile\u003e dukeCooksOptional;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        ReadOnlyUserProfile initialData;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            dukeCooksOptional \u003d storage.readUserProfile();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            if (!dukeCooksOptional.isPresent()) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with sample UserProfile\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            initialData \u003d dukeCooksOptional.orElseGet(SampleDataUtil::getSampleUserProfile);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            //initialData \u003d recipeBookOptional.orElseGet(SampleRecipeDataUtil::getSampleRecipeBook);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty DukeCooks\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            initialData \u003d new UserProfile();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty DukeCooks\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            initialData \u003d new UserProfile();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        return initialData;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s duke cooks and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * The data from the sample duke cooks will be used instead if {@code storage}\u0027s Duke Cooks is not found,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * or an empty dukeCooks will be used instead if errors occur when reading {@code storage}\u0027s Duke Cooks."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    private ReadOnlyWorkoutPlanner initWorkoutPlanner(Storage storage) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        Optional\u003cReadOnlyWorkoutPlanner\u003e workoutPlannerOptional;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        ReadOnlyWorkoutPlanner initialData;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            workoutPlannerOptional \u003d storage.readWorkoutPlanner();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            if (!workoutPlannerOptional.isPresent()) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with sample DukeCooks\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            initialData \u003d workoutPlannerOptional.orElseGet(SampleDataUtil::getSampleWorkoutPlanner);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty DukeCooks\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            initialData \u003d new WorkoutPlanner();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty DukeCooks\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            initialData \u003d new WorkoutPlanner();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        return initialData;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * Returns a {@code ReadOnlyUserProfile} with the data from {@code storage}\u0027s UserProfile. \u003cbr\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * The data from the sample UserProfile will be used instead if {@code storage}\u0027s persons is not found,"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * or an empty RecipeBook will be used instead if errors occur when reading {@code storage}\u0027s RecipeBook."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    private ReadOnlyRecipeBook initRecipeBook(Storage storage) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        Optional\u003cReadOnlyRecipeBook\u003e recipeBookOptional;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        ReadOnlyRecipeBook initialData;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            recipeBookOptional \u003d storage.readRecipeBook();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            if (!recipeBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with sample RecipeBook\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            initialData \u003d recipeBookOptional.orElseGet(SampleRecipeDataUtil::getSampleRecipeBook);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty DukeCooks\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            initialData \u003d new RecipeBook();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty DukeCooks\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            initialData \u003d new RecipeBook();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        return initialData;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * Returns a {@code ReadOnlyHealthRecords} with the data from {@code storage}\u0027s health records. \u003cbr\u003e"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * The data from the sample health records will be used instead if {@code storage}\u0027s Health records is not found,"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * or an empty healthRecords will be used instead if errors occur when reading {@code storage}\u0027s Health Records."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    private ReadOnlyHealthRecords initHealthRecords(Storage storage) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        Optional\u003cReadOnlyHealthRecords\u003e healthRecordsOptional;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        ReadOnlyHealthRecords initialData;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            healthRecordsOptional \u003d storage.readHealthRecords();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            if (!healthRecordsOptional.isPresent()) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with sample Health Records\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            initialData \u003d healthRecordsOptional.orElseGet(SampleDataUtil::getSampleHealthRecords);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty Health Records\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            initialData \u003d new HealthRecords();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty Health Records\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            initialData \u003d new HealthRecords();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        return initialData;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty DukeCooks\");"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        logger.info(\"Starting DukeCooks \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Duke Cooks ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yyuanxin": 46,
      "khairulazman1997": 44,
      "-": 176,
      "bakwxh": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/LogsCenter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    private static final String LOG_FILE \u003d \"recipebook.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 111,
      "bakwxh": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public static final String MESSAGE_INVALID_EXERCISE_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public static final String MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX \u003d \"The recipe index provided is invalid\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public static final String MESSAGE_RECIPE_LISTED_OVERVIEW \u003d \"%1$d recipes listed!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulazman1997": 1,
      "-": 12,
      "bakwxh": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.ReadOnlyRecipeBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.ReadOnlyUserProfile;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.ReadOnlyWorkoutPlanner;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.records.Record;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * Returns RecipeBook."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * @see RecipeModel#getRecipeBook()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    ReadOnlyRecipeBook getRecipeBook();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * Returns UserProfile."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * @see Model#getUserProfile()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    ReadOnlyUserProfile getUserProfile();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of recipes */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    ObservableList\u003cRecipe\u003e getFilteredRecipeList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * Returns DukeCooks."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * @see seedu.address.model.Model#getWorkoutPlanner()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    ReadOnlyWorkoutPlanner getDukeCooks();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    ObservableList\u003cExercise\u003e getFilteredExerciseList();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of records */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    ObservableList\u003cRecord\u003e getFilteredRecordList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * Returns the user prefs\u0027 Recipe Book file path."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    Path getRecipesFilePath();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * Returns the user prefs\u0027 User Profile file path."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    Path getUserProfileFilePath();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * Returns the user prefs\u0027 Duke Cooks file path."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    Path getDukeCooksFilePath();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * Returns the user prefs\u0027 Health Records file path."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    Path getHealthRecordsFilePath();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yyuanxin": 9,
      "khairulazman1997": 10,
      "-": 61,
      "bakwxh": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.logic.parser.DukeCooksParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.ReadOnlyRecipeBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.ReadOnlyUserProfile;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.ReadOnlyWorkoutPlanner;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.records.Record;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    private final DukeCooksParser dukeCooksParser;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        dukeCooksParser \u003d new DukeCooksParser();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        Command command \u003d dukeCooksParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            storage.saveWorkoutPlanner(model.getWorkoutPlanner());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            storage.saveUserProfile(model.getUserProfile());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            storage.saveRecipeBook(model.getRecipeBook());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            storage.saveHealthRecords(model.getHealthRecords());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public ReadOnlyWorkoutPlanner getDukeCooks() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        return model.getWorkoutPlanner();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public ReadOnlyRecipeBook getRecipeBook() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        return model.getRecipeBook();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public ReadOnlyUserProfile getUserProfile() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        return model.getUserProfile();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public ObservableList\u003cExercise\u003e getFilteredExerciseList() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        return model.getFilteredExerciseList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public ObservableList\u003cRecipe\u003e getFilteredRecipeList() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        return model.getFilteredRecipeList();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public ObservableList\u003cRecord\u003e getFilteredRecordList() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        return model.getFilteredRecordList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public Path getUserProfileFilePath() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        return model.getUserProfileFilePath();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public Path getHealthRecordsFilePath() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        return model.getHealthRecordsFilePath();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public Path getRecipesFilePath() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        return model.getRecipesFilePath();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public Path getDukeCooksFilePath() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        return model.getUserProfileFilePath();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yyuanxin": 14,
      "khairulazman1997": 17,
      "-": 84,
      "bakwxh": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bakwxh"
        },
        "content": " * Adds a recipe to Duke Cooks."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "public abstract class AddCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds to a component of Duke Cooks. \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            + COMMAND_WORD"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            + \" \u003cvariant\u003e \u003carguments\u003e\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" recipe \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            + PREFIX_NAME + \"Cheese Omelette \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            + PREFIX_INGREDIENT + \"eggs \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            + PREFIX_INGREDIENT + \"cheese\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 11,
      "bakwxh": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddExerciseCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DISTANCE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INTENSITY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIMARY_MUSCLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REPETITIONS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SETS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_WEIGHT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": " * Adds an exercise to Duke Cooks."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "public class AddExerciseCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addExercise\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an exercise to Duke Cooks. \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            + PREFIX_PRIMARY_MUSCLE + \"MUSCLE TYPE \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            + PREFIX_INTENSITY + \"INTENSITY \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            + \"[\" + PREFIX_DISTANCE + \"DISTANCE]...\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            + \"[\" + PREFIX_REPETITIONS + \"REPS]...\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            + \"[\" + PREFIX_SETS + \"SET]...\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            + \"[\" + PREFIX_WEIGHT + \"WEIGHT]...\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            + PREFIX_NAME + \"Bench Press \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            + PREFIX_PRIMARY_MUSCLE + \"Chest \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            + PREFIX_INTENSITY + \"3 \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            + PREFIX_REPETITIONS + \"5 \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            + PREFIX_SETS + \"5 \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            + PREFIX_WEIGHT + \"30 kg \";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New exercise added: %1$s\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This exercise already exists in Duke Cooks\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    private final Exercise toAdd;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public AddExerciseCommand(Exercise exercise) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        requireNonNull(exercise);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        toAdd \u003d exercise;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        if (model.hasExercise(toAdd)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        model.addExercise(toAdd);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                || (other instanceof AddExerciseCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddExerciseCommand) other).toAdd));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulazman1997": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddHealthCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.records.Record;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": " * Adds a record to Duke Cooks."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "public class AddHealthCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addHealth\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a health record\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New record added: %1$s\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    private final Record toAdd;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * Creates an AddProfileCommand to add the specified {@code Record}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public AddHealthCommand(Record record) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        requireNonNull(record);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        toAdd \u003d record;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        model.addRecord(toAdd);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                || (other instanceof AddHealthCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddHealthCommand) other).toAdd));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yyuanxin": 42,
      "bakwxh": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddProfileCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": " * Adds a person to Duke Cooks."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "public class AddProfileCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addProfile\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to Duke Cooks. \";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    private final Person toAdd;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * Creates an AddProfileCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public AddProfileCommand(Person person) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        toAdd \u003d person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                || (other instanceof AddProfileCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddProfileCommand) other).toAdd));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yyuanxin": 42,
      "bakwxh": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddRecipeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CALORIES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CARBS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FATS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PROTEIN;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bakwxh"
        },
        "content": " * Adds a recipe to Duke Cooks."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bakwxh"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "public class AddRecipeCommand extends AddCommand {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public static final String VARIANT_WORD \u003d \"recipe\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a recipe to Duke Cooks. \\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            + PREFIX_INGREDIENT + \"INGREDIENTS... \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            + PREFIX_CALORIES + \"CALORIES \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            + PREFIX_CARBS + \"CARBS \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            + PREFIX_FATS + \"FATS \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            + PREFIX_PROTEIN + \"PROTEIN\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            + PREFIX_NAME + \"Cheese Omelette \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            + PREFIX_INGREDIENT + \"eggs \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            + PREFIX_INGREDIENT + \"cheese \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            + PREFIX_CALORIES + \"358 \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            + PREFIX_CARBS + \"1 \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            + PREFIX_FATS + \"28 \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            + PREFIX_PROTEIN + \"21 \";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New recipe added: %1$s\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_RECIPE \u003d \"This recipe already exists in Duke Cooks\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    private final Recipe toAdd;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * Creates an AddRecipeCommand to add the specified {@code Recipe}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public AddRecipeCommand(Recipe recipe) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        requireNonNull(recipe);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        toAdd \u003d recipe;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        if (model.hasRecipe(toAdd)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_RECIPE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        model.addRecipe(toAdd);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                || (other instanceof AddRecipeCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddRecipeCommand) other).toAdd));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bakwxh": 70
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.RecipeBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": " * Clears Duke Cooks."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Duke Cooks has been cleared!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        model.setRecipeBook(new RecipeBook());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulazman1997": 2,
      "-": 19,
      "bakwxh": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearExerciseCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.WorkoutPlanner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": " * Clears Duke Cooks."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "public class ClearExerciseCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Planner has been cleared!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        model.setWorkoutPlanner(new WorkoutPlanner());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulazman1997": 5,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * @param model {@code RecipeModel} which the command should operate on."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 19,
      "bakwxh": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteExerciseCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": " * Deletes a person identified using it\u0027s displayed index from Duke Cooks."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "public class DeleteExerciseCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            + \": Deletes the exercise identified by the index number used in the displayed person list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public static final String MESSAGE_DELETE_EXERCISE_SUCCESS \u003d \"Deleted Exercise: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public DeleteExerciseCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        List\u003cExercise\u003e lastShownList \u003d model.getFilteredExerciseList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_EXERCISE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        Exercise exerciseToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        model.deleteExercise(exerciseToDelete);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_EXERCISE_SUCCESS, exerciseToDelete));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                || (other instanceof DeleteExerciseCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteExerciseCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulazman1997": 13,
      "-": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteRecipeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bakwxh"
        },
        "content": " * Deletes a recipe identified using it\u0027s displayed index from Duke Cooks."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bakwxh"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "public class DeleteRecipeCommand extends seedu.address.logic.commands.DeleteCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public static final String VARIANT_WORD \u003d \"recipe\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            + \": Deletes the recipe identified by the index number used in the displayed recipe list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public static final String MESSAGE_DELETE_RECIPE_SUCCESS \u003d \"Deleted Recipe: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public DeleteRecipeCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        List\u003cRecipe\u003e lastShownList \u003d model.getFilteredRecipeList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        Recipe recipeToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        model.deleteRecipe(recipeToDelete);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_RECIPE_SUCCESS, recipeToDelete));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                || (other instanceof DeleteRecipeCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteRecipeCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulazman1997": 1,
      "bakwxh": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bakwxh"
        },
        "content": " * Edits the details of an existing recipe in Duke Cooks."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "public abstract class EditCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the component identified \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            + \"by the index number used in the displayed list. \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            + \"Parameters: VARIANT INDEX (must be a positive integer) \\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            + \"[\" + PREFIX_INGREDIENT + \"INGREDIENT]...\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \"\u003cvariant\u003e 1 \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 12,
      "bakwxh": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditExerciseCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DISTANCE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INTENSITY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIMARY_MUSCLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REPETITIONS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SETS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_WEIGHT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_EXERCISE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.details.ExerciseDetail;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.exercise.ExerciseName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.exercise.Intensity;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.exercise.MuscleType;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.exercise.MusclesTrained;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": " * Edits the details of an existing exercise in Duke Cooks."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "public class EditExerciseCommand extends Command {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the exercise identified \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            + \"by the index number used in the displayed exercise list. \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            + \"[\" + PREFIX_PRIMARY_MUSCLE + \"MUSCLE TYPE] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            + \"[\" + PREFIX_INTENSITY + \"INTENSITY] \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            + \"[\" + PREFIX_DISTANCE + \"DISTANCE]...\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            + \"[\" + PREFIX_REPETITIONS + \"REPS]...\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            + \"[\" + PREFIX_SETS + \"SET]...\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            + \"[\" + PREFIX_WEIGHT + \"WEIGHT]...\\n\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            + PREFIX_NAME + \"Deadlifts\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public static final String MESSAGE_EDIT_EXERCISE_SUCCESS \u003d \"Edited Exercise: %1$s\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_EXERCISE \u003d \"This exercise already exists in Duke Cooks.\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    private final EditExerciseDescriptor editExerciseDescriptor;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * @param index of the exercise in the filtered exercise list to edit"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * @param editExerciseDescriptor details to edit the exercise with"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public EditExerciseCommand(Index index, EditExerciseDescriptor editExerciseDescriptor) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        requireNonNull(editExerciseDescriptor);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        this.editExerciseDescriptor \u003d new EditExerciseDescriptor(editExerciseDescriptor);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        List\u003cExercise\u003e lastShownList \u003d model.getFilteredExerciseList();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_EXERCISE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        Exercise exerciseToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        Exercise editedExercise \u003d createEditedExercise(exerciseToEdit, editExerciseDescriptor);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        if (!exerciseToEdit.isSameExercise(editedExercise) \u0026\u0026 model.hasExercise(editedExercise)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_EXERCISE);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        model.setExercise(exerciseToEdit, editedExercise);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        model.updateFilteredExerciseList(PREDICATE_SHOW_ALL_EXERCISE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_EXERCISE_SUCCESS, editedExercise));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * Creates and returns a {@code Exercise} with the details of {@code exerciseToEdit}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * edited with {@code editExerciseDescriptor}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    private static Exercise createEditedExercise(Exercise exerciseToEdit,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                                                 EditExerciseDescriptor editExerciseDescriptor) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assert exerciseToEdit !\u003d null;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        ExerciseName updatedExerciseName \u003d editExerciseDescriptor"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                .getExerciseName().orElse(exerciseToEdit.getExerciseName());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        MuscleType updatedPrimaryMuscle \u003d editExerciseDescriptor.getPrimaryMuscle()"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                .orElse(exerciseToEdit.getMusclesTrained().getPrimaryMuscle());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        MusclesTrained updatedMusclesTrained \u003d new MusclesTrained(updatedPrimaryMuscle,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                exerciseToEdit.getMusclesTrained().getSecondaryMuscles());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        Intensity updatedIntensity \u003d editExerciseDescriptor.getIntensity().orElse(exerciseToEdit.getIntensity());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        Set\u003cExerciseDetail\u003e updatedExerciseDetails \u003d editExerciseDescriptor"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                .getExerciseDetails().orElse(exerciseToEdit.getExerciseDetails());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        return new Exercise(updatedExerciseName, updatedMusclesTrained, updatedIntensity, updatedExerciseDetails);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        if (!(other instanceof EditExerciseCommand)) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        EditExerciseCommand e \u003d (EditExerciseCommand) other;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                \u0026\u0026 editExerciseDescriptor.equals(e.editExerciseDescriptor);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * Stores the details to edit the exercise with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * corresponding field value of the exercise."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public static class EditExerciseDescriptor {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        private ExerciseName exerciseName;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        private MuscleType primaryMuscle;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        private Intensity intensity;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        private Set\u003cExerciseDetail\u003e exerciseDetails;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        public EditExerciseDescriptor() {}"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "         */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        public EditExerciseDescriptor(EditExerciseDescriptor toCopy) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            setExerciseName(toCopy.exerciseName);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            setPrimaryMuscle(toCopy.primaryMuscle);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            setIntensity(toCopy.intensity);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            setExerciseDetails(toCopy.exerciseDetails);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "         */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            return CollectionUtil.isAnyNonNull(exerciseName, exerciseDetails);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        public void setExerciseName(ExerciseName exerciseName) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            this.exerciseName \u003d exerciseName;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        public void setIntensity(Intensity intensity) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            this.intensity \u003d intensity;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        public void setPrimaryMuscle(MuscleType primaryMuscle) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            this.primaryMuscle \u003d primaryMuscle;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        public Optional\u003cExerciseName\u003e getExerciseName() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            return Optional.ofNullable(exerciseName);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        public Optional\u003cMuscleType\u003e getPrimaryMuscle() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            return Optional.ofNullable(primaryMuscle);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        public Optional\u003cIntensity\u003e getIntensity() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            return Optional.ofNullable(intensity);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "         */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        public void setExerciseDetails(Set\u003cExerciseDetail\u003e exerciseDetails) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            this.exerciseDetails \u003d (exerciseDetails !\u003d null) ? new HashSet\u003c\u003e(exerciseDetails) : null;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "         */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        public Optional\u003cSet\u003cExerciseDetail\u003e\u003e getExerciseDetails() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            return (exerciseDetails !\u003d null)"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                    ? Optional.of(Collections.unmodifiableSet(exerciseDetails)) : Optional.empty();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            if (!(other instanceof EditExerciseDescriptor)) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            EditExerciseDescriptor e \u003d (EditExerciseDescriptor) other;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            return getExerciseName().equals(e.getExerciseName())"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                    \u0026\u0026 getExerciseDetails().equals(e.getExerciseDetails());"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulazman1997": 222
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditProfileCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BLOODTYPE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_HEIGHT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MEDICALHISTORY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_WEIGHT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.common.Name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.medical.MedicalHistory;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.person.BloodType;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.person.DoB;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.person.Gender;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.person.Height;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.person.Weight;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": " * Edits the details of an existing person in Duke Cooks."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "public class EditProfileCommand extends Command {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"editProfile\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the user profile \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            + \"[\" + PREFIX_DOB + \"DOB] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            + \"[\" + PREFIX_GENDER + \"GENDER] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            + \"[\" + PREFIX_BLOODTYPE + \"BLOODTYPE] \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            + \"[\" + PREFIX_WEIGHT + \"WEIGHT] \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            + \"[\" + PREFIX_HEIGHT + \"HEIGHT] \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            + \"[\" + PREFIX_MEDICALHISTORY + \"TAG]...\\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Profile: %1$s\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the Duke Cooks.\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param editPersonDescriptor details to edit the person with"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public EditProfileCommand(EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        DoB updatedDateOfBirth \u003d editPersonDescriptor.getDateOfBirth().orElse(personToEdit.getDateOfBirth());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        Gender updatedGender \u003d editPersonDescriptor.getGender().orElse(personToEdit.getGender());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        BloodType updatedBloodType \u003d editPersonDescriptor.getBloodType().orElse(personToEdit.getBloodType());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        Weight updatedWeight \u003d editPersonDescriptor.getWeight().orElse(personToEdit.getWeight());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        Height updatedHeight \u003d editPersonDescriptor.getHeight().orElse(personToEdit.getHeight());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        Set\u003cMedicalHistory\u003e updatedMedicalHistories \u003d editPersonDescriptor.getMedicalHistories()"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                .orElse(personToEdit.getMedicalHistories());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        return new Person(updatedName, updatedDateOfBirth, updatedGender, updatedBloodType,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                updatedWeight, updatedHeight, updatedMedicalHistories);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        if (!(other instanceof EditProfileCommand)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        EditProfileCommand e \u003d (EditProfileCommand) other;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        return editPersonDescriptor.equals(e.editPersonDescriptor);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class EditPersonDescriptor {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        private DoB dateOfBirth;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        private Gender gender;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        private BloodType bloodGroup;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        private Weight weight;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        private Height height;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        private Set\u003cMedicalHistory\u003e medicalHistories;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor() {}"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "         * A defensive copy of {@code medicalHistories} is used internally."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            setDateOfBirth(toCopy.dateOfBirth);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            setGender(toCopy.gender);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            setBloodType(toCopy.bloodGroup);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            setWeight(toCopy.weight);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            setHeight(toCopy.height);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            setMedicalHistories(toCopy.medicalHistories);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, gender, dateOfBirth, bloodGroup, weight, height, medicalHistories);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        public void setDateOfBirth(DoB dateOfBirth) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            this.dateOfBirth \u003d dateOfBirth;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        public Optional\u003cDoB\u003e getDateOfBirth() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            return Optional.ofNullable(dateOfBirth);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        public void setGender(Gender gender) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            this.gender \u003d gender;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        public Optional\u003cGender\u003e getGender() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            return Optional.ofNullable(gender);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        public void setBloodType(BloodType bloodGroup) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            this.bloodGroup \u003d bloodGroup;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        public Optional\u003cBloodType\u003e getBloodType() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            return Optional.ofNullable(bloodGroup);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        public void setWeight(Weight weight) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            this.weight \u003d weight;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        public Optional\u003cWeight\u003e getWeight() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            return Optional.ofNullable(weight);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        public void setHeight(Height height) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            this.height \u003d height;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        public Optional\u003cHeight\u003e getHeight() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            return Optional.ofNullable(height);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "         * Sets {@code medicalHistories} to this object\u0027s {@code medicalHistories}."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "         * A defensive copy of {@code medicalHistories} is used internally."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        public void setMedicalHistories(Set\u003cMedicalHistory\u003e medicalHistories) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            this.medicalHistories \u003d (medicalHistories !\u003d null) ? new HashSet\u003c\u003e(medicalHistories) : null;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code medicalHistories} is null."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        public Optional\u003cSet\u003cMedicalHistory\u003e\u003e getMedicalHistories() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            return (medicalHistories !\u003d null) ? Optional.of(Collections.unmodifiableSet(medicalHistories))"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                    : Optional.empty();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                    \u0026\u0026 getDateOfBirth().equals(e.getDateOfBirth())"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                    \u0026\u0026 getGender().equals(e.getGender())"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                    \u0026\u0026 getBloodType().equals(e.getBloodType())"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                    \u0026\u0026 getWeight().equals(e.getWeight())"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                    \u0026\u0026 getHeight().equals(e.getHeight())"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                    \u0026\u0026 getMedicalHistories().equals(e.getMedicalHistories());"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yyuanxin": 100,
      "khairulazman1997": 3,
      "-": 128,
      "bakwxh": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditRecipeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CALORIES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CARBS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FATS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PROTEIN;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_RECIPES;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.common.Name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.recipe.Calories;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.recipe.Carbs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.recipe.Fats;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.recipe.Ingredient;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.recipe.Protein;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bakwxh"
        },
        "content": " * Edits the details of an existing recipe in Duke Cooks."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bakwxh"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "public class EditRecipeCommand extends EditCommand {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public static final String VARIANT_WORD \u003d \"recipe\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the recipe identified \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            + \"by the index number used in the displayed recipe list. \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            + \"[\" + PREFIX_INGREDIENT + \"INGREDIENT]... \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            + \"[\" + PREFIX_CALORIES + \"CALORIES] \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            + \"[\" + PREFIX_CARBS + \"CARBS] \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            + \"[\" + PREFIX_FATS + \"FATS] \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            + \"[\" + PREFIX_PROTEIN + \"PROTEIN] \\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            + PREFIX_PROTEIN + \"123\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public static final String MESSAGE_EDIT_RECIPE_SUCCESS \u003d \"Edited Recipe: %1$s\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_RECIPE \u003d \"This recipe already exists in the Duke Cooks.\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    private final EditRecipeDescriptor editRecipeDescriptor;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * @param index of the recipe in the filtered recipe list to edit"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * @param editRecipeDescriptor details to edit the recipe with"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public EditRecipeCommand(Index index, EditRecipeDescriptor editRecipeDescriptor) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        requireNonNull(editRecipeDescriptor);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        this.editRecipeDescriptor \u003d new EditRecipeDescriptor(editRecipeDescriptor);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        List\u003cRecipe\u003e lastShownList \u003d model.getFilteredRecipeList();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        Recipe recipeToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        Recipe editedRecipe \u003d createEditedRecipe(recipeToEdit, editRecipeDescriptor);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        if (!recipeToEdit.isSameRecipe(editedRecipe) \u0026\u0026 model.hasRecipe(editedRecipe)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_RECIPE);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        model.setRecipe(recipeToEdit, editedRecipe);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        model.updateFilteredRecipeList(PREDICATE_SHOW_ALL_RECIPES);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_RECIPE_SUCCESS, editedRecipe));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * Creates and returns a {@code Recipe} with the details of {@code recipeToEdit}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * edited with {@code editRecipeDescriptor}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    private static Recipe createEditedRecipe(Recipe recipeToEdit, EditRecipeDescriptor editRecipeDescriptor) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assert recipeToEdit !\u003d null;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        Name updatedName \u003d editRecipeDescriptor.getName().orElse(recipeToEdit.getName());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        Calories updatedCalories \u003d editRecipeDescriptor.getCalories().orElse(recipeToEdit.getCalories());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        Carbs updatedCarbs \u003d editRecipeDescriptor.getCarbs().orElse(recipeToEdit.getCarbs());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        Fats updatedFats \u003d editRecipeDescriptor.getFats().orElse(recipeToEdit.getFats());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        Protein updatedProtein \u003d editRecipeDescriptor.getProtein().orElse(recipeToEdit.getProtein());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        Set\u003cIngredient\u003e updatedIngredients \u003d editRecipeDescriptor.getIngredients()"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                .orElse(recipeToEdit.getIngredients());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        return new Recipe(updatedName, updatedIngredients, updatedCalories, updatedCarbs, updatedFats, updatedProtein);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        if (!(other instanceof EditRecipeCommand)) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        EditRecipeCommand e \u003d (EditRecipeCommand) other;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                \u0026\u0026 editRecipeDescriptor.equals(e.editRecipeDescriptor);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * Stores the details to edit the recipe with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * corresponding field value of the recipe."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public static class EditRecipeDescriptor {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        private Calories calories;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        private Carbs carbs;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        private Fats fats;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        private Protein protein;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        private Set\u003cIngredient\u003e ingredients;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        public EditRecipeDescriptor() {}"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "         * A defensive copy of {@code ingredients} is used internally."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "         */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        public EditRecipeDescriptor(EditRecipeDescriptor toCopy) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            setCalories(toCopy.calories);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            setCarbs(toCopy.carbs);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            setFats(toCopy.fats);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            setProtein(toCopy.protein);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            setIngredients(toCopy.ingredients);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "         */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, ingredients, calories, carbs, fats, protein);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        public void setCalories(Calories calories) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            this.calories \u003d calories;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        public void setCarbs(Carbs carbs) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            this.carbs \u003d carbs;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        public void setFats(Fats fats) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            this.fats \u003d fats;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        public void setProtein(Protein protein) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            this.protein \u003d protein;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        public Optional\u003cCalories\u003e getCalories() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            return Optional.ofNullable(calories);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        public Optional\u003cCarbs\u003e getCarbs() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            return Optional.ofNullable(carbs);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        public Optional\u003cFats\u003e getFats() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            return Optional.ofNullable(fats);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        public Optional\u003cProtein\u003e getProtein() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            return Optional.ofNullable(protein);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "         * Sets {@code ingredients} to this object\u0027s {@code ingredients}."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "         * A defensive copy of {@code ingredients} is used internally."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "         */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        public void setIngredients(Set\u003cIngredient\u003e ingredients) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            this.ingredients \u003d (ingredients !\u003d null) ? new HashSet\u003c\u003e(ingredients) : null;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "         * Returns an unmodifiable ingredient set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code ingredients} is null."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "         */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        public Optional\u003cSet\u003cIngredient\u003e\u003e getIngredients() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            return (ingredients !\u003d null) ? Optional.of(Collections.unmodifiableSet(ingredients)) : Optional.empty();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            if (!(other instanceof EditRecipeDescriptor)) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            EditRecipeDescriptor e \u003d (EditRecipeDescriptor) other;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                    \u0026\u0026 getIngredients().equals(e.getIngredients());"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bakwxh": 238
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Duke Cooks as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulazman1997": 1,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bakwxh"
        },
        "content": " * Finds and lists all recipes in Duke Cooks whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "public abstract class FindCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all components whose names contain any of \""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            + \"Parameters: VARIANT KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \u003cvariant\u003e \u003ckeywords\u003e\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 10,
      "bakwxh": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindExerciseCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.exercise.ExerciseNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": " * Finds and lists all persons in Duke Cooks whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "public class FindExerciseCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all exercises with names containing any of \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" bench crunches run\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    private final ExerciseNameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public FindExerciseCommand(ExerciseNameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        model.updateFilteredExerciseList(predicate);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredExerciseList().size()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                || (other instanceof FindExerciseCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindExerciseCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulazman1997": 11,
      "-": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindRecipeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.recipe.RecipeNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bakwxh"
        },
        "content": " * Finds and lists all recipes in Duke Cooks whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bakwxh"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bakwxh"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "public class FindRecipeCommand extends FindCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public static final String VARIANT_WORD \u003d \"recipe\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all recipes whose names contain any of \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" chicken noodle\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    private final RecipeNameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public FindRecipeCommand(RecipeNameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        model.updateFilteredRecipeList(predicate);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                String.format(Messages.MESSAGE_RECIPE_LISTED_OVERVIEW, model.getFilteredRecipeList().size()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                || (other instanceof FindRecipeCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindRecipeCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bakwxh": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_RECIPES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bakwxh"
        },
        "content": " * Lists all recipes in the Duke Cooks to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all recipes\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        model.updateFilteredRecipeList(PREDICATE_SHOW_ALL_RECIPES);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 20,
      "bakwxh": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListExerciseCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_EXERCISE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": " * Lists all persons in the Duke Cooks to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "public class ListExerciseCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listExercise\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all exercises\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        model.updateFilteredExerciseList(PREDICATE_SHOW_ALL_EXERCISE);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulazman1997": 6,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.logic.commands.AddRecipeCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bakwxh"
        },
        "content": " * Parses input arguments and creates a new AddRecipeCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * Used for initial separation of variant and args."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    private static final Pattern BASIC_VARIANT_FORMAT \u003d Pattern.compile(\"(?\u003cvariant\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * and returns the appropriate AddCommand-variant object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        final Matcher matcher \u003d BASIC_VARIANT_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        final String variant \u003d matcher.group(\"variant\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        switch (variant) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        case AddRecipeCommand.VARIANT_WORD:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            return new AddRecipeCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 24,
      "bakwxh": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddExerciseCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DISTANCE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INTENSITY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIMARY_MUSCLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REPETITIONS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SETS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_WEIGHT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.logic.commands.AddExerciseCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.details.Distance;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.details.ExerciseDetail;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.details.ExerciseWeight;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.details.Repetitions;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.details.Sets;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.exercise.ExerciseName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.exercise.Intensity;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.exercise.MuscleType;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.exercise.MusclesTrained;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "public class AddExerciseCommandParser implements Parser\u003cAddExerciseCommand\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public AddExerciseCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PRIMARY_MUSCLE,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                        PREFIX_INTENSITY, PREFIX_DISTANCE, PREFIX_REPETITIONS,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                        PREFIX_SETS, PREFIX_WEIGHT);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_PRIMARY_MUSCLE, PREFIX_INTENSITY)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddExerciseCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        ExerciseName exerciseName \u003d WorkoutPlannerParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        MuscleType primaryMuscle \u003d WorkoutPlannerParserUtil"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                .parseMuscleType(argMultimap.getValue(PREFIX_PRIMARY_MUSCLE).get());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        MusclesTrained musclesTrained \u003d new MusclesTrained(primaryMuscle, new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        Intensity intensity \u003d WorkoutPlannerParserUtil.parseIntensity(argMultimap.getValue(PREFIX_INTENSITY).get());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        Set\u003cExerciseDetail\u003e exerciseDetailList \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        if (!argMultimap.getValue(PREFIX_DISTANCE).isEmpty()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            Distance distance \u003d WorkoutPlannerParserUtil.parseDistance(argMultimap.getValue(PREFIX_DISTANCE).get());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            exerciseDetailList.add(distance);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        if (!argMultimap.getValue(PREFIX_REPETITIONS).isEmpty()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            Repetitions repetitions \u003d WorkoutPlannerParserUtil"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                    .parseRepetitions(argMultimap.getValue(PREFIX_REPETITIONS).get());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            exerciseDetailList.add(repetitions);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        if (!argMultimap.getValue(PREFIX_SETS).isEmpty()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            Sets sets \u003d WorkoutPlannerParserUtil.parseSets(argMultimap.getValue(PREFIX_SETS).get());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            exerciseDetailList.add(sets);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        if (!argMultimap.getValue(PREFIX_WEIGHT).isEmpty()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            ExerciseWeight exerciseWeight \u003d WorkoutPlannerParserUtil"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                    .parseWeight(argMultimap.getValue(PREFIX_WEIGHT).get());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            exerciseDetailList.add(exerciseWeight);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        Exercise exercise \u003d new Exercise(exerciseName, musclesTrained, intensity, exerciseDetailList);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        return new AddExerciseCommand(exercise);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulazman1997": 93
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddHealthCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATETIME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TYPE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_VALUE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import seedu.address.logic.commands.AddHealthCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.records.Record;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.records.Timestamp;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.records.Type;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.records.Value;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": " * Parses input arguments and creates a new AddHealthCommand object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "public class AddHealthCommandParser implements Parser\u003cAddHealthCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddHealthCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * and returns an AddHealthCommand object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public AddHealthCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TYPE, PREFIX_VALUE, PREFIX_DATETIME);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_TYPE, PREFIX_VALUE, PREFIX_DATETIME)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddHealthCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        Type type \u003d ParserUtil.parseType(argMultimap.getValue(PREFIX_TYPE).get());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        Value value \u003d ParserUtil.parseValue(argMultimap.getValue(PREFIX_VALUE).get());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        Timestamp timestamp \u003d ParserUtil.parseTimestamp(argMultimap.getValue(PREFIX_DATETIME).get());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        Record record \u003d new Record(type, value, timestamp);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        return new AddHealthCommand(record);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yyuanxin": 49,
      "bakwxh": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddProfileCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BLOODTYPE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_HEIGHT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MEDICALHISTORY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_WEIGHT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import seedu.address.logic.commands.AddProfileCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.common.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.medical.MedicalHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.person.BloodType;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.person.DoB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.person.Gender;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.person.Height;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.person.Weight;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": " * Parses input arguments and creates a new AddProfileCommand object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "public class AddProfileCommandParser implements Parser\u003cAddProfileCommand\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddProfileCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * and returns an AddProfileCommand object for execution."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public AddProfileCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_MEDICALHISTORY, PREFIX_DOB, PREFIX_GENDER,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                        PREFIX_BLOODTYPE, PREFIX_WEIGHT, PREFIX_HEIGHT);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_DOB, PREFIX_GENDER, PREFIX_BLOODTYPE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                PREFIX_WEIGHT, PREFIX_HEIGHT)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddProfileCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        DoB dateOfBirth \u003d ParserUtil.parseDoB(argMultimap.getValue(PREFIX_DOB).get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        Gender gender \u003d ParserUtil.parseGender(argMultimap.getValue(PREFIX_GENDER).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        BloodType bloodGroup \u003d ParserUtil.parseBloodType(argMultimap.getValue(PREFIX_BLOODTYPE).get());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        Weight weight \u003d ParserUtil.parseWeight(argMultimap.getValue(PREFIX_WEIGHT).get());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        Height height \u003d ParserUtil.parseHeight(argMultimap.getValue(PREFIX_HEIGHT).get());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        Set\u003cMedicalHistory\u003e medicalHistoryList \u003d ParserUtil.parseMedicalHistories("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                argMultimap.getAllValues(PREFIX_MEDICALHISTORY));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        Person person \u003d new Person(name, dateOfBirth, gender, bloodGroup, weight, height, medicalHistoryList);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        return new AddProfileCommand(person);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yyuanxin": 27,
      "-": 35,
      "bakwxh": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddRecipeCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CALORIES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CARBS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FATS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PROTEIN;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.logic.commands.AddRecipeCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.common.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.recipe.Calories;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.recipe.Carbs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.recipe.Fats;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.recipe.Ingredient;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.recipe.Protein;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bakwxh"
        },
        "content": " * Parses input arguments and creates a new AddRecipeCommand object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bakwxh"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "public class AddRecipeCommandParser implements Parser\u003cAddRecipeCommand\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddRecipeCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * and returns an AddRecipeCommand object for execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public AddRecipeCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_INGREDIENT, PREFIX_CALORIES,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                        PREFIX_CARBS, PREFIX_FATS, PREFIX_PROTEIN);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_INGREDIENT, PREFIX_CALORIES,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                PREFIX_CARBS, PREFIX_FATS, PREFIX_PROTEIN)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddRecipeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        Set\u003cIngredient\u003e ingredientList \u003d ParserUtil.parseIngredients(argMultimap.getAllValues(PREFIX_INGREDIENT));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        Calories calories \u003d ParserUtil.parseCalories(argMultimap.getValue(PREFIX_CALORIES).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        Carbs carbs \u003d ParserUtil.parseCarbs(argMultimap.getValue(PREFIX_CARBS).get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        Fats fats \u003d ParserUtil.parseFats(argMultimap.getValue(PREFIX_FATS).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        Protein protein \u003d ParserUtil.parseProtein(argMultimap.getValue(PREFIX_PROTEIN).get());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        Recipe recipe \u003d new Recipe(name, ingredientList, calories, carbs, fats, protein);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        return new AddRecipeCommand(recipe);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bakwxh": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    /* User Profile */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public static final Prefix PREFIX_PRIMARY_MUSCLE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public static final Prefix PREFIX_INTENSITY \u003d new Prefix(\"i/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public static final Prefix PREFIX_DISTANCE \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public static final Prefix PREFIX_REPETITIONS \u003d new Prefix(\"r/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public static final Prefix PREFIX_SETS \u003d new Prefix(\"s/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public static final Prefix PREFIX_WEIGHT \u003d new Prefix(\"w/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    /* Recipe Book */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public static final Prefix PREFIX_INGREDIENT \u003d new Prefix(\"i/\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public static final Prefix PREFIX_CALORIES \u003d new Prefix(\"cal/\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public static final Prefix PREFIX_CARBS \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public static final Prefix PREFIX_FATS \u003d new Prefix(\"f/\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public static final Prefix PREFIX_PROTEIN \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public static final Prefix PREFIX_GENDER \u003d new Prefix(\"g/\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public static final Prefix PREFIX_DOB \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public static final Prefix PREFIX_BLOODTYPE \u003d new Prefix(\"bt/\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public static final Prefix PREFIX_HEIGHT \u003d new Prefix(\"h/\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public static final Prefix PREFIX_MEDICALHISTORY \u003d new Prefix(\"m/\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    /* Health Records */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public static final Prefix PREFIX_ID \u003d new Prefix(\"id/\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public static final Prefix PREFIX_TYPE \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public static final Prefix PREFIX_VALUE \u003d new Prefix(\"val/\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public static final Prefix PREFIX_DATETIME \u003d new Prefix(\"dt/\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yyuanxin": 12,
      "khairulazman1997": 7,
      "-": 13,
      "bakwxh": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DateParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": " * Parses any String object as a Date object."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": " * Capable of string conversions to date and Date validation checks."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "public class DateParser {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    private static final DateTimeFormatter dateFormat \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    private static final DateTimeFormatter datetimeFormat \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * Returns true if given string is a valid date of specified dateFormat"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public static boolean isValidDate(String date) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            dateFormat.parse(date);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * Returns true if given string is a valid datetime of specified datetimeFormat"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public static boolean isValidDateTime(String datetime) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            datetimeFormat.parse(datetime);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public static String getCurrentTimestamp() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        LocalDateTime now \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        return datetimeFormat.format(now);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yyuanxin": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bakwxh"
        },
        "content": " * Deletes a recipe identified using it\u0027s displayed index from Duke Cooks."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "public abstract class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            + \": Deletes an entry identified by the index number used in the displayed list.\\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            + \"Parameters: VARIANT, INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \"\u003cvariant\u003e 1\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 9,
      "bakwxh": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.logic.commands.DeleteRecipeCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bakwxh"
        },
        "content": " * Parses input arguments and creates a new DeleteRecipeCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * Used for initial separation of variant and args."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    private static final Pattern BASIC_VARIANT_FORMAT \u003d Pattern.compile(\"(?\u003cvariant\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteRecipeCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * and returns a DeleteRecipeCommand object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        final Matcher matcher \u003d BASIC_VARIANT_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        final String variant \u003d matcher.group(\"variant\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        switch (variant) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        case DeleteRecipeCommand.VARIANT_WORD:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            return new DeleteRecipeCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 19,
      "bakwxh": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteExerciseCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.logic.commands.DeleteExerciseCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "public class DeleteExerciseCommandParser implements Parser\u003cDeleteExerciseCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public DeleteExerciseCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            Index index \u003d WorkoutPlannerParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            return new DeleteExerciseCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteExerciseCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulazman1997": 6,
      "-": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteRecipeCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.logic.commands.DeleteRecipeCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bakwxh"
        },
        "content": " * Parses input arguments and creates a new DeleteRecipeCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bakwxh"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "public class DeleteRecipeCommandParser implements Parser\u003cDeleteRecipeCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteRecipeCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * and returns a DeleteRecipeCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public DeleteRecipeCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            return new DeleteRecipeCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteRecipeCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bakwxh": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DukeCooksParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.logic.commands.AddExerciseCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import seedu.address.logic.commands.AddHealthCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import seedu.address.logic.commands.AddProfileCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.logic.commands.ClearExerciseCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.logic.commands.DeleteExerciseCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.logic.commands.EditExerciseCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import seedu.address.logic.commands.EditProfileCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.logic.commands.FindExerciseCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.logic.commands.ListExerciseCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "public class DukeCooksParser {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        case AddExerciseCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            return new AddExerciseCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        case EditExerciseCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            return new EditExerciseCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        case AddProfileCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            return new AddProfileCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        case DeleteExerciseCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            return new DeleteExerciseCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        case EditProfileCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            return new EditProfileCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        case ClearExerciseCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            return new ClearExerciseCommand();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        case FindExerciseCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            return new FindExerciseCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        case AddHealthCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            return new AddHealthCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        case ListExerciseCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            return new ListExerciseCommand();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yyuanxin": 10,
      "khairulazman1997": 19,
      "-": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.logic.commands.EditRecipeCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bakwxh"
        },
        "content": " * Parses input arguments and creates a new EditRecipeCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * Used for initial separation of variant and args."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    private static final Pattern BASIC_VARIANT_FORMAT \u003d Pattern.compile(\"(?\u003cvariant\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditRecipeCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * and returns an EditRecipeCommand object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        final Matcher matcher \u003d BASIC_VARIANT_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        final String variant \u003d matcher.group(\"variant\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        switch (variant) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        case EditRecipeCommand.VARIANT_WORD:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            return new EditRecipeCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 22,
      "bakwxh": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditExerciseCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DISTANCE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INTENSITY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIMARY_MUSCLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REPETITIONS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SETS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_WEIGHT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.logic.commands.EditExerciseCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.logic.commands.EditExerciseCommand.EditExerciseDescriptor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.details.Distance;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.details.ExerciseDetail;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.details.ExerciseWeight;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.details.Repetitions;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.details.Sets;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "public class EditExerciseCommandParser implements Parser\u003cEditExerciseCommand\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public EditExerciseCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PRIMARY_MUSCLE,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                        PREFIX_INTENSITY, PREFIX_DISTANCE, PREFIX_REPETITIONS,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                        PREFIX_SETS, PREFIX_WEIGHT);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            index \u003d WorkoutPlannerParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                    EditExerciseCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        EditExerciseCommand.EditExerciseDescriptor editExerciseDescriptor \u003d new EditExerciseDescriptor();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            editExerciseDescriptor.setExerciseName(WorkoutPlannerParserUtil"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                    .parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bigjunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PRIMARY_MUSCLE).isPresent()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            editExerciseDescriptor.setPrimaryMuscle(WorkoutPlannerParserUtil.parseMuscleType(argMultimap"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                    .getValue(PREFIX_PRIMARY_MUSCLE).get()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        Set\u003cExerciseDetail\u003e exerciseDetails \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        argMultimap.getValue(PREFIX_DISTANCE).ifPresent(value -\u003e {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            Distance distance;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                distance \u003d WorkoutPlannerParserUtil.parseDistance(value);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                exerciseDetails.add(distance);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            } catch (ParseException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        });"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        argMultimap.getValue(PREFIX_REPETITIONS).ifPresent(value -\u003e {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            Repetitions reps;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                reps \u003d WorkoutPlannerParserUtil.parseRepetitions(value);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                exerciseDetails.add(reps);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            } catch (ParseException e) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        });"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        argMultimap.getValue(PREFIX_SETS).ifPresent(value -\u003e {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            Sets sets;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                sets \u003d WorkoutPlannerParserUtil.parseSets(value);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                exerciseDetails.add(sets);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            } catch (ParseException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        });"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        argMultimap.getValue(PREFIX_WEIGHT).ifPresent(value -\u003e {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            ExerciseWeight exerciseWeight;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                exerciseWeight \u003d WorkoutPlannerParserUtil.parseWeight(value);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                exerciseDetails.add(exerciseWeight);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            } catch (ParseException e) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        });"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        editExerciseDescriptor.setExerciseDetails(exerciseDetails);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        if (!editExerciseDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            throw new ParseException(EditExerciseCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        return new EditExerciseCommand(index, editExerciseDescriptor);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bigjunnn": 1,
      "khairulazman1997": 73,
      "-": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditProfileCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BLOODTYPE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_HEIGHT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MEDICALHISTORY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_WEIGHT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import seedu.address.logic.commands.EditProfileCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import seedu.address.logic.commands.EditProfileCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.medical.MedicalHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": " * Parses input arguments and creates a new EditProfileCommand object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "public class EditProfileCommandParser implements Parser\u003cEditProfileCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditProfileCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * and returns an EditProfileCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public EditProfileCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_DOB, PREFIX_GENDER, PREFIX_BLOODTYPE,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                        PREFIX_HEIGHT, PREFIX_WEIGHT, PREFIX_MEDICALHISTORY);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bigjunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DOB).isPresent()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            editPersonDescriptor.setDateOfBirth(ParserUtil.parseDoB(argMultimap.getValue(PREFIX_DOB).get()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        if (argMultimap.getValue(PREFIX_GENDER).isPresent()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            editPersonDescriptor.setGender(ParserUtil.parseGender(argMultimap.getValue(PREFIX_GENDER).get()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        if (argMultimap.getValue(PREFIX_BLOODTYPE).isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            editPersonDescriptor.setBloodType(ParserUtil.parseBloodType(argMultimap.getValue(PREFIX_BLOODTYPE).get()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        if (argMultimap.getValue(PREFIX_WEIGHT).isPresent()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            editPersonDescriptor.setWeight(ParserUtil.parseWeight(argMultimap.getValue(PREFIX_WEIGHT).get()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        if (argMultimap.getValue(PREFIX_HEIGHT).isPresent()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            editPersonDescriptor.setHeight(ParserUtil.parseHeight(argMultimap.getValue(PREFIX_HEIGHT).get()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        parseMedicalHistoriesForEdit(argMultimap.getAllValues(PREFIX_MEDICALHISTORY))"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                .ifPresent(editPersonDescriptor::setMedicalHistories);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        if (!editPersonDescriptor.isAnyFieldEdited() || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            throw new ParseException(EditProfileCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        return new EditProfileCommand(editPersonDescriptor);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e medicalHistories} into a {@code Set\u003cMedicalHistory\u003e} if"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * {@code medicalHistories} is non-empty."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * If {@code medicalHistories} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * {@code Set\u003cMedicalHistory\u003e} containing zero medicalHistories."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    private Optional\u003cSet\u003cMedicalHistory\u003e\u003e parseMedicalHistoriesForEdit(Collection\u003cString\u003e medicalHistories)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            throws ParseException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        assert medicalHistories !\u003d null;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        if (medicalHistories.isEmpty()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d medicalHistories.size() \u003d\u003d 1 \u0026\u0026 medicalHistories.contains(\"\")"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                ? Collections.emptySet() : medicalHistories;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        return Optional.of(ParserUtil.parseMedicalHistories(tagSet));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bigjunnn": 1,
      "yyuanxin": 52,
      "-": 38,
      "bakwxh": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditRecipeCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CALORIES;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CARBS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FATS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PROTEIN;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.logic.commands.EditRecipeCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.logic.commands.EditRecipeCommand.EditRecipeDescriptor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.recipe.Ingredient;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bakwxh"
        },
        "content": " * Parses input arguments and creates a new EditRecipeCommand object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bakwxh"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "public class EditRecipeCommandParser implements Parser\u003cEditRecipeCommand\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditRecipeCommand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * and returns an EditRecipeCommand object for execution."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public EditRecipeCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_INGREDIENT, PREFIX_CALORIES,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                        PREFIX_CARBS, PREFIX_FATS, PREFIX_PROTEIN);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                    EditRecipeCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        EditRecipeDescriptor editRecipeDescriptor \u003d new EditRecipeDescriptor();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            editRecipeDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        if (argMultimap.getValue(PREFIX_CALORIES).isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            editRecipeDescriptor.setCalories(ParserUtil.parseCalories(argMultimap.getValue(PREFIX_CALORIES).get()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        if (argMultimap.getValue(PREFIX_CARBS).isPresent()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            editRecipeDescriptor.setCarbs(ParserUtil.parseCarbs(argMultimap.getValue(PREFIX_CARBS).get()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        if (argMultimap.getValue(PREFIX_FATS).isPresent()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            editRecipeDescriptor.setFats(ParserUtil.parseFats(argMultimap.getValue(PREFIX_FATS).get()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PROTEIN).isPresent()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            editRecipeDescriptor.setProtein(ParserUtil.parseProtein(argMultimap.getValue(PREFIX_PROTEIN).get()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        parseIngredientsForEdit(argMultimap.getAllValues(PREFIX_INGREDIENT))"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                .ifPresent(editRecipeDescriptor::setIngredients);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        if (!editRecipeDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            throw new ParseException(EditRecipeCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        return new EditRecipeCommand(index, editRecipeDescriptor);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e ingredients} into a {@code Set\u003cIngredient\u003e} if {@code ingredients}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * is non-empty."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * If {@code ingredients} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * {@code Set\u003cIngredient\u003e} containing zero ingredients."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    private Optional\u003cSet\u003cIngredient\u003e\u003e parseIngredientsForEdit(Collection\u003cString\u003e ingredients) throws ParseException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assert ingredients !\u003d null;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        if (ingredients.isEmpty()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        Collection\u003cString\u003e ingredientSet \u003d ingredients.size() \u003d\u003d 1 \u0026\u0026 ingredients.contains(\"\")"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                ? Collections.emptySet() : ingredients;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        return Optional.of(ParserUtil.parseIngredients(ingredientSet));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bakwxh": 94
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.logic.commands.FindRecipeCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bakwxh"
        },
        "content": " * Parses input arguments and creates a new FindRecipeCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * Used for initial separation of variant and args."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    private static final Pattern BASIC_VARIANT_FORMAT \u003d Pattern.compile(\"(?\u003cvariant\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindRecipeCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * and returns a FindRecipeCommand object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public FindRecipeCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        final Matcher matcher \u003d BASIC_VARIANT_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        final String variant \u003d matcher.group(\"variant\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        switch (variant) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        case FindRecipeCommand.VARIANT_WORD:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            return new FindRecipeCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 21,
      "bakwxh": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindExerciseCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.logic.commands.FindExerciseCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.exercise.ExerciseNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "public class FindExerciseCommandParser implements Parser\u003cFindExerciseCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public FindExerciseCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindExerciseCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        return new FindExerciseCommand(new ExerciseNameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulazman1997": 6,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindRecipeCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.logic.commands.FindRecipeCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.recipe.RecipeNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bakwxh"
        },
        "content": " * Parses input arguments and creates a new FindRecipeCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bakwxh"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "public class FindRecipeCommandParser implements Parser\u003cFindRecipeCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindRecipeCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * and returns a FindRecipeCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public FindRecipeCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindRecipeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        return new FindRecipeCommand(new RecipeNameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bakwxh": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.common.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.medical.MedicalHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.person.BloodType;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.person.DoB;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.person.Gender;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.person.Height;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.person.Weight;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.recipe.Calories;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.recipe.Carbs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.recipe.Fats;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.recipe.Ingredient;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.recipe.Protein;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.records.Timestamp;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.records.Type;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.records.Value;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * Parses a {@code String dateOfBirth} into a {@code DoB}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * @throws ParseException if the given {@code dateOfBirth} is invalid."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public static DoB parseDoB(String dateOfBirth) throws ParseException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        requireNonNull(dateOfBirth);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        String trimmedDoB \u003d dateOfBirth.trim();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        if (!DoB.isValidDate(trimmedDoB)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            throw new ParseException(DoB.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        return new DoB(dateOfBirth);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * Parses a {@code String value} into a {@code Value}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * @throws ParseException if the given {@code value} is invalid."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public static Value parseValue(String value) throws ParseException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        requireNonNull(value);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        String trimmedValue \u003d value.trim();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        if (!Value.isValidNumber(trimmedValue)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            throw new ParseException(Value.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        return new Value(value);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * Parses a {@code String ingredient} into a {@code Ingredient}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * @throws ParseException if the given {@code ingredient} is invalid."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public static Ingredient parseIngredient(String ingredient) throws ParseException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        requireNonNull(ingredient);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        String trimmedIngredient \u003d ingredient.trim();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        if (!Ingredient.isValidIngredientName(trimmedIngredient)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            throw new ParseException(Ingredient.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        return new Ingredient(trimmedIngredient);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e ingredients} into a {@code Set\u003cIngredient\u003e}."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public static Set\u003cIngredient\u003e parseIngredients(Collection\u003cString\u003e ingredients) throws ParseException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        requireNonNull(ingredients);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        final Set\u003cIngredient\u003e ingredientSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        for (String ingredientName : ingredients) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            ingredientSet.add(parseIngredient(ingredientName));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        return ingredientSet;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * Parses a {@code String calories} into a {@code Calories}."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * @throws ParseException if the given {@code calories} is invalid."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public static Calories parseCalories(String calories) throws ParseException {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        requireNonNull(calories);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        String trimmedCalories \u003d calories.trim();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        if (!Calories.isValidCalories(trimmedCalories)) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            throw new ParseException(Calories.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        return new Calories(trimmedCalories);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * Parses a {@code String carbs} into a {@code Carbs}."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * @throws ParseException if the given {@code carbs} is invalid."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public static Carbs parseCarbs(String carbs) throws ParseException {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        requireNonNull(carbs);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        String trimmedCarbs \u003d carbs.trim();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        if (!Carbs.isValidCarbs(trimmedCarbs)) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            throw new ParseException(Carbs.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        return new Carbs(trimmedCarbs);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * Parses a {@code String fats} into a {@code Fats}."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * @throws ParseException if the given {@code fats} is invalid."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public static Fats parseFats(String fats) throws ParseException {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        requireNonNull(fats);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        String trimmedFats \u003d fats.trim();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        if (!Fats.isValidFats(trimmedFats)) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            throw new ParseException(Fats.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        return new Fats(trimmedFats);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * Parses a {@code String protein} into a {@code Protein}."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * @throws ParseException if the given {@code protein} is invalid."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public static Protein parseProtein(String protein) throws ParseException {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        requireNonNull(protein);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        String trimmedProtein \u003d protein.trim();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        if (!Protein.isValidProtein(trimmedProtein)) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            throw new ParseException(Protein.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        return new Protein(trimmedProtein);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * Parses a {@code String timestamp} into a {@code Timestamp}."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * String will be in upper case."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * @throws ParseException if the given {@code timestamp} is invalid."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public static Timestamp parseTimestamp(String timestamp) throws ParseException {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        requireNonNull(timestamp);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        String trimmedTimestamp \u003d timestamp.trim();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        String upperTimestamp \u003d trimmedTimestamp.toUpperCase();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        if (!Timestamp.isValidDateTime(upperTimestamp)) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            throw new ParseException(Timestamp.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        return new Timestamp(upperTimestamp);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * Parses a {@code String bloodGroup} into a {@code BloodType}."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * String will be in upper case."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * @throws ParseException if the given {@code bloodGroup} is invalid."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public static BloodType parseBloodType(String bloodGroup) throws ParseException {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        requireNonNull(bloodGroup);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        String trimmedBloodGroup \u003d bloodGroup.trim();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        String upperBloodGroup \u003d trimmedBloodGroup.toUpperCase();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        if (!BloodType.isValidBloodType(upperBloodGroup)) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            throw new ParseException(BloodType.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        return new BloodType(upperBloodGroup);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * Parses a {@code String gender} into a {@code Gender}."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * String will be in lower case."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * @throws ParseException if the given {@code gender} is invalid."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public static Gender parseGender(String gender) throws ParseException {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        requireNonNull(gender);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        String trimmedGender \u003d gender.trim();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        String lowerGender \u003d trimmedGender.toLowerCase();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        if (!Gender.isValidGender(lowerGender)) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            throw new ParseException(Gender.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        return new Gender(lowerGender);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * Parses a {@code String weight} into a {@code Weight}."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * @throws ParseException if the given {@code weight} is invalid."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public static Weight parseWeight(String weight) throws ParseException {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        requireNonNull(weight);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        String trimmedWeight \u003d weight.trim();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        if (!Weight.isValidNumber(trimmedWeight)) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            throw new ParseException(Weight.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        return new Weight(trimmedWeight, DateParser.getCurrentTimestamp());"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * Parses a {@code String height} into a {@code Height}."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * @throws ParseException if the given {@code height} is invalid."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public static Height parseHeight(String height) throws ParseException {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        requireNonNull(height);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        String trimmedHeight \u003d height.trim();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        if (!Height.isValidNumber(trimmedHeight)) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            throw new ParseException(Height.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        return new Height(trimmedHeight, DateParser.getCurrentTimestamp());"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * Parses a {@code String medicalHistory} into a {@code MedicalHistory}."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * @throws ParseException if the given {@code medicalHistory} is invalid."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public static MedicalHistory parseMedicalHistory(String medicalHistory) throws ParseException {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        requireNonNull(medicalHistory);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        String trimmedTag \u003d medicalHistory.trim();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        if (!MedicalHistory.isValidMedicalHistoryName(trimmedTag)) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            throw new ParseException(MedicalHistory.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        return new MedicalHistory(trimmedTag);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e medicalHistories} into a {@code Set\u003cMedicalHistory\u003e}."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public static Set\u003cMedicalHistory\u003e parseMedicalHistories(Collection\u003cString\u003e medicalHistories) throws ParseException {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        requireNonNull(medicalHistories);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        final Set\u003cMedicalHistory\u003e medicalHistorySet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        for (String tagName : medicalHistories) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            medicalHistorySet.add(parseMedicalHistory(tagName));"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        return medicalHistorySet;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * Parses a {@code String type} into a {@code Type}."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * @throws ParseException if the given {@code type} is invalid."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public static Type parseType(String type) throws ParseException {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        requireNonNull(type);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        String trimmedType \u003d type.trim();"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        if (!Type.isValidType(trimmedType)) {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            throw new ParseException(Type.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        return new Type(trimmedType);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yyuanxin": 79,
      "-": 102,
      "bakwxh": 122
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/WorkoutPlannerParserUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.details.Distance;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.details.ExerciseDetail;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.details.ExerciseWeight;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.details.Repetitions;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.details.Sets;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.details.unit.DistanceUnit;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.details.unit.WeightUnit;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.exercise.ExerciseName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.exercise.Intensity;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.exercise.MuscleType;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "public class WorkoutPlannerParserUtil {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public static ExerciseName parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        if (!ExerciseName.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            throw new ParseException(ExerciseName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        return new ExerciseName(trimmedName);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * Parses a {@code String muscle} into a {@code MuscleType}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * @throws ParseException if the given {@code muscle} is invalid."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public static MuscleType parseMuscleType(String muscle) throws ParseException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        requireNonNull(muscle);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        String trimmedMuscleType \u003d muscle.trim();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        if (!MuscleType.isValidMuscleType(trimmedMuscleType)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            throw new ParseException(MuscleType.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        return new MuscleType(trimmedMuscleType);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * Parses a {@code String intensity} into an {@code Intensity}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * @throws ParseException if the given {@code intensity} is invalid."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public static Intensity parseIntensity(String intensity) throws ParseException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        requireNonNull(intensity);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        String trimmedIntensity \u003d intensity.trim();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        if (!Intensity.isValidIntensity(trimmedIntensity)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            throw new ParseException(Intensity.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        switch(intensity) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        case \"1\":"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        case \"low\":"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            return Intensity.LOW;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        case \"2\":"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        case \"medium\":"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            return Intensity.MEDIUM;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        case \"3\":"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        case \"high\":"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            return Intensity.HIGH;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * Parses a {@code String weight} into a {@code Weight}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * String will be interpreted to form the magnitude and unit"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * @throws ParseException if the given {@code weight} is invalid."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public static ExerciseWeight parseWeight(String weight) throws ParseException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        requireNonNull(weight);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        String trimmedWeight \u003d weight.trim();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        if (!ExerciseDetail.isValidExerciseDetail(trimmedWeight)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            throw new ParseException(ExerciseDetail.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        String[] weightSplit \u003d trimmedWeight.split(\" \");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        String unitString \u003d weightSplit[weightSplit.length - 1];"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        WeightUnit unit \u003d parseWeightUnit(unitString);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        float magnitude \u003d Float.parseFloat(weightSplit[0]);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        return new ExerciseWeight(magnitude, unit);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * Parses a {@code String weightUnit} into a {@code WeightUnit}."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * @throws ParseException if the given {@code weightUnit} is invalid."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public static WeightUnit parseWeightUnit(String weightUnit) throws ParseException {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        switch (weightUnit) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        case \"GRAM\":"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        case \"g\":"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            return WeightUnit.GRAM;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        case \"KILOGRAM\":"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        case \"kg\":"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            return WeightUnit.KILOGRAM;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        case \"POUND\":"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        case \"lbs\":"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            return WeightUnit.POUND;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            throw new ParseException(ExerciseDetail.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * Parses a {@code String distance} into a {@code Distance}."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * String will be interpreted to form the magnitude and unit"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * @throws ParseException if the given {@code distance} is invalid."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public static Distance parseDistance(String distance) throws ParseException {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        requireNonNull(distance);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        String trimmedDistance \u003d distance.trim();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        if (!ExerciseDetail.isValidExerciseDetail(trimmedDistance)) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            throw new ParseException(ExerciseDetail.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        String[] distanceSplit \u003d trimmedDistance.split(\" \");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        String unitString \u003d distanceSplit[distanceSplit.length - 1];"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        DistanceUnit unit \u003d parseDistanceUnit(unitString);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        float magnitude \u003d Float.parseFloat(distanceSplit[0]);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        return new Distance(magnitude, unit);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * Parses a {@code String distanceUnit} into a {@code DistanceUnit}."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * @throws ParseException if the given {@code weight} is invalid."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public static DistanceUnit parseDistanceUnit(String distanceUnit) throws ParseException {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        switch (distanceUnit) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        case \"METER\":"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        case \"m\":"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            return DistanceUnit.METER;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        case \"KILOMETER\":"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        case \"km\":"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            return DistanceUnit.KILOMETER;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            throw new ParseException(ExerciseDetail.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * Parses a {@code String reps} into a {@code Repetition}."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * @throws ParseException if the given {@code reps} is invalid."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public static Repetitions parseRepetitions(String reps) throws ParseException {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        requireNonNull(reps);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        String trimmedReps \u003d reps.trim();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        if (!ExerciseDetail.isValidExerciseDetail(trimmedReps)) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            throw new ParseException(ExerciseDetail.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        int intReps \u003d Integer.parseInt(reps);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        return new Repetitions(intReps);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * Parses a {@code String sets} into a {@code Repetition}."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * @throws ParseException if the given {@code sets} is invalid."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public static Sets parseSets(String sets) throws ParseException {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        requireNonNull(sets);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        String trimmedSet \u003d sets.trim();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        if (!ExerciseDetail.isValidExerciseDetail(trimmedSet)) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            throw new ParseException(ExerciseDetail.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        int intSets \u003d Integer.parseInt(sets);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        return new Sets(intSets);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulazman1997": 168,
      "-": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/model/HealthRecords.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.records.Record;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.records.UniqueRecord;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": " * Duplicates are not allowed (by .isSameRecord comparison)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "public class HealthRecords implements ReadOnlyHealthRecords {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    private final UniqueRecord healthrecords;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        healthrecords \u003d new UniqueRecord();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public HealthRecords() {}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * Creates a UserProfile using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public HealthRecords(ReadOnlyHealthRecords healthRecords) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        resetData(healthRecords);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * Replaces the contents of the record list with {@code healthRecords}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * {@code healthRecords} must not contain duplicate healthRecords."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public void setHealthRecords(List\u003cRecord\u003e healthRecords) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        this.healthrecords.setRecords(healthRecords);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * Resets the existing data of this {@code UserProfile} with {@code newData}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public void resetData(ReadOnlyHealthRecords newData) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        setHealthRecords(newData.getHealthRecordsList());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    //// record-level operations"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * Adds a record to Duke Cooks."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * The record must not already exist in Duke Cooks."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public void addRecord(Record r) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        healthrecords.add(r);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * Replaces the given record {@code target} in the list with {@code editedRecord}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * {@code target} must exist in Duke Cooks."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * The record identity of {@code editedRecord} must not be the same as another existing record in Duke Cooks."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public void setRecord(Record target, Record editedRecord) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        requireNonNull(editedRecord);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        healthrecords.setRecord(target, editedRecord);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        return healthrecords.asUnmodifiableObservableList().size() + \" health records\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public ObservableList\u003cRecord\u003e getHealthRecordsList() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        return healthrecords.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                || (other instanceof HealthRecords // instanceof handles nulls"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                \u0026\u0026 healthrecords.equals(((HealthRecords) other).healthrecords));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        return healthrecords.hashCode();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yyuanxin": 101,
      "bakwxh": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.records.Record;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    Predicate\u003cRecord\u003e PREDICATE_SHOW_ALL_RECORDS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    Predicate\u003cRecipe\u003e PREDICATE_SHOW_ALL_RECIPES \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    Predicate\u003cExercise\u003e PREDICATE_SHOW_ALL_EXERCISE \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * Returns the user prefs\u0027 UserProfile file path."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    Path getUserProfileFilePath();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * Sets the user prefs\u0027 UserProfile file path."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    void setUserProfileFilePath(Path userProfileFilePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * Returns the user prefs\u0027 Health Records file path."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    Path getHealthRecordsFilePath();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * Sets the user prefs\u0027 Health Records file path."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    void setHealthRecordsFilePath(Path healthRecordsFilePath);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    //Recipe Book"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * Returns the user prefs\u0027 RecipeBook file path."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    Path getRecipesFilePath();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * Sets the user prefs\u0027 Duke Cooks Recipe file path."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    void setRecipesFilePath(Path recipesFilePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * Returns the user prefs\u0027 Workout Planner file path."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    Path getWorkoutPlannerFilePath();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * Sets the user prefs\u0027 Workout Planner file path."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    void setWorkoutPlannerFilePath(Path workoutPlannerFilePath);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d User Profile \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * Replaces Duke Cooks data with the data in {@code userProfile}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    void setUserProfile(ReadOnlyUserProfile userProfile);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    /** Returns UserProfile */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    ReadOnlyUserProfile getUserProfile();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the given person."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * {@code person} must not already exist in User Profile."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    void addPerson(Person person);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * {@code target} must exist in User Profile."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the User Profile."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    void setPerson(Person target, Person editedPerson);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Health Records \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * Replaces Health Records data with the data in {@code healthRecords}."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    void setHealthRecords(ReadOnlyHealthRecords healthRecords);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    /** Returns Health Records */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    ReadOnlyHealthRecords getHealthRecords();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * Adds the given record."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * {@code record} must not already exist in Health Records."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    void addRecord(Record record);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * Replaces the given record {@code target} with {@code editedRecord}."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * {@code target} must exist in Heath Records."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * The record identity of {@code editedRecord} must not be the same as another existing record in Health Records."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    void setRecord(Record target, Record editedRecord);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Recipe Book  \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * Replaces Duke Cooks data with the data in {@code recipeBook}."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    void setRecipeBook(ReadOnlyRecipeBook recipeBook);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    /** Returns RecipeBook */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    ReadOnlyRecipeBook getRecipeBook();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * Returns true if a recipe with the same identity as {@code recipe} exists in Duke Cooks."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    boolean hasRecipe(Recipe recipe);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * Deletes the given recipe."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * The recipe must exist in Duke Cooks."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    void deleteRecipe(Recipe target);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * Adds the given recipe."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * {@code recipe} must not already exist in Duke Cooks."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    void addRecipe(Recipe recipe);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * Replaces the given recipe {@code target} with {@code editedRecipe}."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * {@code target} must exist in Duke Cooks."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * The recipe identity of {@code editedRecipe} must not be the same as another existing recipe in the Duke Cooks."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    void setRecipe(Recipe target, Recipe editedRecipe);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Workout Planner \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * Replaces Workout Planner Data with {@code workoutPlanner}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    void setWorkoutPlanner(ReadOnlyWorkoutPlanner workoutPlanner);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    /** Returns WorkoutPlanner */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    ReadOnlyWorkoutPlanner getWorkoutPlanner();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * Returns true if an exercise with the same identity as {@code exercise}"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * exists in Workout Planner."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    boolean hasExercise(Exercise exercise);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * Adds the given exercise."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * {@code exercise} must not already exist in Duke Cooks."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    void addExercise(Exercise exercise);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * Deletes the given exercise."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * The exercise must exist in Duke Cooks."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    void deleteExercise(Exercise target);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * Replaces the given exercise {@code target} with {@code editedExercise}."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * {@code target} must exist in Duke Cooks."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * The exercise identity of {@code editedExercise} must not be the"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * same as another existing exercise in the Duke Cooks."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    void setExercise(Exercise target, Exercise editedExercise);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered person list */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Record List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    /** Returns an unmodifiable view of the filtered record list */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    ObservableList\u003cRecord\u003e getFilteredRecordList();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * Updates the filter of the filtered record list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    void updateFilteredRecordList(Predicate\u003cRecord\u003e predicate);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Recipe List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    /** Returns an unmodifiable view of the filtered recipe list */"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    ObservableList\u003cRecipe\u003e getFilteredRecipeList();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * Updates the filter of the filtered recipe list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    void updateFilteredRecipeList(Predicate\u003cRecipe\u003e predicate);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Exercise List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    /** Returns an unmodifiable view of the filtered exercise list */"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    ObservableList\u003cExercise\u003e getFilteredExerciseList();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    * Updates the filter of the filtered exercise list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    */"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    void updateFilteredExerciseList(Predicate\u003cExercise\u003e predicate);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yyuanxin": 46,
      "khairulazman1997": 75,
      "-": 110,
      "bakwxh": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.records.Record;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": " * Represents the in-memory model of Duke Cooks data."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    private final UserProfile userProfile;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    private final HealthRecords healthRecords;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    private final RecipeBook recipeBook;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    private final WorkoutPlanner workoutPlanner;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    private final FilteredList\u003cRecord\u003e filteredRecords;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    private final FilteredList\u003cRecipe\u003e filteredRecipes;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    private final FilteredList\u003cExercise\u003e filteredExercises;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * Initializes a ModelManager with the given dukeCooks and userPrefs."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public ModelManager(ReadOnlyUserProfile dukeCooks, ReadOnlyHealthRecords healthRecords,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                        ReadOnlyRecipeBook recipeBook, ReadOnlyWorkoutPlanner workoutPlanner,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                        ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        requireAllNonNull(dukeCooks, healthRecords, userPrefs, recipeBook);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        logger.fine(\"Initializing with Duke Cooks: \" + dukeCooks"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                + \"with Health Records: \" + healthRecords"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                + \"with Recipe Book: \" + recipeBook"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                + \"and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        this.userProfile \u003d new UserProfile(dukeCooks);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        this.healthRecords \u003d new HealthRecords(healthRecords);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        this.recipeBook \u003d new RecipeBook(recipeBook);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        this.workoutPlanner \u003d new WorkoutPlanner(workoutPlanner);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(this.userProfile.getUserProfileList());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        filteredRecords \u003d new FilteredList\u003c\u003e(this.healthRecords.getHealthRecordsList());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        filteredRecipes \u003d new FilteredList\u003c\u003e(this.recipeBook.getRecipeList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        filteredExercises \u003d new FilteredList\u003c\u003e(this.workoutPlanner.getExerciseList());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * Initializes a RecipeModelManager with the given userProfile and userPrefs."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public ModelManager(ReadOnlyWorkoutPlanner workoutPlanner, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        requireAllNonNull(workoutPlanner, userPrefs);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        logger.fine(\"Initializing with Workout Planner: \" + workoutPlanner"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                + \"and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        this.userProfile \u003d null;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        this.healthRecords \u003d null;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        this.recipeBook \u003d null;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        this.workoutPlanner \u003d new WorkoutPlanner(workoutPlanner);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        filteredPersons \u003d null;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        filteredRecords \u003d null;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        filteredRecipes \u003d new FilteredList\u003c\u003e(this.recipeBook.getRecipeList());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        filteredExercises \u003d null;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        this(new UserProfile(), new HealthRecords(), new RecipeBook(),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                new WorkoutPlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public ModelManager(ReadOnlyRecipeBook recipeBook, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        requireAllNonNull(recipeBook, userPrefs);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        logger.fine(\"Initializing with Workout Planner: \" + recipeBook"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                + \"and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        this.userProfile \u003d null;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        this.healthRecords \u003d null;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        this.recipeBook \u003d new RecipeBook(recipeBook);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        this.workoutPlanner \u003d null;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        filteredPersons \u003d null;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        filteredRecords \u003d null;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        filteredRecipes \u003d new FilteredList\u003c\u003e(this.recipeBook.getRecipeList());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        filteredExercises \u003d null;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public Path getUserProfileFilePath() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        return userPrefs.getUserProfileFilePath();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public void setUserProfileFilePath(Path userProfileFilePath) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        requireNonNull(userProfileFilePath);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        userPrefs.setUserProfileFilePath(userProfileFilePath);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public Path getHealthRecordsFilePath() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        return userPrefs.getHealthRecordsFilePath();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public void setHealthRecordsFilePath(Path healthRecordsFilePath) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        requireNonNull(healthRecordsFilePath);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        userPrefs.setHealthRecordsFilePath(healthRecordsFilePath);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public Path getRecipesFilePath() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        return userPrefs.getRecipesFilePath();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public void setRecipesFilePath(Path recipesFilePath) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        requireNonNull(recipesFilePath);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        userPrefs.setRecipesFilePath(recipesFilePath);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public Path getWorkoutPlannerFilePath() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        return userPrefs.getExercisesFilePath();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public void setWorkoutPlannerFilePath(Path dukeCooksFilePath) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        requireNonNull(dukeCooksFilePath);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        userPrefs.setExercisesFilePath(dukeCooksFilePath);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d User Profile \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public void setUserProfile(ReadOnlyUserProfile userProfile) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        this.userProfile.resetData(userProfile);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public ReadOnlyUserProfile getUserProfile() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        return userProfile;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        userProfile.addPerson(person);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        userProfile.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Health Records \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public void setHealthRecords(ReadOnlyHealthRecords healthRecords) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        this.healthRecords.resetData(healthRecords);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public ReadOnlyHealthRecords getHealthRecords() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        return healthRecords;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public void addRecord(Record record) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        healthRecords.addRecord(record);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        updateFilteredRecordList(PREDICATE_SHOW_ALL_RECORDS);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public void setRecord(Record target, Record editedRecord) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        requireAllNonNull(target, editedRecord);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        healthRecords.setRecord(target, editedRecord);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Recipe Book \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public void setRecipeBook(ReadOnlyRecipeBook recipeBook) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        this.recipeBook.resetData(recipeBook);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public ReadOnlyRecipeBook getRecipeBook() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        return recipeBook;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public boolean hasRecipe(Recipe recipe) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        requireNonNull(recipe);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        return recipeBook.hasRecipe(recipe);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public void deleteRecipe(Recipe target) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        recipeBook.removeRecipe(target);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public void addRecipe(Recipe recipe) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        recipeBook.addRecipe(recipe);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        updateFilteredRecipeList(PREDICATE_SHOW_ALL_RECIPES);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public void setRecipe(Recipe target, Recipe editedRecipe) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        requireAllNonNull(target, editedRecipe);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        recipeBook.setRecipe(target, editedRecipe);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Workout Planner \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public void setWorkoutPlanner(ReadOnlyWorkoutPlanner workoutPlanner) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        this.workoutPlanner.resetData(workoutPlanner);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public ReadOnlyWorkoutPlanner getWorkoutPlanner() {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        return workoutPlanner;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public boolean hasExercise(Exercise exercise) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        requireNonNull(exercise);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        return workoutPlanner.hasExercise(exercise);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public void addExercise(Exercise exercise) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        workoutPlanner.addExercise(exercise);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        updateFilteredExerciseList(PREDICATE_SHOW_ALL_EXERCISE);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public void deleteExercise(Exercise target) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        workoutPlanner.removePerson(target);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public void setExercise(Exercise target, Exercise editedExercise) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        requireAllNonNull(target, editedExercise);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        workoutPlanner.setExercise(target, editedExercise);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * {@code versionedDukeCooks}"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "        return filteredPersons;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Record List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Record} backed by the internal list of"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * {@code versionedDukeCooks}"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public ObservableList\u003cRecord\u003e getFilteredRecordList() {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        return filteredRecords;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public void updateFilteredRecordList(Predicate\u003cRecord\u003e predicate) {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        filteredRecords.setPredicate(predicate);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Recipe List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Recipe} backed by the internal list of"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * {@code versionedRecipeBook}"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public ObservableList\u003cRecipe\u003e getFilteredRecipeList() {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        return filteredRecipes;"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public void updateFilteredRecipeList(Predicate\u003cRecipe\u003e predicate) {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        filteredRecipes.setPredicate(predicate);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Exercise List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * {@code versionedDukeCooks}"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public ObservableList\u003cExercise\u003e getFilteredExerciseList() {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        return filteredExercises;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public void updateFilteredExerciseList(Predicate\u003cExercise\u003e predicate) {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        filteredExercises.setPredicate(predicate);"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        return userProfile.equals(other.userProfile)"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                \u0026\u0026 filteredPersons.equals(other.filteredPersons)"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                \u0026\u0026 filteredExercises.equals(other.filteredExercises);"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yyuanxin": 66,
      "khairulazman1997": 113,
      "-": 178,
      "bakwxh": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelStub.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.records.Record;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bakwxh"
        },
        "content": " * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bakwxh"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "public class ModelStub implements Model {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public Path getUserProfileFilePath() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        throw new AssertionError("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                \"This method should not be called.\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public void setUserProfileFilePath(Path userProfileFilePath) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public Path getHealthRecordsFilePath() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        throw new AssertionError("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                \"This method should not be called.\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public void setHealthRecordsFilePath(Path healthRecordsFilePath) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public Path getRecipesFilePath() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public void setRecipesFilePath(Path recipesFilePath) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public void addRecipe(Recipe recipe) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public void setRecipeBook(ReadOnlyRecipeBook recipeBook) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public Path getWorkoutPlannerFilePath() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public void setWorkoutPlannerFilePath(Path workoutPlannerFilePath) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public ReadOnlyRecipeBook getRecipeBook() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public boolean hasRecipe(Recipe recipe) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public void deleteRecipe(Recipe target) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public void setRecipe(Recipe target, Recipe editedRecipe) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public ObservableList\u003cRecipe\u003e getFilteredRecipeList() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public void updateFilteredRecipeList(Predicate\u003cRecipe\u003e predicate) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        throw new AssertionError("
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                \"This method should not be called.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public void addRecord(Record record) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        throw new AssertionError("
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                \"This method should not be called.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public void setUserProfile(ReadOnlyUserProfile userProfile) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public void setHealthRecords(ReadOnlyHealthRecords healthRecords) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public ReadOnlyUserProfile getUserProfile() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        throw new AssertionError("
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                \"This method should not be called.\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public ReadOnlyHealthRecords getHealthRecords() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        throw new AssertionError("
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                \"This method should not be called.\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public void setRecord(Record target, Record editedRecord) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public ObservableList\u003cRecord\u003e getFilteredRecordList() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public void updateFilteredRecordList(Predicate\u003cRecord\u003e predicate) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public void setWorkoutPlanner(ReadOnlyWorkoutPlanner workoutPlanner) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public ReadOnlyWorkoutPlanner getWorkoutPlanner() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public boolean hasExercise(Exercise exercise) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public void addExercise(Exercise exercise) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public void deleteExercise(Exercise exercise) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public void setExercise(Exercise target, Exercise editedExercise) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public ObservableList\u003cExercise\u003e getFilteredExerciseList() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public void updateFilteredExerciseList(Predicate\u003cExercise\u003e predicate) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulazman1997": 69,
      "bakwxh": 154
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyHealthRecords.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.records.Record;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": " * Unmodifiable view of Health Records"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "public interface ReadOnlyHealthRecords {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * Returns an unmodifiable view of the Health Records in the list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * This list will only contain one instance of record."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    ObservableList\u003cRecord\u003e getHealthRecordsList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yyuanxin": 13,
      "bakwxh": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyRecipeBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": " * Unmodifiable view of Duke Cooks"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "public interface ReadOnlyRecipeBook {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * Returns an unmodifiable view of the recipes list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * This list will not contain any duplicate recipes."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    ObservableList\u003cRecipe\u003e getRecipeList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulazman1997": 1,
      "-": 11,
      "bakwxh": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyUserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    Path getExercisesFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    Path getRecipesFilePath();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    Path getUserProfileFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    Path getHealthRecordsFilePath();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yyuanxin": 2,
      "khairulazman1997": 1,
      "-": 18,
      "bakwxh": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyUserProfile.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": " * Unmodifiable view of the User Profile"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "public interface ReadOnlyUserProfile {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * Returns an unmodifiable view of the user profile in the list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * This list will only contain one instance of profile."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    ObservableList\u003cPerson\u003e getUserProfileList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yyuanxin": 6,
      "-": 9,
      "bakwxh": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyWorkoutPlanner.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": " * Unmodifiable view of Workout Planner"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "public interface ReadOnlyWorkoutPlanner {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the persons list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    ObservableList\u003cExercise\u003e getExerciseList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulazman1997": 4,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/model/RecipeBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.recipe.UniqueRecipeList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bakwxh"
        },
        "content": " * Duplicates are not allowed (by .isSameRecipe comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "public class RecipeBook implements ReadOnlyRecipeBook {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    private final UniqueRecipeList recipes;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        recipes \u003d new UniqueRecipeList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public RecipeBook() {}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * Creates a RecipeBook using the Recipes in the {@code toBeCopied}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public RecipeBook(ReadOnlyRecipeBook toBeCopied) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * Replaces the contents of the recipe list with {@code recipes}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * {@code recipes} must not contain duplicate recipes."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public void setRecipes(List\u003cRecipe\u003e recipes) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        this.recipes.setRecipes(recipes);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * Resets the existing data of this {@code RecipeBook} with {@code newData}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public void resetData(ReadOnlyRecipeBook newData) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        setRecipes(newData.getRecipeList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    //// recipe-level operations"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * Returns true if a recipe with the same identity as {@code recipe} exists in Duke Cooks."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public boolean hasRecipe(Recipe recipe) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        requireNonNull(recipe);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        return recipes.contains(recipe);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * Adds a recipe to Duke Cooks."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * The recipe must not already exist in Duke Cooks."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public void addRecipe(Recipe p) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        recipes.add(p);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * Replaces the given recipe {@code target} in the list with {@code editedRecipe}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * {@code target} must exist in Duke Cooks."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * The recipe identity of {@code editedRecipe} must not be the same as another existing recipe in Duke Cooks."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public void setRecipe(Recipe target, Recipe editedRecipe) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        requireNonNull(editedRecipe);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        recipes.setRecipe(target, editedRecipe);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * Removes {@code key} from this {@code RecipeBook}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * {@code key} must exist in Duke Cooks."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public void removeRecipe(Recipe key) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        recipes.remove(key);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        return recipes.asUnmodifiableObservableList().size() + \" recipes\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public ObservableList\u003cRecipe\u003e getRecipeList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        return recipes.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                || (other instanceof RecipeBook // instanceof handles nulls"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                \u0026\u0026 recipes.equals(((RecipeBook) other).recipes));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        return recipes.hashCode();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulazman1997": 2,
      "-": 79,
      "bakwxh": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    private Path exercisesFilePath \u003d Paths.get(\"data\" , \"exercises.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    private Path userProfileFilePath \u003d Paths.get(\"data\" , \"userprofile.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    private Path healthRecordsFilePath \u003d Paths.get(\"data\", \"healthrecords.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    private Path recipesFilePath \u003d Paths.get(\"data\" , \"recipes.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        setExercisesFilePath(newUserPrefs.getExercisesFilePath());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        setUserProfileFilePath(newUserPrefs.getUserProfileFilePath());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        setHealthRecordsFilePath(newUserPrefs.getHealthRecordsFilePath());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        setRecipesFilePath(newUserPrefs.getRecipesFilePath());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public Path getExercisesFilePath() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        return exercisesFilePath;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public Path getUserProfileFilePath() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        return userProfileFilePath;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public Path getRecipesFilePath() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        return recipesFilePath;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public void setUserProfileFilePath(Path userProfileFilePath) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        requireNonNull(userProfileFilePath);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        this.userProfileFilePath \u003d userProfileFilePath;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public Path getHealthRecordsFilePath() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        return healthRecordsFilePath;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public void setHealthRecordsFilePath(Path healthRecordsFilePath) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        requireNonNull(healthRecordsFilePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        this.healthRecordsFilePath \u003d healthRecordsFilePath;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public void setExercisesFilePath(Path exercisesFilePath) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        requireNonNull(exercisesFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        this.exercisesFilePath \u003d exercisesFilePath;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public void setRecipesFilePath(Path recipesFilePath) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        requireNonNull(recipesFilePath);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        this.recipesFilePath \u003d recipesFilePath;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                \u0026\u0026 exercisesFilePath.equals(o.exercisesFilePath)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                \u0026\u0026 userProfileFilePath.equals(o.userProfileFilePath)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                \u0026\u0026 recipesFilePath.equals(o.recipesFilePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        return Objects.hash(guiSettings, exercisesFilePath, userProfileFilePath, healthRecordsFilePath,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                recipesFilePath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        sb.append(\"\\nLocal WorkoutPlanner data file location : \" + exercisesFilePath);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        sb.append(\"\\nLocal UserPref data file location : \" + userProfileFilePath);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        sb.append(\"\\nLocal RecipeBook data file location : \" + recipesFilePath);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yyuanxin": 18,
      "khairulazman1997": 14,
      "-": 83,
      "bakwxh": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserProfile.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.person.UniqueUserProfile;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": " * Duplicates are not allowed (by .isSameRecord comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "public class UserProfile implements ReadOnlyUserProfile {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    private final UniqueUserProfile userprofile;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        userprofile \u003d new UniqueUserProfile();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public UserProfile() {}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * Creates a UserProfile using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public UserProfile(ReadOnlyUserProfile dukeCooks) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        resetData(dukeCooks);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * Replaces the contents of the person list with {@code userprofile}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * {@code userprofile} must not contain duplicate userprofile."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public void setUserprofile(List\u003cPerson\u003e userprofile) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        this.userprofile.setPersons(userprofile);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * Resets the existing data of this {@code UserProfile} with {@code newData}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public void resetData(ReadOnlyUserProfile newData) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        setUserprofile(newData.getUserProfileList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * Adds a person to Duke Cooks."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * The person must not already exist in Duke Cooks."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person p) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        userprofile.add(p);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * {@code target} must exist in Duke Cooks."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in Duke Cooks."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedPerson);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        userprofile.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        return userprofile.asUnmodifiableObservableList().size() + \" userprofile\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public ObservableList\u003cPerson\u003e getUserProfileList() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        return userprofile.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                || (other instanceof UserProfile // instanceof handles nulls"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                \u0026\u0026 userprofile.equals(((UserProfile) other).userprofile));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        return userprofile.hashCode();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yyuanxin": 23,
      "khairulazman1997": 4,
      "-": 73,
      "bakwxh": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/WorkoutPlanner.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.exercise.UniqueExerciseList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "public class WorkoutPlanner implements ReadOnlyWorkoutPlanner {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    private final UniqueExerciseList exercises;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        exercises \u003d new UniqueExerciseList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public WorkoutPlanner() {}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * Creates a Workout Planner using the Exercises in the {@code toBeCopied}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public WorkoutPlanner(ReadOnlyWorkoutPlanner toBeCopied) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public void setExercise(List\u003cExercise\u003e exercises) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        this.exercises.setExercises(exercises);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * Replaces the given exercise {@code target} in the list with {@code editedExercise}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * {@code target} must exist in the WorkoutPlanner."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * The exercise identity of {@code editedExercise}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * must not be the same as another existing person in Workout Planner."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public void setExercise(Exercise target, Exercise editedExercise) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        requireNonNull(editedExercise);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        exercises.setPerson(target, editedExercise);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * Resets the existing data of this {@code WorkoutPLanner} with {@code newData}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public void resetData(ReadOnlyWorkoutPlanner newData) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        setExercise(newData.getExerciseList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * Returns true if an Exercise with the same identity as {@code exercise}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * exists in the Workout Planner."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public boolean hasExercise(Exercise exercise) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        requireNonNull(exercise);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        return exercises.contains(exercise);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * Adds an exercise to Workout Planner."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * The exercise must not already exist in the Workout Planner."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public void addExercise(Exercise p) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        exercises.add(p);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * Removes {@code key} from this {@code WorkoutPLanner}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * {@code key} must exist in the Workout Planner."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public void removePerson(Exercise key) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        exercises.remove(key);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        return exercises.asUnmodifiableObservableList().size() + \" persons\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public ObservableList\u003cExercise\u003e getExerciseList() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        return exercises.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                || (other instanceof WorkoutPlanner // instanceof handles nulls"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                \u0026\u0026 exercises.equals(((WorkoutPlanner) other).exercises));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        return exercises.hashCode();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulazman1997": 44,
      "-": 78
    }
  },
  {
    "path": "src/main/java/seedu/address/model/common/Name.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "package seedu.address.model.common;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": " * Represents a Person\u0027s name in Duke Cooks."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulazman1997": 1,
      "-": 57,
      "bakwxh": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/details/Distance.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "package seedu.address.model.details;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.details.unit.DistanceUnit;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": " * Represents the Distance of an exercise in the Workout Planner."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": " * Guarantees: immutable;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "public class Distance\u003cFloat\u003e extends ExerciseDetail {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    private DistanceUnit unit;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public Distance(float distance, DistanceUnit unit) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        requireAllNonNull(distance, unit);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        super.magnitude \u003d distance;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        this.unit \u003d unit;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public DistanceUnit getUnit() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        return unit;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        builder.append(\"[Distance: \")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                .append(getMagnitude())"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                .append(getUnit())"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                .append(\u0027]\u0027);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulazman1997": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/model/details/ExerciseDetail.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "package seedu.address.model.details;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": " * Represents an Exercise Information in Duke Cooks."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidExerciseDetail(String)}"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "public abstract class ExerciseDetail\u003cT\u003e {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Exercise detail should \""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            + \"be alphanumeric and have at most one magnitude\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    private static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    protected T magnitude;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public T getMagnitude() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        return magnitude;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public static boolean isValidExerciseDetail(String test) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "khairulazman1997": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/model/details/ExerciseWeight.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "package seedu.address.model.details;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.details.unit.WeightUnit;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": " * Represents the Weight used in an exercise in the Workout Planner."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": " * Guarantees: immutable;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "public class ExerciseWeight\u003cFloat\u003e extends ExerciseDetail {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    private WeightUnit unit;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public ExerciseWeight(float weight, WeightUnit unit) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        requireAllNonNull(weight, unit);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        super.magnitude \u003d weight;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        this.unit \u003d unit;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public WeightUnit getUnit() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        return unit;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        builder.append(\"[Weight: \")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                .append(getMagnitude())"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                .append(getUnit())"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                .append(\u0027]\u0027);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulazman1997": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/model/details/Repetitions.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "package seedu.address.model.details;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": " * Represents the number of reps of an exercise in the Workout planner."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": " * Guarantees: immutable;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "public class Repetitions\u003cInteger\u003e extends ExerciseDetail {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public Repetitions(java.lang.Integer repetitions) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        requireNonNull(repetitions);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        super.magnitude \u003d repetitions;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        builder.append(\"[Number of repetitions: \")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                .append(getMagnitude())"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                .append(\"]\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulazman1997": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/model/details/Sets.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "package seedu.address.model.details;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": " * Represents the number of Sets of an exercise in Workout Planner."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": " * Guarantees: immutable;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "public class Sets\u003cInteger\u003e extends ExerciseDetail {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public Sets(int sets) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        requireNonNull(sets);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        super.magnitude \u003d sets;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        builder.append(\"[Number of sets: \")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                .append(getMagnitude())"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                .append(\"]\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulazman1997": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/model/details/unit/DistanceUnit.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "package seedu.address.model.details.unit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": " * Represents the unit used for the Distance object."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "public enum DistanceUnit {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    METER,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    KILOMETER;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public String toJson() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        return name();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        if (this \u003d\u003d DistanceUnit.METER) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            return \"m\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            return \"km\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulazman1997": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/model/details/unit/WeightUnit.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "package seedu.address.model.details.unit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": " * Represents the unit used for a Weight object."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "public enum WeightUnit {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    GRAM,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    KILOGRAM,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    POUND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public String toJson() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        return name();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        if (this \u003d\u003d WeightUnit.GRAM) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            return \"g\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        } else if (this \u003d\u003d WeightUnit.KILOGRAM) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            return \"kg\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            return \"lbs\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulazman1997": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/model/exercise/Exercise.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "package seedu.address.model.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.details.ExerciseDetail;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": " * Represents an Exercise in Duke Cooks."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "public class Exercise {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    private final ExerciseName exerciseName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    private final MusclesTrained musclesTrained;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    private final Intensity intensity;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    private final Set\u003cExerciseDetail\u003e exerciseDetails \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public Exercise(ExerciseName exerciseName, MusclesTrained musclesTrained,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                    Intensity intensity, Set\u003cExerciseDetail\u003e exerciseDetails) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        requireAllNonNull(exerciseName, musclesTrained, intensity, exerciseDetails);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        this.exerciseName \u003d exerciseName;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        this.musclesTrained \u003d musclesTrained;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        this.intensity \u003d intensity;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        this.exerciseDetails.addAll(exerciseDetails);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public ExerciseName getExerciseName() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        return exerciseName;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public MusclesTrained getMusclesTrained() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        return musclesTrained;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public Intensity getIntensity() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        return intensity;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public Set\u003cExerciseDetail\u003e getExerciseDetails() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        return Collections.unmodifiableSet(exerciseDetails);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * Returns true if both exercises of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * This defines a weaker notion of equality between two exercises."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public boolean isSameExercise(Exercise otherExercise) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        if (otherExercise \u003d\u003d this) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        return otherExercise !\u003d null"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                \u0026\u0026 otherExercise.getExerciseName().equals(getExerciseName());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * Returns true if both exercises have the same identity and data fields."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * This defines a stronger notion of equality between two exercises."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        if (!(other instanceof Exercise)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        Exercise otherExercise \u003d (Exercise) other;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        return otherExercise.getExerciseName().equals(getExerciseName())"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                \u0026\u0026 otherExercise.getMusclesTrained().equals(getMusclesTrained())"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                \u0026\u0026 otherExercise.getIntensity().equals(getIntensity())"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                \u0026\u0026 otherExercise.getExerciseDetails().equals(getExerciseDetails());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        return Objects.hash(exerciseName, musclesTrained, intensity, exerciseDetails);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        builder.append(getExerciseName())"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                .append(\" Muscle Type: \")"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                .append(getMusclesTrained())"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                .append(\" Intensity: \")"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                .append(getIntensity())"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                .append(\" Details: \");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        getExerciseDetails().forEach(builder::append);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulazman1997": 111
    }
  },
  {
    "path": "src/main/java/seedu/address/model/exercise/ExerciseName.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "package seedu.address.model.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": " * Represents an Exercise\u0027s name in Duke Cooks."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "public class ExerciseName {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public final String exerciseName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public ExerciseName(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        exerciseName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        return exerciseName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                || (other instanceof ExerciseName // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                \u0026\u0026 exerciseName.equals(((ExerciseName) other).exerciseName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        return exerciseName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulazman1997": 10,
      "-": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/model/exercise/ExerciseNameContainsKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "package seedu.address.model.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "public class ExerciseNameContainsKeywordsPredicate implements Predicate\u003cExercise\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public ExerciseNameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public boolean test(Exercise exercise) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                        .containsWordIgnoreCase(exercise.getExerciseName().exerciseName, keyword));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                || (other instanceof ExerciseNameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                \u0026\u0026 keywords.equals(((ExerciseNameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulazman1997": 8,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/model/exercise/Intensity.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "package seedu.address.model.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": " * Represents Intensity of an Exercise in the workout planner."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "public enum Intensity {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    HIGH,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    MEDIUM,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    LOW;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            \"Intensity should only include the integers 1, 2, 3 or strings low, medium and high\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                    + \" and should not be blank\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"(1|2|3|low|medium|high)\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public static boolean isValidIntensity(String test) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        return super.toString().toLowerCase();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulazman1997": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/model/exercise/MuscleType.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "package seedu.address.model.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": " * Represents an Exercise\u0027s muscle type in Duke Cooks."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidMuscleType(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "public class MuscleType {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            \"MuscleGroups should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public final String muscleType;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * @param muscleType A valid muscleType."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public MuscleType(String muscleType) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        requireNonNull(muscleType);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        checkArgument(isValidMuscleType(muscleType), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        this.muscleType \u003d muscleType;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public String getMuscleType() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        return muscleType;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * Returns true if a given string is a valid muscleType."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public static boolean isValidMuscleType(String test) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        return muscleType;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                || (other instanceof ExerciseName // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                \u0026\u0026 muscleType.equals(((ExerciseName) other).exerciseName)); // state check"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        return muscleType.hashCode();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulazman1997": 22,
      "-": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/model/exercise/MusclesTrained.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "package seedu.address.model.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": " * Represents all the Muscles Trained in an Exercise of Workout Planner"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "public class MusclesTrained {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    private final MuscleType primaryMuscle;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    private final ArrayList\u003cMuscleType\u003e secondaryMuscles;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public MusclesTrained(MuscleType primaryMuscle, ArrayList\u003cMuscleType\u003e secondaryMuscles) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        requireAllNonNull(primaryMuscle, secondaryMuscles);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        this.primaryMuscle \u003d primaryMuscle;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        this.secondaryMuscles \u003d secondaryMuscles;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public MuscleType getPrimaryMuscle() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        return primaryMuscle;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public ArrayList\u003cMuscleType\u003e getSecondaryMuscles() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        return secondaryMuscles;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        builder.append(\" [Primary Muscle: \")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                .append(getPrimaryMuscle());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        if (!secondaryMuscles.isEmpty()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            builder.append(\" Secondary Muscles: \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            for (MuscleType secondaryMuscle : secondaryMuscles) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                builder.append(secondaryMuscle)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                        .append(\", \");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        builder.append(\"]\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulazman1997": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/model/exercise/UniqueExerciseList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "package seedu.address.model.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.exercise.exceptions.DuplicateExerciseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.exercise.exceptions.ExerciseNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * A list of persons that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A person is considered unique by comparing using {@code Person#isSamePerson(Person)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * persons uses Person#isSamePerson(Person) for equality so as to ensure that the person being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * unique in terms of identity in the UniquePersonList. However, the removal of a person uses Person#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * as to ensure that the person with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": " * @see Exercise#isSameExercise(Exercise)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "public class UniqueExerciseList implements Iterable\u003cExercise\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    private final ObservableList\u003cExercise\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    private final ObservableList\u003cExercise\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the list contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public boolean contains(Exercise toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameExercise);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public void add(Exercise toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            throw new DuplicateExerciseException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public void setPerson(Exercise target, Exercise editedExercise) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        requireAllNonNull(target, editedExercise);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            throw new ExerciseNotFoundException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        if (!target.isSameExercise(editedExercise) \u0026\u0026 contains(editedExercise)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            throw new DuplicateExerciseException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        internalList.set(index, editedExercise);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes the equivalent person from the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public void remove(Exercise toRemove) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            throw new ExerciseNotFoundException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public void setExercises(UniqueExerciseList replacement) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of this list with {@code persons}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public void setExercises(List\u003cExercise\u003e exercises) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        requireAllNonNull(exercises);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        if (!personsAreUnique(exercises)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            throw new DuplicateExerciseException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        internalList.setAll(exercises);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public ObservableList\u003cExercise\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public Iterator\u003cExercise\u003e iterator() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                || (other instanceof UniqueExerciseList // instanceof handles nulls"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueExerciseList) other).internalList));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code persons} contains only unique persons."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    private boolean personsAreUnique(List\u003cExercise\u003e exercises) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        for (int i \u003d 0; i \u003c exercises.size() - 1; i++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            for (int j \u003d i + 1; j \u003c exercises.size(); j++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                if (exercises.get(i).isSameExercise(exercises.get(j))) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulazman1997": 33,
      "-": 104
    }
  },
  {
    "path": "src/main/java/seedu/address/model/exercise/exceptions/DuplicateExerciseException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "package seedu.address.model.exercise.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": " * Signals that the operation will result in duplicate Persons (Persons are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "public class DuplicateExerciseException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public DuplicateExerciseException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        super(\"Operation would result in duplicate exercises\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulazman1997": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/exercise/exceptions/ExerciseNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "package seedu.address.model.exercise.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": " * Signals that the operation is unable to find the specified person."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "public class ExerciseNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "khairulazman1997": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/medical/MedicalHistory.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "package seedu.address.model.medical;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": " * Represents a MedicalHistory in Duke Cooks."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidMedicalHistoryName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "public class MedicalHistory {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Medical conditions should be alphanumeric\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public final String medicalHistoryName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * Constructs a {@code MedicalHistory}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * @param medicalHistoryName A valid tag name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public MedicalHistory(String medicalHistoryName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        requireNonNull(medicalHistoryName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        checkArgument(isValidMedicalHistoryName(medicalHistoryName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        this.medicalHistoryName \u003d medicalHistoryName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public static boolean isValidMedicalHistoryName(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                || (other instanceof MedicalHistory // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                \u0026\u0026 medicalHistoryName.equals(((MedicalHistory) other).medicalHistoryName)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        return medicalHistoryName.hashCode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        return \u0027[\u0027 + medicalHistoryName + \u0027]\u0027;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yyuanxin": 53,
      "bakwxh": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/BloodType.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": " * Represents the user\u0027s blood type"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "public class BloodType {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            \"Blood Type should be alphabetical character (A/B/AB/O) followed by +/-\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"(A|B|AB|O)[+-]\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public final String bloodGroup;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * Constructs a {@code BloodType}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * @param bloodGroup A valid blood group."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public BloodType(String bloodGroup) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        requireNonNull(bloodGroup);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        checkArgument(isValidBloodType(bloodGroup), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        this.bloodGroup \u003d bloodGroup;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * Returns true if a given string is a valid blood group."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public static boolean isValidBloodType(String test) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                || (other instanceof BloodType // instanceof handles nulls"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                \u0026\u0026 bloodGroup.equals(((BloodType) other).bloodGroup)); // state check"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        return bloodGroup.hashCode();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        return \u0027[\u0027 + bloodGroup + \u0027]\u0027;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yyuanxin": 52,
      "bakwxh": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/DoB.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import seedu.address.logic.parser.DateParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": " * Represents the user\u0027s date of birth."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "public class DoB {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            \"DoB should only contain numeric characters in the format of DD/MM/YYYY, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public final String dateOfBirth;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * Constructs a {@code date}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * @param date A valid date in String form."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public DoB(String date) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        checkArgument(isValidDate(date), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        dateOfBirth \u003d date;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * Returns true if a given string is a valid date."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public static boolean isValidDate(String date) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        return DateParser.isValidDate(date);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        return dateOfBirth;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                || (other instanceof DoB // instanceof handles nulls"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                \u0026\u0026 dateOfBirth.equals(((DoB) other).dateOfBirth)); // state check"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        return dateOfBirth.hashCode();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yyuanxin": 51,
      "bakwxh": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Gender.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": " * Represents the user\u0027s gender: Female or Male."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "public class Gender {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            \"Gender should either be Female or Male, and should not be blank\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"(female|male)\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public final String gender;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * Constructs a {@code gender}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * @param gender A valid gender."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public Gender(String gender) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        requireNonNull(gender);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        checkArgument(isValidGender(gender), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        this.gender \u003d gender;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * Returns true if a given string is a valid gender."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * Preconditions: assumes (@code String test) is in lower case."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public static boolean isValidGender(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        return gender;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                || (other instanceof Gender // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                \u0026\u0026 gender.equals(((Gender) other).gender)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        return gender.hashCode();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yyuanxin": 57,
      "bakwxh": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Height.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": " * Represents User\u0027s height in CM."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "public class Height {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            \"Height should only contain numeric characters and represented by centimeters.\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[0-9]+\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public final int height;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public final String timestamp;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * Constructs a {@code Height}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * @param height A valid height."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * @param datetime The timestamp of latest input of user\u0027s height."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public Height(String height, String datetime) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        requireNonNull(height);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        checkArgument(isValidNumber(height), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        this.height \u003d Integer.parseInt(height);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        this.timestamp \u003d datetime;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * Returns true if a given string is a valid number."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public static boolean isValidNumber(String test) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        return String.valueOf(height);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yyuanxin": 46,
      "bakwxh": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Person.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.common.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.medical.MedicalHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": " * Represents a Person in Duke Cooks."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class Person {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    private final DoB dateOfBirth;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    private final Gender gender;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    private final BloodType bloodGroup;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    private final Weight weight;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    private final Height height;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    private final Set\u003cMedicalHistory\u003e medicalHistories \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public Person(Name name, DoB dateOfBirth, Gender gender, BloodType bloodGroup,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                  Weight weight, Height height, Set\u003cMedicalHistory\u003e medicalHistories) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        requireAllNonNull(name, dateOfBirth, gender, bloodGroup, weight, height, medicalHistories);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        this.dateOfBirth \u003d dateOfBirth;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        this.gender \u003d gender;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        this.bloodGroup \u003d bloodGroup;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        this.weight \u003d weight;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        this.height \u003d height;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        this.medicalHistories.addAll(medicalHistories);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public Gender getGender() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        return gender;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public DoB getDateOfBirth() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        return dateOfBirth;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public BloodType getBloodType() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        return bloodGroup;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public Weight getWeight() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        return weight;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public Height getHeight() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        return height;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public Set\u003cMedicalHistory\u003e getMedicalHistories() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        return Collections.unmodifiableSet(medicalHistories);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSamePerson(Person otherPerson) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        if (otherPerson \u003d\u003d this) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson !\u003d null"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bigjunnn"
        },
        "content": "                \u0026\u0026 otherPerson.getName().equals(getName());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Person)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        Person otherPerson \u003d (Person) other;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                \u0026\u0026 otherPerson.getMedicalHistories().equals(getMedicalHistories());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        return Objects.hash(name, medicalHistories);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        getMedicalHistories().forEach(builder::append);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bigjunnn": 1,
      "yyuanxin": 34,
      "khairulazman1997": 1,
      "-": 86,
      "bakwxh": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/UniqueUserProfile.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * A list of persons that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": " * A person is considered unique by comparing using {@code Person#isSameRecord(Person)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": " * persons uses Person#isSameRecord(Person) for equality so as to ensure that the person being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": " * unique in terms of identity in the UniqueUserProfile. However, the removal of a person uses Person#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * as to ensure that the person with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * @see Person#isSamePerson(Person)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "public class UniqueUserProfile implements Iterable\u003cPerson\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cPerson\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cPerson\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the list contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean contains(Person toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSamePerson);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * Adds a new user profile if does not already exist."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * Behavior: If user profile exists, overwrite instead."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * Calls (@Method setPerson) to overwrite user profile if already exists."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(Person toAdd) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        if (internalList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            internalList.add(toAdd);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        } else { //assumes size can never exceed 1."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            Person target \u003d internalList.get(0);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            setPerson(target, toAdd);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.set(index, editedPerson);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes the equivalent person from the list."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove(Person toRemove) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public void setPersons(UniqueUserProfile replacement) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of this list with {@code persons}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(persons);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personsAreUnique(persons)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(persons);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public Iterator\u003cPerson\u003e iterator() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                || (other instanceof UniqueUserProfile // instanceof handles nulls"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueUserProfile) other).internalList));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code persons} contains only unique persons."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean personsAreUnique(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c persons.size() - 1; i++) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int j \u003d i + 1; j \u003c persons.size(); j++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "                if (persons.get(i).isSamePerson(persons.get(j))) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yyuanxin": 14,
      "-": 122
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Weight.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": " * Represents User\u0027s weight."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "public class Weight {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            \"Weight should only contain numeric characters and represented by kilograms\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[0-9]+\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public final int weight;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public final String timestamp;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * Constructs a {@code Weight}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * @param weight A valid weight."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * @param datetime The timestamp of latest input of user\u0027s weight."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public Weight(String weight, String datetime) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        requireNonNull(weight);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        checkArgument(isValidNumber(weight), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        this.weight \u003d Integer.parseInt(weight);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        this.timestamp \u003d datetime;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * Returns true if a given string is a valid number."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public static boolean isValidNumber(String test) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        return String.valueOf(weight);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yyuanxin": 47,
      "bakwxh": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/exceptions/PersonNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": " * Signals that the operation is unable to find the specified record."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "yyuanxin": 1,
      "-": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/model/recipe/Calories.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "package seedu.address.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bakwxh"
        },
        "content": " * Represents a recipe\u0027s number of calories."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bakwxh"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "public class Calories {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            \"Number of calories should only contain numbers, express in kcal, with units omitted.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d*\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public final String cardValue;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * Constructs a {@Calorie}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * @param calories A valid amount of calories."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public Calories(String calories) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        requireNonNull(calories);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        checkArgument(isValidCalories(calories), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        value \u003d calories;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        cardValue \u003d \"Calories: \" + value + \"kcal\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * Returns true if given string is a valid number of calories"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public static boolean isValidCalories(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bakwxh": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/model/recipe/Carbs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "package seedu.address.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bakwxh"
        },
        "content": " * Represents a recipe\u0027s amount of carbohydrates."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bakwxh"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "public class Carbs {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            \"Amount of carbohydrates should only contain numbers, express in grams, with units omitted.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d*\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public final String cardValue;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * Constructs a {@Carbs}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * @param carbs A valid amount of carbohydrates."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public Carbs(String carbs) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        requireNonNull(carbs);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        checkArgument(isValidCarbs(carbs), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        value \u003d carbs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        cardValue \u003d \"Carbs: \" + value + \"g\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * Returns true if given string is a valid amount of carbohydrates."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public static boolean isValidCarbs(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bakwxh": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/model/recipe/Fats.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "package seedu.address.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bakwxh"
        },
        "content": " * Represents a recipe\u0027s amount of fats."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bakwxh"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "public class Fats {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            \"Amount of fats should only contain numbers, express in g, with units omitted.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d*\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public final String cardValue;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * Constructs a {@Fats}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * @param fats A valid amount of fats."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public Fats(String fats) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        requireNonNull(fats);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        checkArgument(isValidFats(fats), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        value \u003d fats;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        cardValue \u003d \"Fats: \" + value + \"g\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * Returns true if given string is a valid amount of fats."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public static boolean isValidFats(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bakwxh": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/model/recipe/Ingredient.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "package seedu.address.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bakwxh"
        },
        "content": " * Represents a Ingredient in Duke Cooks."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bakwxh"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidIngredientName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bakwxh"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "public class Ingredient {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Ingredients names should be alphanumeric\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public final String ingredientName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * Constructs a {@code Ingredient}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * @param ingredientName A valid ingredient name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public Ingredient(String ingredientName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        requireNonNull(ingredientName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        checkArgument(isValidIngredientName(ingredientName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        this.ingredientName \u003d ingredientName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * Returns true if a given string is a valid ingredient name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public static boolean isValidIngredientName(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                || (other instanceof Ingredient // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                \u0026\u0026 ingredientName.equals(((Ingredient) other).ingredientName)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        return ingredientName.hashCode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        return \u0027[\u0027 + ingredientName + \u0027]\u0027;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bakwxh": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/model/recipe/Protein.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "package seedu.address.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bakwxh"
        },
        "content": " * Represents a recipe\u0027s amount of protein."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bakwxh"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "public class Protein {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            \"Amount of protein should only contain numbers, express in g, with units omitted.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d*\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public final String cardValue;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * Constructs a {@Protein}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * @param protein A valid amount of protein."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public Protein(String protein) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        requireNonNull(protein);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        checkArgument(isValidProtein(protein), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        value \u003d protein;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        cardValue \u003d \"Protein: \" + value + \"g\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * Returns true if given string is a valid amount of protein."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public static boolean isValidProtein(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bakwxh": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/model/recipe/Recipe.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "package seedu.address.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.common.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bakwxh"
        },
        "content": " * Represents a Recipe in Duke Cooks."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "public class Recipe {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    private final Set\u003cIngredient\u003e ingredients \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    private final Calories calories;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    private final Carbs carbs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    private final Fats fats;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    private final Protein protein;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public Recipe(Name name, Set\u003cIngredient\u003e ingredients, Calories calories, Carbs carbs, Fats fats, Protein protein) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        requireAllNonNull(name, ingredients);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        this.ingredients.addAll(ingredients);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        this.calories \u003d calories;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        this.carbs \u003d carbs;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        this.fats \u003d fats;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        this.protein \u003d protein;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public Calories getCalories() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        return calories;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public Carbs getCarbs() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        return carbs;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public Fats getFats() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        return fats;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public Protein getProtein() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        return protein;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * Returns an immutable ingredient set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public Set\u003cIngredient\u003e getIngredients() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        return Collections.unmodifiableSet(ingredients);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * Returns true if both recipes of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * This defines a weaker notion of equality between two recipes."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public boolean isSameRecipe(Recipe otherRecipe) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        if (otherRecipe \u003d\u003d this) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        return otherRecipe !\u003d null"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                \u0026\u0026 otherRecipe.getName().equals(getName());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * Returns true if both recipes have the same identity and data fields."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * This defines a stronger notion of equality between two recipes."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        if (!(other instanceof Recipe)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        Recipe otherRecipe \u003d (Recipe) other;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        return otherRecipe.getName().equals(getName())"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                \u0026\u0026 otherRecipe.getIngredients().equals(getIngredients());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        return Objects.hash(name, ingredients);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                .append(\" Ingredients: \");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        getIngredients().forEach(builder::append);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulazman1997": 2,
      "-": 64,
      "bakwxh": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/model/recipe/RecipeNameContainsKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "package seedu.address.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bakwxh"
        },
        "content": " * Tests that a {@code Recipe}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "public class RecipeNameContainsKeywordsPredicate implements Predicate\u003cRecipe\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public RecipeNameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public boolean test(Recipe recipe) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(recipe.getName().fullName, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                || (other instanceof RecipeNameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                \u0026\u0026 keywords.equals(((RecipeNameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 23,
      "bakwxh": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/recipe/UniqueRecipeList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "package seedu.address.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.recipe.exceptions.DuplicateRecipeException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.recipe.exceptions.RecipeNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bakwxh"
        },
        "content": " * A list of recipes that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bakwxh"
        },
        "content": " * A recipe is considered unique by comparing using {@code Recipe#isSamerecipe(Recipe)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bakwxh"
        },
        "content": " * recipes uses Recipe#isSameRecipe(Recipe) for equality so as to ensure that the recipe being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bakwxh"
        },
        "content": " * unique in terms of identity in the UniqueRecipeList. However, the removal of a recipe uses Recipe#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bakwxh"
        },
        "content": " * as to ensure that the recipe with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bakwxh"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bakwxh"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bakwxh"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bakwxh"
        },
        "content": " * @see Recipe#isSameRecipe(Recipe)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bakwxh"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "public class UniqueRecipeList implements Iterable\u003cRecipe\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    private final ObservableList\u003cRecipe\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    private final ObservableList\u003cRecipe\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * Returns true if the list contains an equivalent recipe as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public boolean contains(Recipe toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameRecipe);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * Adds a recipe to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * The recipe must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public void add(Recipe toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            throw new DuplicateRecipeException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * Replaces the recipe {@code target} in the list with {@code editedRecipe}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * The recipe identity of {@code editedRecipe} must not be the same as another existing recipe in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public void setRecipe(Recipe target, Recipe editedRecipe) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        requireAllNonNull(target, editedRecipe);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            throw new RecipeNotFoundException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        if (!target.isSameRecipe(editedRecipe) \u0026\u0026 contains(editedRecipe)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            throw new DuplicateRecipeException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        internalList.set(index, editedRecipe);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * Removes the equivalent recipe from the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * The recipe must exist in the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public void remove(Recipe toRemove) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            throw new RecipeNotFoundException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public void setRecipes(UniqueRecipeList replacement) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * Replaces the contents of this list with {@code recipes}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * {@code recipes} must not contain duplicate recipes."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public void setRecipes(List\u003cRecipe\u003e recipes) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        requireAllNonNull(recipes);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        if (!recipesAreUnique(recipes)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            throw new DuplicateRecipeException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        internalList.setAll(recipes);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public ObservableList\u003cRecipe\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public Iterator\u003cRecipe\u003e iterator() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                || (other instanceof UniqueRecipeList // instanceof handles nulls"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueRecipeList) other).internalList));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * Returns true if {@code recipes} contains only unique recipes."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    private boolean recipesAreUnique(List\u003cRecipe\u003e recipes) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        for (int i \u003d 0; i \u003c recipes.size() - 1; i++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            for (int j \u003d i + 1; j \u003c recipes.size(); j++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                if (recipes.get(i).isSameRecipe(recipes.get(j))) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bakwxh": 137
    }
  },
  {
    "path": "src/main/java/seedu/address/model/recipe/exceptions/DuplicateRecipeException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "package seedu.address.model.recipe.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bakwxh"
        },
        "content": " * Signals that the operation will result in duplicate Recipes (Recipes are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bakwxh"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bakwxh"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "public class DuplicateRecipeException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public DuplicateRecipeException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        super(\"Operation would result in duplicate recipes\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bakwxh": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/recipe/exceptions/RecipeNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "package seedu.address.model.recipe.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bakwxh"
        },
        "content": " * Signals that the operation is unable to find the specified recipe."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bakwxh"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "public class RecipeNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "bakwxh": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/records/Record.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "package seedu.address.model.records;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import seedu.address.logic.parser.DateParser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": " * Represents a Person in Duke Cooks."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "public class Record {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    private final int recordId;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    private final Type type;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    private final Value value;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    private final Timestamp timestamp;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public Record(Type type, Value value, Timestamp timestamp) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        this.recordId \u003d Objects.hash(timestamp.timestamp, DateParser.getCurrentTimestamp());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        this.value \u003d value;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        this.timestamp \u003d timestamp;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * Preassumptions: valid recordId generated and parse from Json."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public Record(String recordId, Type type, Value value, Timestamp timestamp) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        this.recordId \u003d Integer.parseInt(recordId);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        this.value \u003d value;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        this.timestamp \u003d timestamp;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public int getRecordId() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        return recordId;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public Type getType() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public Value getValue() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public Timestamp getTimestamp() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        return timestamp;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * Returns true if both records of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * This defines a weaker notion of equality between two records."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public boolean isSameRecord(Record otherRecord) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        if (otherRecord \u003d\u003d this) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        return otherRecord !\u003d null"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                \u0026\u0026 otherRecord.getRecordId() \u003d\u003d getRecordId();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * Returns true if both records have the same identity and data fields."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * This defines a stronger notion of equality between two records."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        if (!(other instanceof Record)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        Record otherRecord \u003d (Record) other;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        return otherRecord.getRecordId() \u003d\u003d getRecordId();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        return Objects.hash(recordId, type);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        builder.append(getRecordId())"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                .append(\" Type: \" + getType())"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                .append(\" Value: \" + getType() + getValue())"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                .append(\" Timestamp: \" + getTimestamp());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yyuanxin": 103,
      "bakwxh": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/records/Timestamp.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "package seedu.address.model.records;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import seedu.address.logic.parser.DateParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": " * Represents the user\u0027s timestamp of birth."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "public class Timestamp {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            \"Timestamp should only contain numeric characters in the format of DD/MM/YYYY HH:mm, \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                    + \"and it should not be blank\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public final String timestamp;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * Constructs a {@code timestamp}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * @param timestamp A valid timestamp in String form."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public Timestamp(String timestamp) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        requireNonNull(timestamp);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        checkArgument(isValidDateTime(timestamp), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        this.timestamp \u003d timestamp;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * Returns true if a given string is a valid timestamp."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public static boolean isValidDateTime(String timestamp) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        return DateParser.isValidDateTime(timestamp);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        return timestamp;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                || (other instanceof Timestamp // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                \u0026\u0026 timestamp.equals(((Timestamp) other).timestamp)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        return timestamp.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yyuanxin": 52,
      "bakwxh": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/records/Type.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "package seedu.address.model.records;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.model.records.util.TypeUtil.TYPE_LIST;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": " * Represents the type of health record."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "public class Type {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            \"Record type should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public final String type;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public final String unit;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * Constructs a {@code Type}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * @param type A valid type."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public Type(String type) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        requireNonNull(type);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        checkArgument(isValidType(type), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        this.unit \u003d TYPE_LIST.get(type);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * Returns true if a given string is a valid type."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public static boolean isValidType(String test) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        return TYPE_LIST.containsKey(test);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                || (other instanceof Type // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                \u0026\u0026 type.equals(((Type) other).type)); // state check"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        return type.hashCode();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yyuanxin": 52,
      "bakwxh": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/records/UniqueRecord.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "package seedu.address.model.records;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.records.exceptions.DuplicateRecordException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.records.exceptions.RecordNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": " * A list of records that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": " * A record is considered unique by comparing using {@code Record#isSameRecord(Record)}. As such, adding and updating of"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": " * records uses Record#isSameRecord(Record) for equality so as to ensure that the record being added or updated is"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": " * unique in terms of identity in the UniqueUserProfile. However, the removal of a record uses Record#equals(Object) so"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": " * as to ensure that the record with exactly the same fields will be removed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": " * @see Record#isSameRecord(Record)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "public class UniqueRecord implements Iterable\u003cRecord\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    private final ObservableList\u003cRecord\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    private final ObservableList\u003cRecord\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * Returns true if the list contains an equivalent record as the given argument."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public boolean contains(Record toCheck) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameRecord);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * Adds a new user profile if does not already exist."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * Behavior: If user profile exists, overwrite instead."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * Calls (@Method setRecord) to overwrite user profile if already exists."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public void add(Record toAdd) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            throw new DuplicateRecordException();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * Replaces the record {@code target} in the list with {@code editedRecord}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * The record identity of {@code editedRecord} must not be the same as another existing record in the list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public void setRecord(Record target, Record editedRecord) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        requireAllNonNull(target, editedRecord);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            throw new RecordNotFoundException();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        internalList.set(index, editedRecord);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * Removes the equivalent record from the list."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * The record must exist in the list."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public void remove(Record toRemove) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            throw new RecordNotFoundException();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public void setRecords(UniqueRecord replacement) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * Replaces the contents of this list with {@code records}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * {@code records} must not contain duplicate records."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public void setRecords(List\u003cRecord\u003e records) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        requireAllNonNull(records);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        if (!recordsAreUnique(records)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            throw new DuplicateRecordException();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        internalList.setAll(records);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public ObservableList\u003cRecord\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public Iterator\u003cRecord\u003e iterator() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                || (other instanceof UniqueRecord // instanceof handles nulls"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueRecord) other).internalList));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * Returns true if {@code records} contains only unique records."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    private boolean recordsAreUnique(List\u003cRecord\u003e records) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        for (int i \u003d 0; i \u003c records.size() - 1; i++) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            for (int j \u003d i + 1; j \u003c records.size(); j++) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                if (records.get(i).isSameRecord(records.get(j))) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yyuanxin": 132,
      "bakwxh": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/records/Value.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "package seedu.address.model.records;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": " * Represents User\u0027s input value for the record."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "public class Value {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            \"Value should only contain numeric characters\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[0-9]+\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public final int value;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * Constructs a {@code Value}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * @param value A valid value."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public Value(String value) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        requireNonNull(value);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        checkArgument(isValidNumber(value), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        this.value \u003d Integer.parseInt(value);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * Returns true if a given string is a valid number."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public static boolean isValidNumber(String test) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        return String.valueOf(value);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yyuanxin": 43,
      "bakwxh": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/records/exceptions/DuplicateRecordException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "package seedu.address.model.records.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": " * Signals that the operation will result in duplicate Persons (Persons are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "public class DuplicateRecordException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public DuplicateRecordException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        super(\"Operation would result in duplicate records\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yyuanxin": 10,
      "bakwxh": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/records/exceptions/RecordNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "package seedu.address.model.records.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": " * Signals that the operation is unable to find the specified record."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "public class RecordNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "yyuanxin": 5,
      "bakwxh": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/records/util/TypeUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "package seedu.address.model.records.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": " * Contains record types available for generating {@code HealthRecords}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "public class TypeUtil {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public static final String TYPE_BLOODPRESSURE \u003d \"bloodpressure\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public static final String TYPE_GLUCOSE \u003d \"glucose\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public static final String TYPE_WEIGHT \u003d \"weight\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public static final String TYPE_HEIGHT \u003d \"height\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public static final String TYPE_CALORIES \u003d \"calories\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public static final String UNIT_BLOODPRESSURE \u003d \"mmHg\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public static final String UNIT_GLUCOSE \u003d \"mmol/L\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public static final String UNIT_WEIGHT \u003d \"kg\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public static final String UNIT_HEIGHT \u003d \"cm\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public static final String UNIT_CALORIES \u003d \"kcal\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public static final HashMap\u003cString, String\u003e TYPE_LIST \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            new HashMap\u003c\u003e() {{"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                put(TYPE_BLOODPRESSURE, UNIT_BLOODPRESSURE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                put(TYPE_GLUCOSE, UNIT_GLUCOSE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                put(TYPE_WEIGHT, UNIT_WEIGHT);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                put(TYPE_HEIGHT, UNIT_HEIGHT);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                put(TYPE_CALORIES, UNIT_CALORIES);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            }};"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yyuanxin": 30,
      "bakwxh": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.HealthRecords;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.ReadOnlyHealthRecords;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.ReadOnlyUserProfile;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.ReadOnlyWorkoutPlanner;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.UserProfile;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.WorkoutPlanner;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.common.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.details.Distance;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.details.ExerciseDetail;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.details.ExerciseWeight;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.details.Repetitions;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.details.Sets;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.details.unit.DistanceUnit;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.details.unit.WeightUnit;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.exercise.ExerciseName;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.exercise.Intensity;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.exercise.MuscleType;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.exercise.MusclesTrained;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.medical.MedicalHistory;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.person.BloodType;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.person.DoB;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.person.Gender;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.person.Height;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.records.Record;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.records.Timestamp;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.records.Type;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.records.Value;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": " * Contains utility methods for populating {@code DukeCooks} with sample data."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public static Exercise[] getSampleExercises() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        return new Exercise[]{"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            new Exercise(new ExerciseName(\"Pushups\"),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                        getMuscleTrained(\"Chest\", \"Biceps\", \"Back\", \"Shoulders\"),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                        Intensity.HIGH,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                        getDetails(null, null, null, null, 30, 3)),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            new Exercise(new ExerciseName(\"Sprint Sets\"),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                        getMuscleTrained(\"Cardiovascular\", \"Thighs\", \"Calves\"),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                        Intensity.HIGH,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                        getDetails(null, null, (float) 400, DistanceUnit.METER, null, 8)),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            new Exercise(new ExerciseName(\"Planks\"),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                    getMuscleTrained(\"Abs\", \"Shoulders\"), Intensity.MEDIUM,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                    getDetails(null, null, null, null, 30, 3)),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            new Exercise(new ExerciseName(\"Bicep Curl\"),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                    getMuscleTrained(\"Biceps\"), Intensity.LOW,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                    getDetails((float) 10.0, WeightUnit.KILOGRAM, null, null, 12, 4)),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            new Exercise(new ExerciseName(\"Jumping Jacks\"),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                    getMuscleTrained(\"Cardiovascular\"), Intensity.MEDIUM,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                    getDetails(null, null, null, null, 100, null)),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            new Exercise(new ExerciseName(\"Weighted Sprints\"),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                    getMuscleTrained(\"Cardiovascular\", \"Thighs\", \"Hamstrings\", \"Calves\"),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                    Intensity.HIGH,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                    getDetails((float) 500, WeightUnit.GRAM, (float) 400, DistanceUnit.METER, null, 8))"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * Returns a MuscleTrained containing the primary muscles and list of secondary muscles given."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public static MusclesTrained getMuscleTrained(String primary, String... secondary) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        MuscleType primaryMuscle \u003d new MuscleType(primary);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        ArrayList\u003cMuscleType\u003e secondaryMuscles \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        secondaryMuscles.addAll(Arrays.stream(secondary).map(MuscleType::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        return new MusclesTrained(primaryMuscle, secondaryMuscles);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public static Set\u003cExerciseDetail\u003e getDetails(Float weight, WeightUnit weightUnit, Float distance,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                                                 DistanceUnit distanceUnit, Integer reps, Integer sets) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        Set\u003cExerciseDetail\u003e details \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        ExerciseWeight weightDetail \u003d weight \u003d\u003d null ? null : new ExerciseWeight(weight, weightUnit);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        Distance distanceDetail \u003d distance \u003d\u003d null ? null : new Distance(distance, distanceUnit);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        Repetitions repsDetail \u003d reps \u003d\u003d null ? null : new Repetitions(reps);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        Sets setsDetail \u003d sets \u003d\u003d null ? null : new Sets(sets);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        addIfNotNull(details, weightDetail);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        addIfNotNull(details, distanceDetail);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        addIfNotNull(details, repsDetail);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        addIfNotNull(details, setsDetail);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        return details;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * Checks if {@code detail} is null and adds to {@code details}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * if it isn\u0027t."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * @param details A set containing all the ExerciseDetails of an exercise"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * @param detail  A detail that is possibly null value"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public static void addIfNotNull(Set\u003cExerciseDetail\u003e details, ExerciseDetail detail) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        if (detail !\u003d null) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            details.add(detail);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Sample Person \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person[] getSamplePersons() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        return new Person[]{"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            new Person(new Name(\"Alex Yeoh\"),"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                new DoB(\"25/03/1997\"),"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                new Gender(\"male\"),"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                new BloodType(\"A+\"),"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                new seedu.address.model.person.Weight(\"70\", \"13/10/2019 1230\"),"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                new Height(\"180\", \"13/10/2019 1230\"),"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                getMedicalHistorySet(\"friends\"))"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public static ReadOnlyWorkoutPlanner getSampleWorkoutPlanner() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        WorkoutPlanner workoutPlanner \u003d new WorkoutPlanner();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        for (Exercise sampleExercise : getSampleExercises()) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            workoutPlanner.addExercise(sampleExercise);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        return workoutPlanner;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public static ReadOnlyUserProfile getSampleUserProfile() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        UserProfile sampleDc \u003d new UserProfile();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person samplePerson : getSamplePersons()) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            sampleDc.addPerson(samplePerson);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        return sampleDc;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public static Set\u003cMedicalHistory\u003e getMedicalHistorySet (String...strings) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "           .map(MedicalHistory::new)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "           .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Sample Record \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public static Record[] getSampleRecords () {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        return new Record[]{"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            new Record("
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            new Type(\"bloodpressure\"),"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            new Value(\"90\"),"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            new Timestamp(\"14/10/2019 01:10\"))"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        };"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public static ReadOnlyHealthRecords getSampleHealthRecords () {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        HealthRecords sampleDc \u003d new HealthRecords();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        for (Record sampleRecord : getSampleRecords()) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            sampleDc.addRecord(sampleRecord);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        return sampleDc;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yyuanxin": 32,
      "khairulazman1997": 87,
      "-": 31,
      "bakwxh": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleRecipeDataUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.ReadOnlyRecipeBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.RecipeBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.common.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.recipe.Calories;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.recipe.Carbs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.recipe.Fats;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.recipe.Ingredient;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.recipe.Protein;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bakwxh"
        },
        "content": " * Contains utility methods for populating {@code RecipeBook} with sample data."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bakwxh"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "public class SampleRecipeDataUtil {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public static Recipe[] getSampleRecipes() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        return new Recipe[] {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            new Recipe(new Name(\"Tea\"),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                getIngredientSet(\"Tea Leaves\"),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                    new Calories(\"0\"), new Carbs(\"0\"), new Fats(\"0\"), new Protein(\"0\")),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            new Recipe(new Name(\"Milo\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                getIngredientSet(\"Milo Powder\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                new Calories(\"180\"), new Carbs(\"29\"), new Fats(\"5\"), new Protein(\"5\")),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            new Recipe(new Name(\"Cheese Omelette\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                getIngredientSet(\"Eggs\", \"Cheese\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                    new Calories(\"358\"), new Carbs(\"1\"), new Fats(\"28\"), new Protein(\"21\")),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            new Recipe(new Name(\"Tuna Sandwich\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                getIngredientSet(\"Tuna\", \"Bread\", \"Mayonnaise\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                    new Calories(\"290\"), new Carbs(\"29\"), new Fats(\"10\"), new Protein(\"24\")),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            new Recipe(new Name(\"Chicken Maggi\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                getIngredientSet(\"Chicken Maggi\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                    new Calories(\"402\"), new Carbs(\"59\"), new Fats(\"15\"), new Protein(\"10\")),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            new Recipe(new Name(\"Fried Chicken\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                getIngredientSet(\"Chicken Wings\", \"Flour\", \"Oil\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                    new Calories(\"410\"), new Carbs(\"3\"), new Fats(\"29\"), new Protein(\"34\"))"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        };"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public static ReadOnlyRecipeBook getSampleRecipeBook() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        RecipeBook sampleDc \u003d new RecipeBook();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        for (Recipe sampleRecipe : getSampleRecipes()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            sampleDc.addRecipe(sampleRecipe);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        return sampleDc;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * Returns a ingredient set containing the list of strings given."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public static Set\u003cIngredient\u003e getIngredientSet(String... strings) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                .map(Ingredient::new)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bakwxh": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/HealthRecordsStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.HealthRecords;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.ReadOnlyHealthRecords;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": " * Represents a storage for {@link HealthRecords}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "public interface HealthRecordsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    Path getHealthRecordsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * Returns HealthRecords data as a {@link ReadOnlyHealthRecords}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    Optional\u003cReadOnlyHealthRecords\u003e readHealthRecords() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * @see #getHealthRecordsFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    Optional\u003cReadOnlyHealthRecords\u003e readHealthRecords(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * Saves the given {@link ReadOnlyHealthRecords} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * @param healthRecords cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    void saveHealthRecords(ReadOnlyHealthRecords healthRecords) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * @see #saveHealthRecords(ReadOnlyHealthRecords)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    void saveHealthRecords(ReadOnlyHealthRecords healthRecords, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yyuanxin": 44,
      "bakwxh": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedDistance.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonTypeInfo;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.logic.parser.WorkoutPlannerParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.details.Distance;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.details.ExerciseDetail;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.details.unit.DistanceUnit;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": " * Jackson-friendly version of {@link Distance}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "public class JsonAdaptedDistance\u003cFloat\u003e extends JsonAdaptedExerciseDetail {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    private final String unit;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * Constructs a {@code JsonAdaptedDistance} with the given {@code magnitude}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * and {@code unit}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public JsonAdaptedDistance(@JsonProperty(\"magnitude\") float magnitude,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                               @JsonProperty(\"unit\") DistanceUnit unit) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        this.magnitude \u003d magnitude;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        this.unit \u003d unit.toJson();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * Converts a given {@code Distance} into this class for Jackson use."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public JsonAdaptedDistance(Distance source) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        this.magnitude \u003d source.getMagnitude();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        this.unit \u003d source.getUnit().toJson();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * Configures the class type."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    @JsonTypeInfo(use \u003d JsonTypeInfo.Id.CLASS, property \u003d \"@class\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code ExerciseDetails} object."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public ExerciseDetail toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        DistanceUnit modelUnit \u003d WorkoutPlannerParserUtil.parseDistanceUnit(unit);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        return new Distance((java.lang.Float) magnitude, modelUnit);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulazman1997": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedExercise.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.logic.parser.WorkoutPlannerParserUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.details.Distance;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.details.ExerciseDetail;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.details.ExerciseWeight;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.details.Repetitions;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.details.Sets;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.exercise.ExerciseName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.exercise.Intensity;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.exercise.MuscleType;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.exercise.MusclesTrained;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": " * Jackson-friendly version of {@link Exercise}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "class JsonAdaptedExercise {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Exercise\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    private final String primaryMuscle;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    private final List\u003cJsonAdaptedMuscleType\u003e secondaryMuscles \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    private final String intensity;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    private final List\u003cJsonAdaptedExerciseDetail\u003e details \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * Constructs a {@code JsonAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public JsonAdaptedExercise(@JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                               @JsonProperty(\"primaryMuscle\") String primaryMuscle,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                               @JsonProperty(\"secondaryMuscles\") List\u003cJsonAdaptedMuscleType\u003e secondaryMuscles,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                               @JsonProperty(\"intensity\") String intensity,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                               @JsonProperty(\"details\") List\u003cJsonAdaptedExerciseDetail\u003e details) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        this.primaryMuscle \u003d primaryMuscle;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        if (secondaryMuscles !\u003d null) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            this.secondaryMuscles.addAll(secondaryMuscles);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        this.intensity \u003d intensity;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        if (details !\u003d null) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            this.details.addAll(details);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * Converts a given {@code Person} into this class for Jackson use."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public JsonAdaptedExercise(Exercise source) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        name \u003d source.getExerciseName().exerciseName;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        intensity \u003d source.getIntensity().toString();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        primaryMuscle \u003d source.getMusclesTrained().getPrimaryMuscle().toString();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        secondaryMuscles.addAll(source.getMusclesTrained().getSecondaryMuscles().stream()"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                .map(JsonAdaptedMuscleType::new)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        details.addAll(source.getExerciseDetails().stream()"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                .map(exerciseDetail -\u003e {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                    return toAdaptedJson(exerciseDetail);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                })"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * Converts an Exercise Detail into its corresponding Json-Adapted class"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * @param detail The exercise detail to be converted"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * @return returns an JsonAdaptedExerciseDetail that is of the correct class"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    private JsonAdaptedExerciseDetail toAdaptedJson (ExerciseDetail detail) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        if (detail instanceof ExerciseWeight) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            return new JsonAdaptedWeight((ExerciseWeight) detail);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        } else if (detail instanceof Distance) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            return new JsonAdaptedDistance((Distance) detail);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        } else if (detail instanceof Repetitions) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            return new JsonAdaptedRepetitions((Repetitions) detail);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            return new JsonAdaptedSets((Sets) detail);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public Exercise toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        final List\u003cExerciseDetail\u003e exerciseDetails \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        for (JsonAdaptedExerciseDetail detail : details) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            exerciseDetails.add(detail.toModelType());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        final ArrayList\u003cMuscleType\u003e secondaryMuscles \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        for (JsonAdaptedMuscleType muscleType : this.secondaryMuscles) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            secondaryMuscles.add(muscleType.toModelType());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            throw new IllegalValueException(String"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                    .format(MISSING_FIELD_MESSAGE_FORMAT, ExerciseName.class.getSimpleName()));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        if (!ExerciseName.isValidName(name)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            throw new IllegalValueException(ExerciseName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        final ExerciseName modelExerciseName \u003d new ExerciseName(name);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        if (primaryMuscle \u003d\u003d null) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                    MuscleType.class.getSimpleName()));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        if (!MuscleType.isValidMuscleType(primaryMuscle)) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            throw new IllegalValueException(ExerciseName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        final MuscleType modelPrimaryMuscle \u003d new MuscleType(primaryMuscle);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        if (intensity \u003d\u003d null) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                    Intensity.class.getSimpleName()));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        if (!Intensity.isValidIntensity(intensity)) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            throw new IllegalValueException(ExerciseName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        final Intensity modelIntensity \u003d WorkoutPlannerParserUtil.parseIntensity(intensity);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        MusclesTrained modelMuscleTrained \u003d new MusclesTrained(modelPrimaryMuscle, secondaryMuscles);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        final Set\u003cExerciseDetail\u003e modelExerciseDetails \u003d new HashSet\u003c\u003e(exerciseDetails);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        return new Exercise(modelExerciseName, modelMuscleTrained, modelIntensity, modelExerciseDetails);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulazman1997": 141
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedExerciseDetail.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonSubTypes;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonTypeInfo;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.details.ExerciseDetail;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": " * Jackson-friendly version of {@link ExerciseDetail}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "@JsonTypeInfo(use \u003d JsonTypeInfo.Id.NAME, include \u003d JsonTypeInfo.As.PROPERTY, property \u003d \"typ\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "@JsonSubTypes({"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        @JsonSubTypes.Type(value \u003d JsonAdaptedSets.class, name \u003d \"SET\"),"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        @JsonSubTypes.Type(value \u003d JsonAdaptedDistance.class, name \u003d \"DST\"),"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        @JsonSubTypes.Type(value \u003d JsonAdaptedRepetitions.class, name \u003d \"REP\"),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        @JsonSubTypes.Type(value \u003d JsonAdaptedWeight.class, name \u003d \"WGT\")}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "abstract class JsonAdaptedExerciseDetail\u003cT\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    protected T magnitude;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code ExerciseDetail} object."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted exercise detail."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    abstract ExerciseDetail toModelType() throws IllegalValueException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulazman1997": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedIngredient.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.recipe.Ingredient;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bakwxh"
        },
        "content": " * Jackson-friendly version of {@link Ingredient}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bakwxh"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "class JsonAdaptedIngredient {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    private final String ingredientName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * Constructs a {@code JsonAdaptedIngredient} with the given {@code ingredientName}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public JsonAdaptedIngredient(String ingredientName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        this.ingredientName \u003d ingredientName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * Converts a given {@code Ingredient} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public JsonAdaptedIngredient(Ingredient source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        ingredientName \u003d source.ingredientName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public String getIngredientName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        return ingredientName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * Converts this Jackson-friendly adapted ingredient object into the model\u0027s {@code Ingredient} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted ingredient."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public Ingredient toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        if (!Ingredient.isValidIngredientName(ingredientName)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            throw new IllegalValueException(Ingredient.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        return new Ingredient(ingredientName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bakwxh": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedMedicalHistory.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.medical.MedicalHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": " * Jackson-friendly version of {@link MedicalHistory}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "class JsonAdaptedMedicalHistory {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    private final String medicalHistoryName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * Constructs a {@code JsonAdaptedMedicalHistory} with the given {@code medicalHistoryName}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public JsonAdaptedMedicalHistory(String medicalHistoryName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        this.medicalHistoryName \u003d medicalHistoryName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * Converts a given {@code MedicalHistory} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public JsonAdaptedMedicalHistory(MedicalHistory source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        medicalHistoryName \u003d source.medicalHistoryName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public String getTagName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        return medicalHistoryName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code MedicalHistory} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public MedicalHistory toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        if (!MedicalHistory.isValidMedicalHistoryName(medicalHistoryName)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            throw new IllegalValueException(MedicalHistory.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        return new MedicalHistory(medicalHistoryName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yyuanxin": 47,
      "bakwxh": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedMuscleType.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.exercise.MuscleType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": " * Jackson-friendly version of {@link MuscleType}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "public class JsonAdaptedMuscleType {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    private final String muscleType;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * Constructs a {@code JsonAdaptedMuscleType} with the given {@code muscleType}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public JsonAdaptedMuscleType(String muscleType) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        this.muscleType \u003d muscleType;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * Converts a given {@code MuscleType} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public JsonAdaptedMuscleType (MuscleType source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        muscleType \u003d source.getMuscleType();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public String getMuscleType() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        return muscleType;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code MuscleType} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted MuscleType."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public MuscleType toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        if (!MuscleType.isValidMuscleType(muscleType)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            throw new IllegalValueException(MuscleType.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        return new MuscleType(muscleType);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulazman1997": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedPerson.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.common.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.medical.MedicalHistory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.person.BloodType;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.person.DoB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.person.Gender;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.person.Height;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.person.Weight;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Person}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedPerson {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    private final String dateOfBirth;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    private final String gender;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    private final String bloodGroup;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    private final String weight;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    private final String weightTimestamp;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    private final String heightTimestamp;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    private final String height;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    private final List\u003cJsonAdaptedMedicalHistory\u003e medicalHistories \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bigjunnn"
        },
        "content": "    public JsonAdaptedPerson(@JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            @JsonProperty(\"dateOfBirth\") String dateOfBirth,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            @JsonProperty(\"gender\") String gender,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            @JsonProperty(\"bloodGroup\") String bloodGroup,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            @JsonProperty(\"weight\") String weight,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            @JsonProperty(\"weightTimestamp\") String weightTimestamp,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            @JsonProperty(\"height\") String height,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            @JsonProperty(\"heightTimestamp\") String heightTimestamp,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            @JsonProperty(\"medicalHistories\") List\u003cJsonAdaptedMedicalHistory\u003e medicalHistories) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        this.dateOfBirth \u003d dateOfBirth;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        this.gender \u003d gender;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        this.bloodGroup \u003d bloodGroup;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        this.weight \u003d weight;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        this.weightTimestamp \u003d weightTimestamp;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        this.height \u003d height;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        this.heightTimestamp \u003d heightTimestamp;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        if (medicalHistories !\u003d null) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            this.medicalHistories.addAll(medicalHistories);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Person} into this class for Jackson use."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedPerson(Person source) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        dateOfBirth \u003d source.getDateOfBirth().dateOfBirth;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        gender \u003d source.getGender().gender;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        bloodGroup \u003d source.getBloodType().bloodGroup;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        weight \u003d String.valueOf(source.getWeight().weight);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        weightTimestamp \u003d source.getWeight().timestamp;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        height \u003d String.valueOf(source.getHeight().height);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        heightTimestamp \u003d source.getHeight().timestamp;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        medicalHistories.addAll(source.getMedicalHistories().stream()"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                .map(JsonAdaptedMedicalHistory::new)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        final List\u003cMedicalHistory\u003e personMedicalHistories \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        for (JsonAdaptedMedicalHistory tag : medicalHistories) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            personMedicalHistories.add(tag.toModelType());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        if (dateOfBirth \u003d\u003d null) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, DoB.class.getSimpleName()));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        if (!DoB.isValidDate(dateOfBirth)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            throw new IllegalValueException(DoB.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        final DoB modelDateOfBirth \u003d new DoB(dateOfBirth);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        if (gender \u003d\u003d null) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Gender.class.getSimpleName()));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        if (!Gender.isValidGender(gender)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            throw new IllegalValueException(Gender.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        final Gender modelGender \u003d new Gender(gender);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        if (bloodGroup \u003d\u003d null) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                    BloodType.class.getSimpleName()));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        if (!BloodType.isValidBloodType(bloodGroup)) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            throw new IllegalValueException(BloodType.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        final BloodType modelBloodType \u003d new BloodType(bloodGroup);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        if (weight \u003d\u003d null) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Weight.class.getSimpleName()));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        if (!Weight.isValidNumber(weight)) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            throw new IllegalValueException(Weight.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        final Weight modelWeight \u003d new Weight(weight, weightTimestamp);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        if (height \u003d\u003d null) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Height.class.getSimpleName()));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        if (!Height.isValidNumber(height)) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            throw new IllegalValueException(Height.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        final Height modelHeight \u003d new Height(height, heightTimestamp);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        final Set\u003cMedicalHistory\u003e modelMedicalHistories \u003d new HashSet\u003c\u003e(personMedicalHistories);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        return new Person(modelName, modelDateOfBirth, modelGender, modelBloodType,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                modelWeight, modelHeight, modelMedicalHistories);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bigjunnn": 1,
      "yyuanxin": 73,
      "-": 67,
      "bakwxh": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedRecipe.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.common.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.recipe.Calories;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.recipe.Carbs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.recipe.Fats;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.recipe.Ingredient;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.recipe.Protein;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bakwxh"
        },
        "content": " * Jackson-friendly version of {@link Recipe}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "class JsonAdaptedRecipe {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Recipe\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    private final String calories;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    private final String carbs;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    private final String fats;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    private final String protein;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    private final List\u003cJsonAdaptedIngredient\u003e ingredients \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * Constructs a {@code JsonAdaptedRecipe} with the given recipe details."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public JsonAdaptedRecipe(@JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                             @JsonProperty(\"ingredients\") List\u003cJsonAdaptedIngredient\u003e ingredients,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                             @JsonProperty(\"calories\") String calories,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                             @JsonProperty(\"carbs\") String carbs,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                             @JsonProperty(\"fats\") String fats,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                             @JsonProperty(\"protein\") String protein) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        if (ingredients !\u003d null) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            this.ingredients.addAll(ingredients);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        this.calories \u003d calories;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        this.carbs \u003d carbs;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        this.fats \u003d fats;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        this.protein \u003d protein;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * Converts a given {@code Recipe} into this class for Jackson use."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public JsonAdaptedRecipe(Recipe source) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        calories \u003d source.getCalories().value;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        carbs \u003d source.getCarbs().value;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        fats \u003d source.getFats().value;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        protein \u003d source.getProtein().value;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        ingredients.addAll(source.getIngredients().stream()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                .map(JsonAdaptedIngredient::new)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * Converts this Jackson-friendly adapted recipe object into the model\u0027s {@code Recipe} object."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted recipe."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public Recipe toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        final List\u003cIngredient\u003e recipeIngredients \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        for (JsonAdaptedIngredient ingredient : ingredients) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            recipeIngredients.add(ingredient.toModelType());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        if (calories \u003d\u003d null) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                    Calories.class.getSimpleName()));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        if (!Calories.isValidCalories(calories)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            throw new IllegalValueException(Calories.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        final Calories modelCalories \u003d new Calories(calories);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        if (carbs \u003d\u003d null) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Carbs.class.getSimpleName()));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        if (!Carbs.isValidCarbs(carbs)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            throw new IllegalValueException(Carbs.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        final Carbs modelCarbs \u003d new Carbs(carbs);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        if (fats \u003d\u003d null) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Fats.class.getSimpleName()));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        if (!Fats.isValidFats(fats)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            throw new IllegalValueException(Fats.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        final Fats modelFats \u003d new Fats(fats);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        if (protein \u003d\u003d null) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Protein.class.getSimpleName()));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        if (!Protein.isValidProtein(protein)) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            throw new IllegalValueException(Protein.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        final Protein modelProtein \u003d new Protein(protein);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        final Set\u003cIngredient\u003e modelIngredients \u003d new HashSet\u003c\u003e(recipeIngredients);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        return new Recipe(modelName, modelIngredients, modelCalories, modelCarbs, modelFats, modelProtein);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 47,
      "bakwxh": 78
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedRecord.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.records.Record;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.records.Timestamp;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.records.Type;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.records.Value;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": " * Jackson-friendly version of {@link Record}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "class JsonAdaptedRecord {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Record\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    private final String recordId;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    private final String type;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    private final String value;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    private final String timestamp;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * Constructs a {@code JsonAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public JsonAdaptedRecord(@JsonProperty(\"recordId\") String recordId,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                             @JsonProperty(\"type\") String type,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                             @JsonProperty(\"value\") String value,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                             @JsonProperty(\"timestamp\") String timestamp) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        this.recordId \u003d recordId;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        this.value \u003d value;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        this.timestamp \u003d timestamp;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * Converts a given {@code Record} into this class for Jackson use."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public JsonAdaptedRecord(Record source) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        recordId \u003d String.valueOf(source.getRecordId());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        type \u003d source.getType().type;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        value \u003d String.valueOf(source.getValue().value);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        timestamp \u003d source.getTimestamp().timestamp;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Record} object."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public Record toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        if (recordId \u003d\u003d null) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Record.class.getSimpleName()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        final String modelRecordId \u003d recordId;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        if (type \u003d\u003d null) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Type.class.getSimpleName()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        if (!Type.isValidType(type)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            throw new IllegalValueException(Type.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        final Type modelType \u003d new Type(type);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        if (value \u003d\u003d null) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Value.class.getSimpleName()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        if (!Value.isValidNumber(value)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            throw new IllegalValueException(Value.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        final Value modelValue \u003d new Value(value);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        if (timestamp \u003d\u003d null) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                    Timestamp.class.getSimpleName()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        if (!Timestamp.isValidDateTime(timestamp)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            throw new IllegalValueException(Timestamp.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        final Timestamp modelTimestamp \u003d new Timestamp(timestamp);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        return new Record(modelRecordId, modelType, modelValue, modelTimestamp);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yyuanxin": 84,
      "bakwxh": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedRepetitions.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonTypeInfo;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.details.ExerciseDetail;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.details.Repetitions;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": " * Jackson-friendly version of {@link Repetitions}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "public class JsonAdaptedRepetitions\u003cInteger\u003e extends JsonAdaptedExerciseDetail {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * Constructs a {@code JsonAdaptedRepetitions} with the given {@code magnitude}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * and {@code unit}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public JsonAdaptedRepetitions(@JsonProperty(\"magnitude\") int magnitude) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        this.magnitude \u003d magnitude;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * Converts a given {@code Weight} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * @param source"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public JsonAdaptedRepetitions(Repetitions source) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        this.magnitude \u003d source.getMagnitude();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    @JsonTypeInfo(use \u003d JsonTypeInfo.Id.CLASS, property \u003d \"@class\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code ExerciseDetail} object."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public ExerciseDetail toModelType() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        return new Repetitions((java.lang.Integer) magnitude);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulazman1997": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedSets.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonTypeInfo;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.details.ExerciseDetail;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.details.Sets;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": " * Jackson-friendly version of {@link Sets}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "public class JsonAdaptedSets\u003cInteger\u003e extends JsonAdaptedExerciseDetail {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * Constructs a {@code JsonAdaptedRepetitions} with the given {@code magnitude}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * and {@code unit}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public JsonAdaptedSets(@JsonProperty(\"magnitude\") int magnitude) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        this.magnitude \u003d magnitude;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * Converts a given {@code Weight} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * @param source"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public JsonAdaptedSets(Sets source) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        this.magnitude \u003d source.getMagnitude();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    @JsonTypeInfo(use \u003d JsonTypeInfo.Id.CLASS, property \u003d \"@class\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code ExerciseDetail} object."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public ExerciseDetail toModelType() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        return new Sets((java.lang.Integer) magnitude);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulazman1997": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedWeight.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonTypeInfo;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.logic.parser.WorkoutPlannerParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.details.ExerciseDetail;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.details.ExerciseWeight;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.details.unit.WeightUnit;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": " * Jackson-friendly version of {@link ExerciseWeight}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "public class JsonAdaptedWeight\u003cFloat\u003e extends JsonAdaptedExerciseDetail {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    private final String unit;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * Constructs a {@code JsonAdaptedWeight} with the given {@code magnitude}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * and {@code unit}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public JsonAdaptedWeight(@JsonProperty(\"magnitude\") float magnitude,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                             @JsonProperty(\"unit\") WeightUnit unit) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        this.magnitude \u003d magnitude;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        this.unit \u003d unit.toJson();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * Converts a given {@code Weight} into this class for Jackson use."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public JsonAdaptedWeight(ExerciseWeight source) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        this.magnitude \u003d source.getMagnitude();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        this.unit \u003d source.getUnit().toJson();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * Configures the class type."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    @JsonTypeInfo(use \u003d JsonTypeInfo.Id.CLASS, property \u003d \"@class\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code ExerciseDetail} object."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public ExerciseDetail toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        WeightUnit modelUnit \u003d WorkoutPlannerParserUtil.parseWeightUnit(unit);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        return new ExerciseWeight((java.lang.Float) magnitude, modelUnit);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulazman1997": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonHealthRecordsStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.ReadOnlyHealthRecords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": " * A class to access HealthRecords data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "public class JsonHealthRecordsStorage implements HealthRecordsStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonHealthRecordsStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public JsonHealthRecordsStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public Path getHealthRecordsFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public Optional\u003cReadOnlyHealthRecords\u003e readHealthRecords() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        return readHealthRecords(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * Similar to {@link #readHealthRecords()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public Optional\u003cReadOnlyHealthRecords\u003e readHealthRecords(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        Optional\u003cJsonSerializableHealthRecords\u003e jsonHealthRecords \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                filePath, JsonSerializableHealthRecords.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        if (!jsonHealthRecords.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            return Optional.of(jsonHealthRecords.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public void saveHealthRecords(ReadOnlyHealthRecords healthRecords) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        saveHealthRecords(healthRecords, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * Similar to {@link #saveHealthRecords(ReadOnlyHealthRecords)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public void saveHealthRecords(ReadOnlyHealthRecords healthRecords, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        requireNonNull(healthRecords);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableHealthRecords(healthRecords), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yyuanxin": 79,
      "bakwxh": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonRecipeBookStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.ReadOnlyRecipeBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bakwxh"
        },
        "content": " * A class to access RecipeBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "public class JsonRecipeBookStorage implements RecipeBookStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonRecipeBookStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public JsonRecipeBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public Path getRecipesFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public Optional\u003cReadOnlyRecipeBook\u003e readRecipeBook() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        return readRecipeBook(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * Similar to {@link #readRecipeBook()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public Optional\u003cReadOnlyRecipeBook\u003e readRecipeBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        Optional\u003cJsonSerializableRecipeBook\u003e jsonRecipeBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                filePath, JsonSerializableRecipeBook.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        if (!jsonRecipeBook.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            return Optional.of(jsonRecipeBook.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public void saveRecipeBook(ReadOnlyRecipeBook recipeBook) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        saveRecipeBook(recipeBook, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * Similar to {@link #saveRecipeBook(ReadOnlyRecipeBook)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public void saveRecipeBook(ReadOnlyRecipeBook recipeBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        requireNonNull(recipeBook);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableRecipeBook(recipeBook), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 60,
      "bakwxh": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableExerciseCatalogue.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.ReadOnlyWorkoutPlanner;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.WorkoutPlanner;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": " * An Immutable Exercise Catalogue that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "@JsonRootName(value \u003d \"exercisecatalogue\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "class JsonSerializableExerciseCatalogue {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Exercises list contains duplicate person(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    private final List\u003cJsonAdaptedExercise\u003e exercises \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * Constructs a {@code JsonSerializableExerciseCatalogue} with the given persons."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public JsonSerializableExerciseCatalogue(@JsonProperty(\"exercises\") List\u003cJsonAdaptedExercise\u003e exercises) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        this.exercises.addAll(exercises);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    * Converts a given {@code ReadOnlyDukeCooks} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    * @param source future changes to this will not affect the created {@code JsonSerializableExerciseCatalogue}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public JsonSerializableExerciseCatalogue(ReadOnlyWorkoutPlanner source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        exercises.addAll(source.getExerciseList().stream().map(JsonAdaptedExercise::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    *  Converts this Exercise Catalogue into the model\u0027s {@code DukeCooks} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public WorkoutPlanner toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        WorkoutPlanner dukeCooks \u003d new WorkoutPlanner();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        for (JsonAdaptedExercise jsonAdaptedExercise : exercises) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            Exercise exercise \u003d jsonAdaptedExercise.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            if (dukeCooks.hasExercise(exercise)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            dukeCooks.addExercise(exercise);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        return dukeCooks;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulazman1997": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableHealthRecords.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.HealthRecords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.ReadOnlyHealthRecords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.records.Record;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": " * An Immutable Health Records that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "@JsonRootName(value \u003d \"healthrecords\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "class JsonSerializableHealthRecords {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_RECORD \u003d \"Record List contains duplicate record(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    private final List\u003cJsonAdaptedRecord\u003e healthrecords \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * Constructs a {@code JsonSerializableUserProfile} with the given healthrecords."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public JsonSerializableHealthRecords(@JsonProperty(\"healthrecords\") List\u003cJsonAdaptedRecord\u003e person) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        this.healthrecords.addAll(person);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    * Converts a given {@code ReadOnlyUserProfile} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    * @param source future changes to this will not affect the created {@code JsonSerializableUserProfile}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public JsonSerializableHealthRecords(ReadOnlyHealthRecords source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        healthrecords.addAll(source.getHealthRecordsList().stream().map(JsonAdaptedRecord::new)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    *  Converts this Health Records into the model\u0027s {@code HealthRecords} object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public HealthRecords toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        HealthRecords healthRecords \u003d new HealthRecords();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        for (JsonAdaptedRecord jsonAdaptedRecord : healthrecords) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            Record record \u003d jsonAdaptedRecord.toModelType();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            healthRecords.addRecord(record);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        return healthRecords;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yyuanxin": 54,
      "bakwxh": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableRecipeBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.ReadOnlyRecipeBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.RecipeBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": " * An Immutable Exercise Catalogue that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "@JsonRootName(value \u003d \"exercisecatalogue\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "class JsonSerializableRecipeBook {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_RECIPE \u003d \"Recipes list contains duplicate recipe(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    private final List\u003cJsonAdaptedRecipe\u003e recipes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * Constructs a {@code JsonSerializableRecipeBook} with the given recipes."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public JsonSerializableRecipeBook(@JsonProperty(\"recipes\") List\u003cJsonAdaptedRecipe\u003e recipes) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        this.recipes.addAll(recipes);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    * Converts a given {@code ReadOnlyRecipeBook} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    * @param source future changes to this will not affect the created {@code JsonSerializableRecipeBook}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public JsonSerializableRecipeBook(ReadOnlyRecipeBook source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        recipes.addAll(source.getRecipeList().stream().map(JsonAdaptedRecipe::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    *  Converts this Exercise Catalogue into the model\u0027s {@code RecipeBook} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public RecipeBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        RecipeBook recipeBook \u003d new RecipeBook();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        for (JsonAdaptedRecipe jsonAdaptedRecipe : recipes) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            Recipe recipe \u003d jsonAdaptedRecipe.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            if (recipeBook.hasRecipe(recipe)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_RECIPE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            recipeBook.addRecipe(recipe);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        return recipeBook;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulazman1997": 37,
      "bakwxh": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableUserProfile.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.ReadOnlyUserProfile;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.UserProfile;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": " * An Immutable User Profile that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "@JsonRootName(value \u003d \"userprofile\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "class JsonSerializableUserProfile {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Persons list contains duplicate person(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    private final List\u003cJsonAdaptedPerson\u003e userprofile \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * Constructs a {@code JsonSerializableUserProfile} with the given userprofile."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public JsonSerializableUserProfile(@JsonProperty(\"userprofile\") List\u003cJsonAdaptedPerson\u003e person) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        this.userprofile.addAll(person);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    * Converts a given {@code ReadOnlyUserProfile} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    * @param source future changes to this will not affect the created {@code JsonSerializableUserProfile}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public JsonSerializableUserProfile(ReadOnlyUserProfile source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        userprofile.addAll(source.getUserProfileList().stream().map(JsonAdaptedPerson::new)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    *  Converts this User Profile into the model\u0027s {@code UserProfile} object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public UserProfile toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        UserProfile userProfile \u003d new UserProfile();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        for (JsonAdaptedPerson jsonAdaptedPerson : userprofile) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            Person person \u003d jsonAdaptedPerson.toModelType();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            userProfile.addPerson(person);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        return userProfile;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yyuanxin": 54,
      "bakwxh": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonUserProfileStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.ReadOnlyUserProfile;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": " * A class to access UserProfile data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "public class JsonUserProfileStorage implements UserProfileStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUserProfileStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public JsonUserProfileStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public Path getUserProfileFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public Optional\u003cReadOnlyUserProfile\u003e readUserProfile() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        return readUserProfile(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * Similar to {@link #readUserProfile()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public Optional\u003cReadOnlyUserProfile\u003e readUserProfile(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        Optional\u003cJsonSerializableUserProfile\u003e jsonUserProfile \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                filePath, JsonSerializableUserProfile.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        if (!jsonUserProfile.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            return Optional.of(jsonUserProfile.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public void saveUserProfile(ReadOnlyUserProfile userProfile) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        saveUserProfile(userProfile, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * Similar to {@link #saveUserProfile(ReadOnlyUserProfile)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public void saveUserProfile(ReadOnlyUserProfile userProfile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        requireNonNull(userProfile);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableUserProfile(userProfile), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yyuanxin": 19,
      "-": 60,
      "bakwxh": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonWorkoutPlannerStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.ReadOnlyWorkoutPlanner;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": " * A class to access DukeCooks data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "public class JsonWorkoutPlannerStorage implements WorkoutPlannerStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonWorkoutPlannerStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public JsonWorkoutPlannerStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public Path getWorkoutPlannerFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public Optional\u003cReadOnlyWorkoutPlanner\u003e readWorkoutPlanner() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        return readWorkoutPlanner(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * Similar to {@link #readWorkoutPlanner()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public Optional\u003cReadOnlyWorkoutPlanner\u003e readWorkoutPlanner(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        Optional\u003cJsonSerializableExerciseCatalogue\u003e jsonDukeCooks \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                filePath, JsonSerializableExerciseCatalogue.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        if (!jsonDukeCooks.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            return Optional.of(jsonDukeCooks.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public void saveWorkoutPlanner(ReadOnlyWorkoutPlanner dukeCooks) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        saveWorkoutPlanner(dukeCooks, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * Similar to {@link #saveWorkoutPlanner(ReadOnlyWorkoutPlanner)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public void saveWorkoutPlanner(ReadOnlyWorkoutPlanner dukeCooks, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        requireNonNull(dukeCooks);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableExerciseCatalogue(dukeCooks), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulazman1997": 20,
      "-": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/RecipeBookStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.ReadOnlyRecipeBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.RecipeBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bakwxh"
        },
        "content": " * Represents a storage for {@link RecipeBook}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bakwxh"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "public interface RecipeBookStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    Path getRecipesFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * Returns RecipeBook data as a {@link ReadOnlyRecipeBook}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    Optional\u003cReadOnlyRecipeBook\u003e readRecipeBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * @see #getRecipesFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    Optional\u003cReadOnlyRecipeBook\u003e readRecipeBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * Saves the given {@link ReadOnlyRecipeBook} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * @param recipeBook cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    void saveRecipeBook(ReadOnlyRecipeBook recipeBook) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * @see #saveRecipeBook(ReadOnlyRecipeBook)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    void saveRecipeBook(ReadOnlyRecipeBook recipeBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bakwxh": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.ReadOnlyHealthRecords;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.ReadOnlyRecipeBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.ReadOnlyUserProfile;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.ReadOnlyWorkoutPlanner;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "public interface Storage extends RecipeBookStorage, UserPrefsStorage,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        UserProfileStorage, WorkoutPlannerStorage, HealthRecordsStorage {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserProfile methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    Path getUserProfileFilePath();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    Path getRecipesFilePath();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    Optional\u003cReadOnlyWorkoutPlanner\u003e readWorkoutPlanner() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    Optional\u003cReadOnlyUserProfile\u003e readUserProfile() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    void saveWorkoutPlanner(ReadOnlyWorkoutPlanner dukeCooks) throws IOException;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    Optional\u003cReadOnlyRecipeBook\u003e readRecipeBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    void saveUserProfile(ReadOnlyUserProfile dukeCooks) throws IOException;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Health Records methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    Path getHealthRecordsFilePath();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    Optional\u003cReadOnlyHealthRecords\u003e readHealthRecords() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    void saveHealthRecords(ReadOnlyHealthRecords healthRecords) throws IOException;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    void saveRecipeBook(ReadOnlyRecipeBook recipeBook) throws IOException;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yyuanxin": 12,
      "khairulazman1997": 6,
      "-": 35,
      "bakwxh": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.ReadOnlyHealthRecords;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.ReadOnlyRecipeBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.ReadOnlyUserProfile;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.ReadOnlyWorkoutPlanner;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bakwxh"
        },
        "content": " * Manages storage of DukeCooks data in local storage."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    private UserProfileStorage userProfileStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    private HealthRecordsStorage healthRecordsStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    private RecipeBookStorage recipeBookStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    private WorkoutPlannerStorage workoutPlannerStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public StorageManager(UserProfileStorage userProfileStorage, HealthRecordsStorage healthRecordsStorage,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                          RecipeBookStorage recipeBookStorage, WorkoutPlannerStorage workoutPlannerStorage,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                          UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        this.userProfileStorage \u003d userProfileStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        this.healthRecordsStorage \u003d healthRecordsStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        this.recipeBookStorage \u003d recipeBookStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        this.workoutPlannerStorage \u003d workoutPlannerStorage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserProfile methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public Path getUserProfileFilePath() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        return userProfileStorage.getUserProfileFilePath();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public Optional\u003cReadOnlyUserProfile\u003e readUserProfile() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        return readUserProfile(userProfileStorage.getUserProfileFilePath());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public Optional\u003cReadOnlyUserProfile\u003e readUserProfile(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        return userProfileStorage.readUserProfile(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public void saveUserProfile(ReadOnlyUserProfile dukeCooks) throws IOException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        saveUserProfile(dukeCooks, userProfileStorage.getUserProfileFilePath());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public void saveUserProfile(ReadOnlyUserProfile dukeCooks, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        userProfileStorage.saveUserProfile(dukeCooks, filePath);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Health Records methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public Path getHealthRecordsFilePath() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        return healthRecordsStorage.getHealthRecordsFilePath();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public Optional\u003cReadOnlyHealthRecords\u003e readHealthRecords() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        return readHealthRecords(healthRecordsStorage.getHealthRecordsFilePath());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public Optional\u003cReadOnlyHealthRecords\u003e readHealthRecords(Path filePath)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        return healthRecordsStorage.readHealthRecords(filePath);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public void saveHealthRecords(ReadOnlyHealthRecords healthRecords) throws IOException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        saveHealthRecords(healthRecords, healthRecordsStorage.getHealthRecordsFilePath());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public void saveHealthRecords(ReadOnlyHealthRecords healthRecords, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        healthRecordsStorage.saveHealthRecords(healthRecords, filePath);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d RecipeBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public Path getRecipesFilePath() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        return recipeBookStorage.getRecipesFilePath();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public Optional\u003cReadOnlyRecipeBook\u003e readRecipeBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        return readRecipeBook(recipeBookStorage.getRecipesFilePath());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public Optional\u003cReadOnlyRecipeBook\u003e readRecipeBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        return recipeBookStorage.readRecipeBook(filePath);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public void saveRecipeBook(ReadOnlyRecipeBook recipeBook) throws IOException {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        saveRecipeBook(recipeBook, recipeBookStorage.getRecipesFilePath());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public void saveRecipeBook(ReadOnlyRecipeBook recipeBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        recipeBookStorage.saveRecipeBook(recipeBook, filePath);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Workout Planner methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public Path getWorkoutPlannerFilePath() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        return workoutPlannerStorage.getWorkoutPlannerFilePath();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public Optional\u003cReadOnlyWorkoutPlanner\u003e readWorkoutPlanner() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        return readWorkoutPlanner(workoutPlannerStorage.getWorkoutPlannerFilePath());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public Optional\u003cReadOnlyWorkoutPlanner\u003e readWorkoutPlanner(Path filePath)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        return workoutPlannerStorage.readWorkoutPlanner(filePath);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public void saveWorkoutPlanner(ReadOnlyWorkoutPlanner workoutPlanner) throws IOException {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        saveWorkoutPlanner(workoutPlanner, workoutPlannerStorage.getWorkoutPlannerFilePath());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public void saveWorkoutPlanner(ReadOnlyWorkoutPlanner workoutPlanner, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        workoutPlannerStorage.saveWorkoutPlanner(workoutPlanner, filePath);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yyuanxin": 45,
      "khairulazman1997": 34,
      "-": 80,
      "bakwxh": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/UserPrefsStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": " * Represents a storage for {@link UserPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * Saves the given {@link ReadOnlyUserPrefs} to the storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yyuanxin": 2,
      "-": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/UserProfileStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.ReadOnlyUserProfile;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.UserProfile;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": " * Represents a storage for {@link UserProfile}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "public interface UserProfileStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    Path getUserProfileFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * Returns UserProfile data as a {@link ReadOnlyUserProfile}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    Optional\u003cReadOnlyUserProfile\u003e readUserProfile() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * @see #getUserProfileFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    Optional\u003cReadOnlyUserProfile\u003e readUserProfile(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * Saves the given {@link ReadOnlyUserProfile} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * @param dukeCooks cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    void saveUserProfile(ReadOnlyUserProfile dukeCooks) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * @see #saveUserProfile(ReadOnlyUserProfile)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    void saveUserProfile(ReadOnlyUserProfile dukeCooks, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yyuanxin": 44,
      "bakwxh": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/WorkoutPlannerStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.ReadOnlyWorkoutPlanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.WorkoutPlanner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": " * Represents a storage for {@link WorkoutPlanner}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "public interface WorkoutPlannerStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    Path getWorkoutPlannerFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * Returns DukeCooks data as a {@link ReadOnlyWorkoutPlanner}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    Optional\u003cReadOnlyWorkoutPlanner\u003e readWorkoutPlanner() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * @see #getWorkoutPlannerFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    Optional\u003cReadOnlyWorkoutPlanner\u003e readWorkoutPlanner(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * Saves the given {@link ReadOnlyWorkoutPlanner} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * @param dukeCooks cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    void saveWorkoutPlanner(ReadOnlyWorkoutPlanner dukeCooks) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * @see #saveWorkoutPlanner(ReadOnlyWorkoutPlanner)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    void saveWorkoutPlanner(ReadOnlyWorkoutPlanner dukeCooks, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulazman1997": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ExerciseCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "public class ExerciseCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    private static final String FXML \u003d \"ExerciseListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public final Exercise exercise;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    private Label exerciseName;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    private Label primaryMuscle;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    private Label intensity;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    private FlowPane details;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public ExerciseCard(Exercise exercise, int displayedIndex) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        this.exercise \u003d exercise;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        exerciseName.setText(exercise.getExerciseName().exerciseName);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        primaryMuscle.setText(\"Primary Muscle: \" + exercise.getMusclesTrained().getPrimaryMuscle());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        intensity.setText(\"Intensity: \" + exercise.getIntensity().toString());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        exercise.getExerciseDetails().stream()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                .sorted(Comparator.comparing(detail -\u003e detail.toString()))"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                .forEach(detail -\u003e details.getChildren().add(new Label(detail.toString())));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        if (!(other instanceof ExerciseCard)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        ExerciseCard card \u003d (ExerciseCard) other;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                \u0026\u0026 exercise.equals(card.exercise);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulazman1997": 21,
      "-": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ExerciseListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "public class ExerciseListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    private static final String FXML \u003d \"PersonListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ExerciseListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    private ListView\u003cExercise\u003e personListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public ExerciseListPanel(ObservableList\u003cExercise\u003e exerciseList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        personListView.setItems(exerciseList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        personListView.setCellFactory(listView -\u003e new ExerciseListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    class ExerciseListViewCell extends ListCell\u003cExercise\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        protected void updateItem(Exercise exercise, boolean empty) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            super.updateItem(exercise, empty);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            if (empty || exercise \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                setGraphic(new ExerciseCard(exercise, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulazman1997": 13,
      "-": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HealthRecordsWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "public class HealthRecordsWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    private static final String FXML \u003d \"HealthRecordsWindow.fxml\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    private UiManager uiManager;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    private RecordListPanel recordListPanel;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonListPanel personListPanel;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    private StackPane versatilePanelPlaceholder;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    private Button home;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    private Button profile;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    private Button recipe;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    private Button exercise;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    private Button health;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    private Button diary;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public HealthRecordsWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * with health records tab view."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        recordListPanel \u003d new RecordListPanel(logic.getFilteredRecordList());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        versatilePanelPlaceholder.getChildren().add(recordListPanel.getRoot());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getHealthRecordsFilePath());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * Switch to home page."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    private void switchHome() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        TempWindow tempWindow \u003d new TempWindow(getPrimaryStage(), logic);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        tempWindow.show();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * Switch to profile page."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    private void switchProfile() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        UserProfileWindow userProfileWindow \u003d new UserProfileWindow(getPrimaryStage(), logic);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        userProfileWindow.show();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        userProfileWindow.fillInnerParts();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * Switch to recipe page."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    private void switchRecipe() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        RecipeBookWindow recipeBookWindow \u003d new RecipeBookWindow(getPrimaryStage(), logic);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        recipeBookWindow.show();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        recipeBookWindow.fillInnerParts();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * Switch to exercise page."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    private void switchExercise() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        WorkoutPlannerWindow workoutPlannerWindow \u003d new WorkoutPlannerWindow(getPrimaryStage(), logic);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        workoutPlannerWindow.show();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        workoutPlannerWindow.fillInnerParts();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * Switch to health page."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    private void switchHealth() {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        // do nothing"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * Switch to diary page."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    private void switchDiary() {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        // switch to diary"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public RecordListPanel getRecordListPanel() {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        return recordListPanel;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yyuanxin": 83,
      "khairulazman1997": 4,
      "-": 184,
      "bakwxh": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HelpWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://ay1920s1-cs2103t-t10-2.github.io/main/UserGuide.html\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulazman1997": 1,
      "-": 101
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public final Person person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    private FlowPane medicalHistories;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    private Label dateOfBirth;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    private Label gender;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    private Label bloodGroup;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    private Label weight;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    private Label height;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        name.setText(person.getName().fullName);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        dateOfBirth.setText(person.getDateOfBirth().dateOfBirth);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        gender.setText(person.getGender().gender);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        bloodGroup.setText(person.getBloodType().bloodGroup);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        weight.setText(String.valueOf(person.getWeight().weight) + \"kg (last updated: \""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                + person.getWeight().timestamp + \")\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        height.setText(String.valueOf(person.getHeight().height) + \"cm (last updated: \""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                + person.getHeight().timestamp + \")\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        person.getMedicalHistories().stream()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                .sorted(Comparator.comparing(history -\u003e history.medicalHistoryName))"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                .forEach(history -\u003e medicalHistories.getChildren().add(new Label(history.medicalHistoryName)));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard card \u003d (PersonCard) other;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 person.equals(card.person);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yyuanxin": 18,
      "-": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/RecipeBookWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "public class RecipeBookWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    private static final String FXML \u003d \"RecipeBookWindow.fxml\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    private RecipeListPanel recipeListPanel;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    private StackPane recipeListPanelPlaceholder;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    private Button home;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    private Button profile;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    private Button recipe;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    private Button exercise;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    private Button health;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    private Button diary;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public RecipeBookWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        recipeListPanel \u003d new RecipeListPanel(logic.getFilteredRecipeList());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        recipeListPanelPlaceholder.getChildren().add(recipeListPanel.getRoot());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getRecipesFilePath());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * Switch to home page."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    private void switchHome() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        TempWindow tempWindow \u003d new TempWindow(getPrimaryStage(), logic);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        tempWindow.show();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * Switch to profile page."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    private void switchProfile() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        UserProfileWindow userProfileWindow \u003d new UserProfileWindow(getPrimaryStage(), logic);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        userProfileWindow.show();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        userProfileWindow.fillInnerParts();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * Switch to recipe page."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    private void switchRecipe() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        // do nothing"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * Switch to exercise page."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    private void switchExercise() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        WorkoutPlannerWindow workoutPlannerWindow \u003d new WorkoutPlannerWindow(getPrimaryStage(), logic);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        workoutPlannerWindow.show();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        workoutPlannerWindow.fillInnerParts();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * Switch to health page."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    private void switchHealth() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        HealthRecordsWindow healthWindow \u003d new HealthRecordsWindow(getPrimaryStage(), logic);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        healthWindow.show();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        healthWindow.fillInnerParts();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * Switch to diary page."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    private void switchDiary() {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        // switch to diary"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public RecipeListPanel getRecipeListPanel() {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        return recipeListPanel;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulazman1997": 4,
      "-": 183,
      "bakwxh": 84
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/RecipeCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bakwxh"
        },
        "content": " * An UI component that displays information of a {@code Recipe}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "public class RecipeCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    private static final String FXML \u003d \"RecipeListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public final Recipe recipe;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    private Label calories;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    private Label carbs;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    private Label fats;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    private Label protein;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    private VBox ingredients;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public RecipeCard(Recipe recipe, int displayedIndex) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        this.recipe \u003d recipe;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        name.setText(recipe.getName().fullName);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        recipe.getIngredients().stream()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                .sorted(Comparator.comparing(ingredient -\u003e ingredient.ingredientName))"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                .forEach(ingredient -\u003e ingredients.getChildren().add(new Label(ingredient.ingredientName)));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        calories.setText(recipe.getCalories().cardValue);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        carbs.setText(recipe.getCarbs().cardValue);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        fats.setText(recipe.getFats().cardValue);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        protein.setText(recipe.getProtein().cardValue);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        if (!(other instanceof RecipeCard)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        RecipeCard card \u003d (RecipeCard) other;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                \u0026\u0026 recipe.equals(card.recipe);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 49,
      "bakwxh": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/RecipeListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bakwxh"
        },
        "content": " * Panel containing the list of recipes."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "public class RecipeListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    private static final String FXML \u003d \"RecipeListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(RecipeListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    private ListView\u003cRecipe\u003e recipeListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public RecipeListPanel(ObservableList\u003cRecipe\u003e recipeList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        recipeListView.setItems(recipeList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        recipeListView.setCellFactory(listView -\u003e new RecipeListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Recipe} using a {@code RecipeCard}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    class RecipeListViewCell extends ListCell\u003cRecipe\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        protected void updateItem(Recipe recipe, boolean empty) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            super.updateItem(recipe, empty);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            if (empty || recipe \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                setGraphic(new RecipeCard(recipe, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 31,
      "bakwxh": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/RecordCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.records.Record;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": " * An UI component that displays information of a {@code Record}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "public class RecordCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    private static final String FXML \u003d \"RecordListCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * As a consequence, UI elements\u0027 variable recordIds cannot be set to such keywords"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public final Record record;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    private Label recordId;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    private Label timestamp;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    private Label type;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    private Label value;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public RecordCard(Record record, int displayedIndex) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        this.record \u003d record;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        recordId.setText(String.valueOf(record.getRecordId()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        timestamp.setText(record.getTimestamp().timestamp);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        type.setText(record.getType().type);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        value.setText(record.getValue().value + record.getType().unit);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        if (!(other instanceof RecordCard)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        RecordCard card \u003d (RecordCard) other;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                \u0026\u0026 record.equals(card.record);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yyuanxin": 65,
      "bakwxh": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/RecordListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.records.Record;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": " * Panel containing the list of records."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "public class RecordListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    private static final String FXML \u003d \"RecordListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(RecordListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    private ListView\u003cRecord\u003e recordListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public RecordListPanel(ObservableList\u003cRecord\u003e recordList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        recordListView.setItems(recordList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        recordListView.setCellFactory(listView -\u003e new RecordListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Record} using a {@code RecordCard}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    class RecordListViewCell extends ListCell\u003cRecord\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        protected void updateItem(Record record, boolean empty) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            super.updateItem(record, empty);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            if (empty || record \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                setGraphic(new RecordCard(record, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yyuanxin": 45,
      "bakwxh": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/TempWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "public class TempWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    private static final String FXML \u003d \"TempWindow.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    private Button home;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    private Button profile;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    private Button recipe;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    private Button exercise;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    private Button health;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    private Button diary;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public TempWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * Switch to home page."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    private void switchHome() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        // do nothing"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * Switch to profile page."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    private void switchProfile() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        UserProfileWindow userProfileWindow \u003d new UserProfileWindow(getPrimaryStage(), logic);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        userProfileWindow.show();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        userProfileWindow.fillInnerParts();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * Switch to recipe page."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    private void switchRecipe() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        RecipeBookWindow recipeBookWindow \u003d new RecipeBookWindow(getPrimaryStage(), logic);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        recipeBookWindow.show();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        recipeBookWindow.fillInnerParts();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * Switch to exercise page."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    private void switchExercise() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        WorkoutPlannerWindow workoutPlannerWindow \u003d new WorkoutPlannerWindow(getPrimaryStage(), logic);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        workoutPlannerWindow.show();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        workoutPlannerWindow.fillInnerParts();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * Switch to health page."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    private void switchHealth() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        HealthRecordsWindow healthWindow \u003d new HealthRecordsWindow(getPrimaryStage(), logic);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        healthWindow.show();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        healthWindow.fillInnerParts();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * Switch to diary page."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    private void switchDiary() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        // switch to diary"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yyuanxin": 52,
      "khairulazman1997": 4,
      "-": 138,
      "bakwxh": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/address_book_32.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    private WorkoutPlannerWindow workoutPlannerWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    private TempWindow tempWindow;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    private RecipeBookWindow recipeBookWindow;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            tempWindow \u003d new TempWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            tempWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            //recipeBookWindow \u003d new RecipeBookWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            //recipeBookWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            //recipeBookWindow.fillInnerParts();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        showAlertDialogAndWait(tempWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        //showAlertDialogAndWait(recipeBookWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yyuanxin": 4,
      "khairulazman1997": 1,
      "-": 81,
      "bakwxh": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UserProfileWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "public class UserProfileWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    private static final String FXML \u003d \"UserProfileWindow.fxml\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonListPanel personListPanel;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    private StackPane versatilePanelPlaceholder;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    private Button home;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    private Button profile;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    private Button recipe;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    private Button exercise;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    private Button health;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    private Button diary;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public UserProfileWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * with health records tab view."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        versatilePanelPlaceholder.getChildren().add(personListPanel.getRoot());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getUserProfileFilePath());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * Switch to home page."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    private void switchHome() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        TempWindow tempWindow \u003d new TempWindow(getPrimaryStage(), logic);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        tempWindow.show();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * Switch to profile page."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    private void switchProfile() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        // do nothing"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * Switch to recipe page."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    private void switchRecipe() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        RecipeBookWindow recipeBookWindow \u003d new RecipeBookWindow(getPrimaryStage(), logic);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        recipeBookWindow.show();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        recipeBookWindow.fillInnerParts();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * Switch to exercise page."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    private void switchExercise() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        WorkoutPlannerWindow workoutPlannerWindow \u003d new WorkoutPlannerWindow(getPrimaryStage(), logic);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        workoutPlannerWindow.show();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        workoutPlannerWindow.fillInnerParts();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * Switch to health page."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    private void switchHealth() {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        HealthRecordsWindow healthWindow \u003d new HealthRecordsWindow(getPrimaryStage(), logic);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        healthWindow.show();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        healthWindow.fillInnerParts();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * Switch to diary page."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    private void switchDiary() {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        // switch to diary page"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel getPersonListPanel() {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        return personListPanel;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * @see Logic#execute(String)"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yyuanxin": 78,
      "khairulazman1997": 4,
      "-": 186,
      "bakwxh": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/WorkoutPlannerWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "public class WorkoutPlannerWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    private static final String FXML \u003d \"WorkoutPlannerWindow.fxml\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    private ExerciseListPanel exerciseListPanel;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane personListPanelPlaceholder;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public WorkoutPlannerWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        exerciseListPanel \u003d new ExerciseListPanel(logic.getFilteredExerciseList());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        personListPanelPlaceholder.getChildren().add(exerciseListPanel.getRoot());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getDukeCooksFilePath());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * Switch to home page."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    private void switchHome() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        TempWindow tempWindow \u003d new TempWindow(getPrimaryStage(), logic);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        tempWindow.show();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * Switch to profile page."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    private void switchProfile() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        UserProfileWindow userProfileWindow \u003d new UserProfileWindow(getPrimaryStage(), logic);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        userProfileWindow.show();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        userProfileWindow.fillInnerParts();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * Switch to recipe page."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    private void switchRecipe() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        RecipeBookWindow recipeBookWindow \u003d new RecipeBookWindow(getPrimaryStage(), logic);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        recipeBookWindow.show();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        recipeBookWindow.fillInnerParts();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * Switch to exercise page."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    private void switchExercise() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        WorkoutPlannerWindow workoutPlannerWindow \u003d new WorkoutPlannerWindow(getPrimaryStage(), logic);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        workoutPlannerWindow.show();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        workoutPlannerWindow.fillInnerParts();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * Switch to health page."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    private void switchHealth() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        HealthRecordsWindow healthWindow \u003d new HealthRecordsWindow(getPrimaryStage(), logic);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        healthWindow.show();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        healthWindow.fillInnerParts();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * Switch to diary page."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    private void switchDiary() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        // switch to diary"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public ExerciseListPanel getExerciseListPanel() {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        return exerciseListPanel;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulazman1997": 71,
      "-": 184
    }
  },
  {
    "path": "src/main/resources/view/ExerciseListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        \u003cLabel fx:id\u003d\"exerciseName\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"details\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "      \u003cLabel fx:id\u003d\"primaryMuscle\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$primaryMuscle\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "      \u003cLabel fx:id\u003d\"intensity\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$intensity\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "khairulazman1997": 4,
      "-": 31
    }
  },
  {
    "path": "src/main/resources/view/HealthRecordsWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "\u003cfx:root minHeight\u003d\"600\" minWidth\u003d\"450\" onCloseRequest\u003d\"#handleExit\" title\u003d\"Health Records\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            \u003cHBox\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                  \u003cVBox prefHeight\u003d\"200.0\" prefWidth\u003d\"100.0\"\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                      \u003cButton fx:id\u003d\"home\" onAction\u003d\"#switchHome\" contentDisplay\u003d\"CENTER\" mnemonicParsing\u003d\"false\" prefHeight\u003d\"150.0\" prefWidth\u003d\"100.0\"\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                          \u003cInsets top\u003d\"2.0\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                        \u003cgraphic\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                          \u003cImageView fitHeight\u003d\"56.0\" fitWidth\u003d\"58.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                            \u003cimage\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                              \u003cImage url\u003d\"@../images/round_home.png\" /\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                            \u003c/image\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                          \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                        \u003c/graphic\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                      \u003c/Button\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                      \u003cButton fx:id\u003d\"profile\" onAction\u003d\"#switchProfile\" contentDisplay\u003d\"CENTER\" mnemonicParsing\u003d\"false\" prefHeight\u003d\"150.0\" prefWidth\u003d\"100.0\"\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                          \u003cInsets top\u003d\"2.0\" /\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                        \u003cgraphic\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                          \u003cImageView fitHeight\u003d\"56.0\" fitWidth\u003d\"58.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                            \u003cimage\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                              \u003cImage url\u003d\"@../images/profile.png\" /\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                            \u003c/image\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                          \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                        \u003c/graphic\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                      \u003c/Button\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                      \u003cButton fx:id\u003d\"recipe\" onAction\u003d\"#switchRecipe\" contentDisplay\u003d\"CENTER\" layoutX\u003d\"10.0\" layoutY\u003d\"10.0\" mnemonicParsing\u003d\"false\" prefHeight\u003d\"150.0\" prefWidth\u003d\"100.0\"\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                          \u003cInsets top\u003d\"2.0\" /\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                        \u003cgraphic\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                          \u003cImageView fitHeight\u003d\"56.0\" fitWidth\u003d\"58.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                            \u003cimage\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                              \u003cImage url\u003d\"@../images/chef.png\" /\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                            \u003c/image\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                          \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                        \u003c/graphic\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                      \u003c/Button\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                      \u003cButton fx:id\u003d\"exercise\" onAction\u003d\"#switchExercise\" contentDisplay\u003d\"CENTER\" layoutX\u003d\"10.0\" layoutY\u003d\"76.0\" mnemonicParsing\u003d\"false\" prefHeight\u003d\"150.0\" prefWidth\u003d\"100.0\"\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                          \u003cInsets top\u003d\"2.0\" /\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                        \u003cgraphic\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                          \u003cImageView fitHeight\u003d\"56.0\" fitWidth\u003d\"58.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                            \u003cimage\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                              \u003cImage url\u003d\"@../images/dumbell.png\" /\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                            \u003c/image\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                          \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                        \u003c/graphic\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                      \u003c/Button\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                      \u003cButton fx:id\u003d\"health\" onAction\u003d\"#switchHealth\" contentDisplay\u003d\"CENTER\" layoutX\u003d\"10.0\" layoutY\u003d\"143.0\" mnemonicParsing\u003d\"false\" prefHeight\u003d\"150.0\" prefWidth\u003d\"100.0\"\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                          \u003cInsets top\u003d\"2.0\" /\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                        \u003cgraphic\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                          \u003cImageView fitHeight\u003d\"56.0\" fitWidth\u003d\"58.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                            \u003cimage\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                              \u003cImage url\u003d\"@../images/heartbeat.png\" /\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                            \u003c/image\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                          \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                        \u003c/graphic\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                      \u003c/Button\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                      \u003cButton fx:id\u003d\"diary\" onAction\u003d\"#switchDiary\" contentDisplay\u003d\"CENTER\" layoutX\u003d\"10.0\" layoutY\u003d\"209.0\" mnemonicParsing\u003d\"false\" prefHeight\u003d\"150.0\" prefWidth\u003d\"100.0\"\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                          \u003cInsets top\u003d\"2.0\" /\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                        \u003cgraphic\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                          \u003cImageView fitHeight\u003d\"56.0\" fitWidth\u003d\"58.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                            \u003cimage\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                              \u003cImage url\u003d\"@../images/open-book.png\" /\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                            \u003c/image\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                          \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                        \u003c/graphic\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                      \u003c/Button\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                    \u003c/children\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                  \u003c/VBox\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                  \u003cVBox\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                       \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                          \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                       \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                       \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"100.0\" minHeight\u003d\"100\" prefHeight\u003d\"100.0\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                          \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                       \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                       \u003cVBox fx:id\u003d\"personListCard\" minWidth\u003d\"340\" prefWidth\u003d\"340\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                          \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                        \u003cStackPane fx:id\u003d\"versatilePanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                  \u003c/VBox\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "yyuanxin": 142,
      "bakwxh": 1
    }
  },
  {
    "path": "src/main/resources/view/PersonListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"medicalHistories\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "      \u003cLabel fx:id\u003d\"dateOfBirth\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$dob\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "      \u003cLabel fx:id\u003d\"gender\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$gender\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "      \u003cLabel fx:id\u003d\"bloodGroup\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$bloodGroup\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "      \u003cLabel fx:id\u003d\"weight\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$exerciseWeight\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "      \u003cLabel fx:id\u003d\"height\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$height\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "yyuanxin": 5,
      "khairulazman1997": 1,
      "-": 32
    }
  },
  {
    "path": "src/main/resources/view/RecipeBookWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "\u003cfx:root minHeight\u003d\"600\" minWidth\u003d\"450\" onCloseRequest\u003d\"#handleExit\" title\u003d\"Recipe Book\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        \u003cHBox\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "          \u003cchildren\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            \u003cVBox prefHeight\u003d\"200.0\" prefWidth\u003d\"100.0\"\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "              \u003cchildren\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                \u003cButton fx:id\u003d\"home\" onAction\u003d\"#switchHome\" contentDisplay\u003d\"CENTER\" mnemonicParsing\u003d\"false\" prefHeight\u003d\"150.0\" prefWidth\u003d\"100.0\"\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                  \u003cpadding\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                    \u003cInsets top\u003d\"2.0\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                  \u003c/padding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                  \u003cgraphic\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                    \u003cImageView fitHeight\u003d\"56.0\" fitWidth\u003d\"58.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                      \u003cimage\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                        \u003cImage url\u003d\"@../images/round_home.png\" /\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                      \u003c/image\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                    \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                  \u003c/graphic\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                \u003c/Button\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                \u003cButton fx:id\u003d\"profile\" onAction\u003d\"#switchProfile\" contentDisplay\u003d\"CENTER\" mnemonicParsing\u003d\"false\" prefHeight\u003d\"150.0\" prefWidth\u003d\"100.0\"\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                  \u003cpadding\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                    \u003cInsets top\u003d\"2.0\" /\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                  \u003c/padding\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                  \u003cgraphic\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                    \u003cImageView fitHeight\u003d\"56.0\" fitWidth\u003d\"58.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                      \u003cimage\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                        \u003cImage url\u003d\"@../images/profile.png\" /\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                      \u003c/image\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                    \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                  \u003c/graphic\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                \u003c/Button\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                \u003cButton fx:id\u003d\"recipe\" onAction\u003d\"#switchRecipe\" contentDisplay\u003d\"CENTER\" layoutX\u003d\"10.0\" layoutY\u003d\"10.0\" mnemonicParsing\u003d\"false\" prefHeight\u003d\"150.0\" prefWidth\u003d\"100.0\"\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                  \u003cpadding\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                    \u003cInsets top\u003d\"2.0\" /\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                  \u003c/padding\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                  \u003cgraphic\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                    \u003cImageView fitHeight\u003d\"56.0\" fitWidth\u003d\"58.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                      \u003cimage\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                        \u003cImage url\u003d\"@../images/chef.png\" /\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                      \u003c/image\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                    \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                  \u003c/graphic\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                \u003c/Button\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                \u003cButton fx:id\u003d\"exercise\" onAction\u003d\"#switchExercise\" contentDisplay\u003d\"CENTER\" layoutX\u003d\"10.0\" layoutY\u003d\"76.0\" mnemonicParsing\u003d\"false\" prefHeight\u003d\"150.0\" prefWidth\u003d\"100.0\"\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                  \u003cpadding\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                    \u003cInsets top\u003d\"2.0\" /\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                  \u003c/padding\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                  \u003cgraphic\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                    \u003cImageView fitHeight\u003d\"56.0\" fitWidth\u003d\"58.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                      \u003cimage\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                        \u003cImage url\u003d\"@../images/dumbell.png\" /\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                      \u003c/image\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                    \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                  \u003c/graphic\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                \u003c/Button\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                \u003cButton fx:id\u003d\"health\" onAction\u003d\"#switchHealth\" contentDisplay\u003d\"CENTER\" layoutX\u003d\"10.0\" layoutY\u003d\"143.0\" mnemonicParsing\u003d\"false\" prefHeight\u003d\"150.0\" prefWidth\u003d\"100.0\"\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                  \u003cpadding\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                    \u003cInsets top\u003d\"2.0\" /\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                  \u003c/padding\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                  \u003cgraphic\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                    \u003cImageView fitHeight\u003d\"56.0\" fitWidth\u003d\"58.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                      \u003cimage\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                        \u003cImage url\u003d\"@../images/heartbeat.png\" /\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                      \u003c/image\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                    \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                  \u003c/graphic\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                \u003c/Button\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                \u003cButton fx:id\u003d\"diary\" onAction\u003d\"#switchDiary\" contentDisplay\u003d\"CENTER\" layoutX\u003d\"10.0\" layoutY\u003d\"209.0\" mnemonicParsing\u003d\"false\" prefHeight\u003d\"150.0\" prefWidth\u003d\"100.0\"\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                  \u003cpadding\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                    \u003cInsets top\u003d\"2.0\" /\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                  \u003c/padding\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                  \u003cgraphic\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                    \u003cImageView fitHeight\u003d\"56.0\" fitWidth\u003d\"58.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                      \u003cimage\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                        \u003cImage url\u003d\"@../images/open-book.png\" /\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                      \u003c/image\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                    \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                  \u003c/graphic\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                \u003c/Button\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "              \u003c/children\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            \u003cVBox\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "              \u003cchildren\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cpadding\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                    \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/padding\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"100.0\" minHeight\u003d\"100\" prefHeight\u003d\"100.0\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cpadding\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                    \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/padding\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                \u003cVBox fx:id\u003d\"recipeList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cpadding\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                    \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/padding\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                  \u003cStackPane fx:id\u003d\"recipeListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "              \u003c/children\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "          \u003c/children\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "khairulazman1997": 1,
      "-": 47,
      "bakwxh": 95
    }
  },
  {
    "path": "src/main/resources/view/RecipeListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "      \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "         \u003cLabel styleClass\u003d\"cell_small_label\" text\u003d\"Ingredients:\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "      \u003cVBox fx:id\u003d\"ingredients\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "               \u003cInsets /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "               \u003cInsets left\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            \u003c/VBox.margin\u003e\u003c/VBox\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "      \u003cLabel fx:id\u003d\"calories\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$calories\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "      \u003cLabel fx:id\u003d\"carbs\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$carbs\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "      \u003cLabel fx:id\u003d\"fats\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$fats\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "      \u003cLabel fx:id\u003d\"protein\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$protein\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 27,
      "bakwxh": 20
    }
  },
  {
    "path": "src/main/resources/view/RecipeListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "  \u003cListView fx:id\u003d\"recipeListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 7,
      "bakwxh": 1
    }
  },
  {
    "path": "src/main/resources/view/RecordListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        \u003cLabel fx:id\u003d\"recordId\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "      \u003cLabel fx:id\u003d\"timestamp\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$timestamp\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "      \u003cLabel fx:id\u003d\"type\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$type\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "      \u003cLabel fx:id\u003d\"value\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$value\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "yyuanxin": 34
    }
  },
  {
    "path": "src/main/resources/view/RecordListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "  \u003cListView fx:id\u003d\"recordListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "yyuanxin": 8
    }
  },
  {
    "path": "src/main/resources/view/TempWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "\u003c?import javafx.scene.layout.BorderPane?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "         title\u003d\"Duke Cooks\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    \u003cImage url\u003d\"@/images/man_cook.png\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "      \u003cBorderPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"400.0\" prefWidth\u003d\"600.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        \u003ctop\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "          \u003cMenuBar BorderPane.alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            \u003cmenus\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "              \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                \u003citems\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                  \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                \u003c/items\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "              \u003c/Menu\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "              \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Edit\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                \u003citems\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                  \u003cMenuItem mnemonicParsing\u003d\"false\" text\u003d\"Delete\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                \u003c/items\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "              \u003c/Menu\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "              \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                \u003citems\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                  \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                \u003c/items\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "              \u003c/Menu\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            \u003c/menus\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "          \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        \u003c/top\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        \u003cleft\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "          \u003cVBox prefHeight\u003d\"200.0\" prefWidth\u003d\"100.0\" BorderPane.alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "              \u003cButton fx:id\u003d\"home\" onAction\u003d\"#switchHome\" contentDisplay\u003d\"CENTER\" mnemonicParsing\u003d\"false\" prefHeight\u003d\"150.0\" prefWidth\u003d\"100.0\"\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                  \u003cInsets top\u003d\"2.0\" /\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                \u003cgraphic\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                  \u003cImageView fitHeight\u003d\"56.0\" fitWidth\u003d\"58.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                    \u003cimage\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                      \u003cImage url\u003d\"@../images/round_home.png\" /\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                    \u003c/image\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                  \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                \u003c/graphic\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "              \u003c/Button\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "              \u003cButton fx:id\u003d\"profile\" onAction\u003d\"#switchProfile\" contentDisplay\u003d\"CENTER\" mnemonicParsing\u003d\"false\" prefHeight\u003d\"150.0\" prefWidth\u003d\"100.0\"\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                  \u003cInsets top\u003d\"2.0\" /\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                \u003cgraphic\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                  \u003cImageView fitHeight\u003d\"56.0\" fitWidth\u003d\"58.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                    \u003cimage\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                      \u003cImage url\u003d\"@../images/profile.png\" /\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                    \u003c/image\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                  \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                \u003c/graphic\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "              \u003c/Button\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "              \u003cButton fx:id\u003d\"recipe\" onAction\u003d\"#switchRecipe\" contentDisplay\u003d\"CENTER\" layoutX\u003d\"10.0\" layoutY\u003d\"10.0\" mnemonicParsing\u003d\"false\" prefHeight\u003d\"150.0\" prefWidth\u003d\"100.0\"\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                  \u003cInsets top\u003d\"2.0\" /\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                \u003cgraphic\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                  \u003cImageView fitHeight\u003d\"56.0\" fitWidth\u003d\"58.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                    \u003cimage\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                      \u003cImage url\u003d\"@../images/chef.png\" /\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                    \u003c/image\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                  \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                \u003c/graphic\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "              \u003c/Button\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "              \u003cButton fx:id\u003d\"exercise\" onAction\u003d\"#switchExercise\" contentDisplay\u003d\"CENTER\" layoutX\u003d\"10.0\" layoutY\u003d\"76.0\" mnemonicParsing\u003d\"false\" prefHeight\u003d\"150.0\" prefWidth\u003d\"100.0\"\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                  \u003cInsets top\u003d\"2.0\" /\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                \u003cgraphic\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                  \u003cImageView fitHeight\u003d\"56.0\" fitWidth\u003d\"58.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                    \u003cimage\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                      \u003cImage url\u003d\"@../images/dumbell.png\" /\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                    \u003c/image\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                  \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                \u003c/graphic\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "              \u003c/Button\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "              \u003cButton fx:id\u003d\"health\" onAction\u003d\"#switchHealth\" contentDisplay\u003d\"CENTER\" layoutX\u003d\"10.0\" layoutY\u003d\"143.0\" mnemonicParsing\u003d\"false\" prefHeight\u003d\"150.0\" prefWidth\u003d\"100.0\"\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                  \u003cInsets top\u003d\"2.0\" /\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                \u003cgraphic\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                  \u003cImageView fitHeight\u003d\"56.0\" fitWidth\u003d\"58.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                    \u003cimage\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                      \u003cImage url\u003d\"@../images/heartbeat.png\" /\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                    \u003c/image\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                  \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                \u003c/graphic\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "              \u003c/Button\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "              \u003cButton fx:id\u003d\"diary\" onAction\u003d\"#switchDiary\" contentDisplay\u003d\"CENTER\" layoutX\u003d\"10.0\" layoutY\u003d\"209.0\" mnemonicParsing\u003d\"false\" prefHeight\u003d\"150.0\" prefWidth\u003d\"100.0\"\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                  \u003cInsets top\u003d\"2.0\" /\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                \u003cgraphic\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                  \u003cImageView fitHeight\u003d\"56.0\" fitWidth\u003d\"58.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                    \u003cimage\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                      \u003cImage url\u003d\"@../images/open-book.png\" /\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                    \u003c/image\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                  \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                \u003c/graphic\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "              \u003c/Button\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        \u003c/left\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "      \u003c/BorderPane\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "yyuanxin": 130,
      "khairulazman1997": 2
    }
  },
  {
    "path": "src/main/resources/view/UserProfileWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "\u003cfx:root minHeight\u003d\"600\" minWidth\u003d\"450\" onCloseRequest\u003d\"#handleExit\" title\u003d\"Health Records\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        \u003cHBox\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "          \u003cchildren\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            \u003cVBox prefHeight\u003d\"200.0\" prefWidth\u003d\"100.0\"\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "              \u003cchildren\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                \u003cButton fx:id\u003d\"home\" onAction\u003d\"#switchHome\" contentDisplay\u003d\"CENTER\" mnemonicParsing\u003d\"false\" prefHeight\u003d\"150.0\" prefWidth\u003d\"100.0\"\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                  \u003cpadding\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                    \u003cInsets top\u003d\"2.0\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                  \u003c/padding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                  \u003cgraphic\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                    \u003cImageView fitHeight\u003d\"56.0\" fitWidth\u003d\"58.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                      \u003cimage\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                        \u003cImage url\u003d\"@../images/round_home.png\" /\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                      \u003c/image\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                    \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                  \u003c/graphic\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                \u003c/Button\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                \u003cButton fx:id\u003d\"profile\" onAction\u003d\"#switchProfile\" contentDisplay\u003d\"CENTER\" mnemonicParsing\u003d\"false\" prefHeight\u003d\"150.0\" prefWidth\u003d\"100.0\"\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                  \u003cpadding\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                    \u003cInsets top\u003d\"2.0\" /\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                  \u003c/padding\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                  \u003cgraphic\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                    \u003cImageView fitHeight\u003d\"56.0\" fitWidth\u003d\"58.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                      \u003cimage\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                        \u003cImage url\u003d\"@../images/profile.png\" /\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                      \u003c/image\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                    \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                  \u003c/graphic\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                \u003c/Button\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                \u003cButton fx:id\u003d\"recipe\" onAction\u003d\"#switchRecipe\" contentDisplay\u003d\"CENTER\" layoutX\u003d\"10.0\" layoutY\u003d\"10.0\" mnemonicParsing\u003d\"false\" prefHeight\u003d\"150.0\" prefWidth\u003d\"100.0\"\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                  \u003cpadding\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                    \u003cInsets top\u003d\"2.0\" /\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                  \u003c/padding\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                  \u003cgraphic\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                    \u003cImageView fitHeight\u003d\"56.0\" fitWidth\u003d\"58.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                      \u003cimage\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                        \u003cImage url\u003d\"@../images/chef.png\" /\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                      \u003c/image\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                    \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                  \u003c/graphic\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                \u003c/Button\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                \u003cButton fx:id\u003d\"exercise\" onAction\u003d\"#switchExercise\" contentDisplay\u003d\"CENTER\" layoutX\u003d\"10.0\" layoutY\u003d\"76.0\" mnemonicParsing\u003d\"false\" prefHeight\u003d\"150.0\" prefWidth\u003d\"100.0\"\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                  \u003cpadding\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                    \u003cInsets top\u003d\"2.0\" /\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                  \u003c/padding\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                  \u003cgraphic\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                    \u003cImageView fitHeight\u003d\"56.0\" fitWidth\u003d\"58.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                      \u003cimage\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                        \u003cImage url\u003d\"@../images/dumbell.png\" /\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                      \u003c/image\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                    \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                  \u003c/graphic\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                \u003c/Button\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                \u003cButton fx:id\u003d\"health\" onAction\u003d\"#switchHealth\" contentDisplay\u003d\"CENTER\" layoutX\u003d\"10.0\" layoutY\u003d\"143.0\" mnemonicParsing\u003d\"false\" prefHeight\u003d\"150.0\" prefWidth\u003d\"100.0\"\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                  \u003cpadding\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                    \u003cInsets top\u003d\"2.0\" /\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                  \u003c/padding\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                  \u003cgraphic\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                    \u003cImageView fitHeight\u003d\"56.0\" fitWidth\u003d\"58.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                      \u003cimage\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                        \u003cImage url\u003d\"@../images/heartbeat.png\" /\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                      \u003c/image\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                    \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                  \u003c/graphic\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                \u003c/Button\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                \u003cButton fx:id\u003d\"diary\" onAction\u003d\"#switchDiary\" contentDisplay\u003d\"CENTER\" layoutX\u003d\"10.0\" layoutY\u003d\"209.0\" mnemonicParsing\u003d\"false\" prefHeight\u003d\"150.0\" prefWidth\u003d\"100.0\"\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                  \u003cpadding\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                    \u003cInsets top\u003d\"2.0\" /\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                  \u003c/padding\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                  \u003cgraphic\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                    \u003cImageView fitHeight\u003d\"56.0\" fitWidth\u003d\"58.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                      \u003cimage\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                        \u003cImage url\u003d\"@../images/open-book.png\" /\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                      \u003c/image\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                    \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                  \u003c/graphic\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                \u003c/Button\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "              \u003c/children\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            \u003cVBox\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "              \u003cchildren\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                  \u003cpadding\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                    \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                  \u003c/padding\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"100.0\" minHeight\u003d\"100\" prefHeight\u003d\"100.0\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                  \u003cpadding\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                    \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                  \u003c/padding\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                \u003cVBox fx:id\u003d\"personList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                  \u003cpadding\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                    \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                  \u003c/padding\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                  \u003cStackPane fx:id\u003d\"versatilePanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "              \u003c/children\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "          \u003c/children\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "yyuanxin": 146
    }
  },
  {
    "path": "src/main/resources/view/WorkoutPlannerWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "\u003cfx:root minHeight\u003d\"600\" minWidth\u003d\"450\" onCloseRequest\u003d\"#handleExit\" title\u003d\"Recipe Book\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        \u003cHBox\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "          \u003cchildren\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            \u003cVBox prefHeight\u003d\"200.0\" prefWidth\u003d\"100.0\"\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "              \u003cchildren\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                \u003cButton fx:id\u003d\"home\" onAction\u003d\"#switchHome\" contentDisplay\u003d\"CENTER\" mnemonicParsing\u003d\"false\" prefHeight\u003d\"150.0\" prefWidth\u003d\"100.0\"\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                  \u003cpadding\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                    \u003cInsets top\u003d\"2.0\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                  \u003c/padding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                  \u003cgraphic\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                    \u003cImageView fitHeight\u003d\"56.0\" fitWidth\u003d\"58.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                      \u003cimage\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                        \u003cImage url\u003d\"@../images/round_home.png\" /\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                      \u003c/image\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                    \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                  \u003c/graphic\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                \u003c/Button\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                \u003cButton fx:id\u003d\"profile\" onAction\u003d\"#switchProfile\" contentDisplay\u003d\"CENTER\" mnemonicParsing\u003d\"false\" prefHeight\u003d\"150.0\" prefWidth\u003d\"100.0\"\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                  \u003cpadding\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                    \u003cInsets top\u003d\"2.0\" /\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                  \u003c/padding\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                  \u003cgraphic\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                    \u003cImageView fitHeight\u003d\"56.0\" fitWidth\u003d\"58.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                      \u003cimage\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                        \u003cImage url\u003d\"@../images/profile.png\" /\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                      \u003c/image\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                    \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                  \u003c/graphic\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                \u003c/Button\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                \u003cButton fx:id\u003d\"recipe\" onAction\u003d\"#switchRecipe\" contentDisplay\u003d\"CENTER\" layoutX\u003d\"10.0\" layoutY\u003d\"10.0\" mnemonicParsing\u003d\"false\" prefHeight\u003d\"150.0\" prefWidth\u003d\"100.0\"\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                  \u003cpadding\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                    \u003cInsets top\u003d\"2.0\" /\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                  \u003c/padding\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                  \u003cgraphic\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                    \u003cImageView fitHeight\u003d\"56.0\" fitWidth\u003d\"58.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                      \u003cimage\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                        \u003cImage url\u003d\"@../images/chef.png\" /\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                      \u003c/image\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                    \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                  \u003c/graphic\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                \u003c/Button\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                \u003cButton fx:id\u003d\"exercise\" onAction\u003d\"#switchExercise\" contentDisplay\u003d\"CENTER\" layoutX\u003d\"10.0\" layoutY\u003d\"76.0\" mnemonicParsing\u003d\"false\" prefHeight\u003d\"150.0\" prefWidth\u003d\"100.0\"\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                  \u003cpadding\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                    \u003cInsets top\u003d\"2.0\" /\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                  \u003c/padding\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                  \u003cgraphic\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                    \u003cImageView fitHeight\u003d\"56.0\" fitWidth\u003d\"58.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                      \u003cimage\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                        \u003cImage url\u003d\"@../images/dumbell.png\" /\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                      \u003c/image\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                    \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                  \u003c/graphic\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                \u003c/Button\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                \u003cButton fx:id\u003d\"health\" onAction\u003d\"#switchHealth\" contentDisplay\u003d\"CENTER\" layoutX\u003d\"10.0\" layoutY\u003d\"143.0\" mnemonicParsing\u003d\"false\" prefHeight\u003d\"150.0\" prefWidth\u003d\"100.0\"\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                  \u003cpadding\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                    \u003cInsets top\u003d\"2.0\" /\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                  \u003c/padding\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                  \u003cgraphic\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                    \u003cImageView fitHeight\u003d\"56.0\" fitWidth\u003d\"58.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                      \u003cimage\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                        \u003cImage url\u003d\"@../images/heartbeat.png\" /\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                      \u003c/image\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                    \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                  \u003c/graphic\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                \u003c/Button\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                \u003cButton fx:id\u003d\"diary\" onAction\u003d\"#switchDiary\" contentDisplay\u003d\"CENTER\" layoutX\u003d\"10.0\" layoutY\u003d\"209.0\" mnemonicParsing\u003d\"false\" prefHeight\u003d\"150.0\" prefWidth\u003d\"100.0\"\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                  \u003cpadding\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                    \u003cInsets top\u003d\"2.0\" /\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                  \u003c/padding\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                  \u003cgraphic\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                    \u003cImageView fitHeight\u003d\"56.0\" fitWidth\u003d\"58.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                      \u003cimage\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                        \u003cImage url\u003d\"@../images/open-book.png\" /\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                      \u003c/image\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                    \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                  \u003c/graphic\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                \u003c/Button\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "              \u003c/children\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            \u003cVBox\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "              \u003cchildren\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cpadding\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                    \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/padding\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"100.0\" minHeight\u003d\"100\" prefHeight\u003d\"100.0\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cpadding\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                    \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/padding\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                \u003cVBox fx:id\u003d\"exerciseList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cpadding\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                    \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/padding\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "              \u003c/children\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "          \u003c/children\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "khairulazman1997": 104,
      "-": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/index/IndexTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        final Index fifthRecipeIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertTrue(fifthRecipeIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertTrue(fifthRecipeIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertTrue(fifthRecipeIndex.equals(fifthRecipeIndex));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertFalse(fifthRecipeIndex.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertFalse(fifthRecipeIndex.equals(5.0f));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertFalse(fifthRecipeIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 53,
      "bakwxh": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_EXERCISE_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.BLOODTYPE_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DOB_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GENDER_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.HEIGHT_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.WEIGHT_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import static seedu.address.testutil.TypicalExercises.PUSHUP;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import static seedu.address.testutil.TypicalProfiles.AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import seedu.address.logic.commands.AddProfileCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.logic.commands.ListExerciseCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.ReadOnlyRecipeBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.ReadOnlyUserProfile;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.ReadOnlyWorkoutPlanner;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import seedu.address.storage.JsonHealthRecordsStorage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.storage.JsonRecipeBookStorage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import seedu.address.storage.JsonUserProfileStorage;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.storage.JsonWorkoutPlannerStorage;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.testutil.ExerciseBuilder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        JsonRecipeBookStorage recipeBookStorage \u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                new JsonRecipeBookStorage(temporaryFolder.resolve(\"recipes.json\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        JsonUserProfileStorage userProfileStorage \u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                new JsonUserProfileStorage(temporaryFolder.resolve(\"dukecooks.json\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        JsonHealthRecordsStorage healthRecordsStorage \u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                new JsonHealthRecordsStorage(temporaryFolder.resolve(\"healthrecords.json\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        JsonWorkoutPlannerStorage workoutPlannerStorage \u003d"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                new JsonWorkoutPlannerStorage(temporaryFolder.resolve(\"exercises.json\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        //StorageManager storage \u003d new StorageManager(recipeBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        StorageManager storage \u003d new StorageManager(userProfileStorage, healthRecordsStorage,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                recipeBookStorage, workoutPlannerStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public void execute_recipeCommandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        String deleteCommand \u003d \"delete recipe 9\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_EXERCISE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public void execute_validExerciseCommand_success() throws Exception {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        String listCommand \u003d ListExerciseCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertCommandSuccess(listCommand, ListExerciseCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        // Setup LogicManager with JsonRecipeBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        JsonRecipeBookStorage recipeBookStorage \u003d"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                new JsonRecipeBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionRecipeBook.json\"));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        // Setup LogicManager with JsonUserProfileIoExceptionThrowingStub"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        JsonUserProfileStorage userProfileStorage \u003d"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                new JsonUserProfileIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionDukeCooks.json\"));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        // Setup LogicManager with JsonDukeCooksIoExceptionThrowingStub"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        JsonWorkoutPlannerStorage workoutPlannerStorage \u003d"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                new JsonWorkoutPlannerIoExceptionThrowingStub(temporaryFolder"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                        .resolve(\"ioExceptionWorkoutPlanner.json\"));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        //StorageManager storage \u003d new StorageManager(recipeBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        StorageManager storage \u003d new StorageManager(userProfileStorage, null,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                recipeBookStorage, workoutPlannerStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        new JsonUserPrefsStorage(temporaryFolder"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                .resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        //String addCommand \u003d AddRecipeCommand.COMMAND_WORD + \" \" + AddRecipeCommand.VARIANT_WORD + \" \" + NAME_DESC_FISH"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        //        + INGREDIENT_DESC_FISH + CALORIES_DESC_FISH + CARBS_DESC_FISH + FATS_DESC_FISH + PROTEIN_DESC_FISH;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        //Recipe expectedRecipe \u003d new RecipeBuilder(FISH).build();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        String addCommand \u003d AddProfileCommand.COMMAND_WORD + NAME_DESC_AMY + DOB_DESC + GENDER_DESC"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                + BLOODTYPE_DESC + HEIGHT_DESC + WEIGHT_DESC;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withMedicalHistories().build();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        Exercise expectedExercise \u003d new ExerciseBuilder(PUSHUP)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                .withDetails(null, null, null, null, null, null)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(expectedPerson);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        //expectedModel.addRecipe(expectedRecipe);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        expectedModel.addExercise(expectedExercise);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredExerciseList().remove(0));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public void getFilteredRecipeList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredRecipeList().remove(0));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getUserProfile(), model.getHealthRecords(),"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                model.getRecipeBook(), model.getWorkoutPlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    private static class JsonUserProfileIoExceptionThrowingStub extends JsonUserProfileStorage {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        private JsonUserProfileIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        public void saveUserProfile(ReadOnlyUserProfile dukeCooks, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    private static class JsonWorkoutPlannerIoExceptionThrowingStub extends JsonWorkoutPlannerStorage {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        private JsonWorkoutPlannerIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        public void saveWorkoutPlanner(ReadOnlyWorkoutPlanner dukeCooks, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    private static class JsonRecipeBookIoExceptionThrowingStub extends JsonRecipeBookStorage {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        private JsonRecipeBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        public void saveRecipeBook(ReadOnlyRecipeBook recipeBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yyuanxin": 20,
      "khairulazman1997": 40,
      "-": 164,
      "bakwxh": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddExerciseCommandIntegrationTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import static seedu.address.testutil.TypicalExercises.getTypicalWorkoutPlanner;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "public class AddExerciseCommandIntegrationTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        model \u003d new ModelManager(getTypicalWorkoutPlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        Exercise exerciseInList \u003d model.getWorkoutPlanner().getExerciseList().get(0);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertCommandFailure(new AddExerciseCommand(exerciseInList), model, AddExerciseCommand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                .MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulazman1997": 8,
      "-": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddExerciseCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.ModelStub;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.ReadOnlyWorkoutPlanner;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.WorkoutPlanner;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.testutil.ExerciseBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "public class AddExerciseCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddExerciseCommand(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        Exercise validExercise \u003d new ExerciseBuilder().build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        CommandResult commandResult \u003d new AddExerciseCommand(validExercise).execute(modelStub);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertEquals(String.format(AddExerciseCommand"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                .MESSAGE_SUCCESS, validExercise), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertEquals(Arrays.asList(validExercise), modelStub.personsAdded);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        Exercise validExercise \u003d new ExerciseBuilder().build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        AddExerciseCommand addExerciseCommand \u003d new AddExerciseCommand(validExercise);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPerson(validExercise);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertThrows(CommandException.class, AddExerciseCommand"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                .MESSAGE_DUPLICATE_PERSON, () -\u003e addExerciseCommand.execute(modelStub));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        Exercise alice \u003d new ExerciseBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        Exercise bob \u003d new ExerciseBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        AddExerciseCommand addAliceCommand \u003d new AddExerciseCommand(alice);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        AddExerciseCommand addBobCommand \u003d new AddExerciseCommand(bob);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        AddExerciseCommand addAliceCommandCopy \u003d new AddExerciseCommand(alice);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        private final Exercise exercise;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        ModelStubWithPerson(Exercise exercise) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            requireNonNull(exercise);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            this.exercise \u003d exercise;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        public boolean hasExercise(Exercise exercise) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            requireNonNull(exercise);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            return this.exercise.isSameExercise(exercise);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        final ArrayList\u003cExercise\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        public boolean hasExercise(Exercise exercise) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            requireNonNull(exercise);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            return personsAdded.stream().anyMatch(exercise::isSameExercise);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        public void addExercise(Exercise exercise) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            requireNonNull(exercise);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            personsAdded.add(exercise);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        public ReadOnlyWorkoutPlanner getWorkoutPlanner() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            return new WorkoutPlanner();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulazman1997": 38,
      "-": 79
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddProfileCommandIntegrationTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import static seedu.address.testutil.TypicalProfiles.getTypicalProfiles;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bakwxh"
        },
        "content": " * Contains integration tests (interaction with the RecipeModel) for {@code AddProfileCommand}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "public class AddProfileCommandIntegrationTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        model \u003d new ModelManager(getTypicalProfiles(), null, null, null, new UserPrefs());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yyuanxin": 18,
      "khairulazman1997": 1,
      "bakwxh": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddProfileCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.ModelStub;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.ReadOnlyUserProfile;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.UserProfile;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "public class AddProfileCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddProfileCommand(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        CommandResult commandResult \u003d new AddProfileCommand(validPerson).execute(modelStub);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        assertEquals(String.format(AddProfileCommand.MESSAGE_SUCCESS, validPerson), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        AddProfileCommand addAliceCommand \u003d new AddProfileCommand(alice);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        AddProfileCommand addBobCommand \u003d new AddProfileCommand(bob);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        AddProfileCommand addAliceCommandCopy \u003d new AddProfileCommand(alice);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * A RecipeModel stub that contains a single person."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Person person;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubWithPerson(Person person) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            this.person \u003d person;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * A RecipeModel stub that always accept the person being added."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            personsAdded.add(person);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        public ReadOnlyUserProfile getUserProfile() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            return new UserProfile();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yyuanxin": 9,
      "-": 77,
      "bakwxh": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddRecipeCommandIntegrationTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertRecipeCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.getTypicalRecipeBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bakwxh"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddRecipeCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "public class AddRecipeCommandIntegrationTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        model \u003d new ModelManager(getTypicalRecipeBook(), new UserPrefs());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public void execute_duplicateRecipe_throwsCommandException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        Recipe recipeInList \u003d model.getRecipeBook().getRecipeList().get(0);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertRecipeCommandFailure(new AddRecipeCommand(recipeInList), model,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                AddRecipeCommand.MESSAGE_DUPLICATE_RECIPE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 23,
      "bakwxh": 10
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddRecipeCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.ModelStub;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.ReadOnlyRecipeBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.RecipeBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.testutil.RecipeBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "public class AddRecipeCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public void constructor_nullRecipe_throwsNullPointerException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddRecipeCommand(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public void execute_recipeAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        ModelStubAcceptingRecipeAdded modelStub \u003d new ModelStubAcceptingRecipeAdded();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        Recipe validRecipe \u003d new RecipeBuilder().build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        CommandResult commandResult \u003d new AddRecipeCommand(validRecipe).execute(modelStub);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertEquals(String.format(AddRecipeCommand.MESSAGE_SUCCESS, validRecipe), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertEquals(Arrays.asList(validRecipe), modelStub.recipesAdded);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public void execute_duplicateRecipe_throwsCommandException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        Recipe validRecipe \u003d new RecipeBuilder().build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        AddRecipeCommand addRecipeCommand \u003d new AddRecipeCommand(validRecipe);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithRecipe(validRecipe);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertThrows(CommandException.class, AddRecipeCommand.MESSAGE_DUPLICATE_RECIPE, () -\u003e addRecipeCommand"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                .execute(modelStub));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        Recipe alice \u003d new RecipeBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        Recipe bob \u003d new RecipeBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        AddRecipeCommand addAliceCommand \u003d new AddRecipeCommand(alice);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        AddRecipeCommand addBobCommand \u003d new AddRecipeCommand(bob);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        AddRecipeCommand addAliceCommandCopy \u003d new AddRecipeCommand(alice);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        // different recipe -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * A Model stub that contains a single recipe."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    private class ModelStubWithRecipe extends ModelStub {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        private final Recipe recipe;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        ModelStubWithRecipe(Recipe recipe) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            requireNonNull(recipe);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            this.recipe \u003d recipe;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        public boolean hasRecipe(Recipe recipe) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            requireNonNull(recipe);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            return this.recipe.isSameRecipe(recipe);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * A Model stub that always accept the recipe being added."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    private class ModelStubAcceptingRecipeAdded extends ModelStub {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        final ArrayList\u003cRecipe\u003e recipesAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        public boolean hasRecipe(Recipe recipe) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            requireNonNull(recipe);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            return recipesAdded.stream().anyMatch(recipe::isSameRecipe);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        public void addRecipe(Recipe recipe) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            requireNonNull(recipe);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            recipesAdded.add(recipe);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        public ReadOnlyRecipeBook getRecipeBook() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            return new RecipeBook();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 69,
      "bakwxh": 46
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.getTypicalRecipeBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.RecipeBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public void execute_emptyRecipeBook_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public void execute_nonEmptyRecipeBook_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalRecipeBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalRecipeBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        expectedModel.setRecipeBook(new RecipeBook());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 25,
      "bakwxh": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearExerciseCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import static seedu.address.testutil.TypicalExercises.getTypicalWorkoutPlanner;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.WorkoutPlanner;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "public class ClearExerciseCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public void execute_emptyDukeCooks_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertCommandSuccess(new ClearExerciseCommand(), model, ClearExerciseCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public void execute_nonEmptyDukeCooks_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalWorkoutPlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalWorkoutPlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        expectedModel.setWorkoutPlanner(new WorkoutPlanner());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertCommandSuccess(new ClearExerciseCommand(), model, ClearExerciseCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulazman1997": 11,
      "-": 21
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BLOODTYPE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CALORIES;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CARBS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FATS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_HEIGHT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MEDICALHISTORY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PROTEIN;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REPETITIONS;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SETS;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_WEIGHT;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.RecipeBook;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.WorkoutPlanner;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.exercise.ExerciseNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.exercise.Intensity;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.exercise.MuscleType;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.exercise.MusclesTrained;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.recipe.RecipeNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.testutil.EditExerciseDescriptorBuilder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.testutil.EditRecipeDescriptorBuilder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public static final String VALID_NAME_FISH \u003d \"Fish and Chips\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public static final String VALID_NAME_BURGER \u003d \"Cheese Burger\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public static final String VALID_INGREDIENT_FISH \u003d \"Dory Fish\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public static final String VALID_INGREDIENT_BURGER \u003d \"Beef Patty\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public static final String VALID_CALORIES_FISH \u003d \"600\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public static final String VALID_CALORIES_BURGER \u003d \"610\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public static final String VALID_CARBS_FISH \u003d \"59\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public static final String VALID_CARBS_BURGER \u003d \"57\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public static final String VALID_FATS_FISH \u003d \"25\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public static final String VALID_FATS_BURGER \u003d \"31\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public static final String VALID_PROTEIN_FISH \u003d \"35\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public static final String VALID_PROTEIN_BURGER \u003d \"28\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public static final String VALID_BLOODTYPE \u003d \"A+\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public static final String VALID_GENDER \u003d \"male\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public static final String VALID_DOB \u003d \"30/08/1995\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public static final String VALID_HEIGHT \u003d \"180\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public static final String VALID_WEIGHT \u003d \"60\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public static final String VALID_HISTORY_DENGUE \u003d \"dengue\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public static final String VALID_HISTORY_STROKE \u003d \"stroke\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public static final String VALID_NAME_PUSHUP \u003d \"Pushup\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public static final String VALID_NAME_SITUP \u003d \"Situp\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public static final MusclesTrained VALID_MUSCLES_TRAINED \u003d new MusclesTrained(new MuscleType(\"Chest\"),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            new ArrayList\u003cMuscleType\u003e());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public static final Intensity VALID_INTENSITY_NAME \u003d Intensity.MEDIUM;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public static final Integer VALID_REPS_SIXTY \u003d 60;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public static final Integer VALID_SETS_FIVE \u003d 5;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public static final String BLOODTYPE_DESC \u003d \" \" + PREFIX_BLOODTYPE + VALID_BLOODTYPE;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public static final String GENDER_DESC \u003d \" \" + PREFIX_GENDER + VALID_GENDER;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public static final String DOB_DESC \u003d \" \" + PREFIX_DOB + VALID_DOB;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public static final String HEIGHT_DESC \u003d \" \" + PREFIX_HEIGHT + VALID_HEIGHT;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public static final String WEIGHT_DESC \u003d \" \" + PREFIX_WEIGHT + VALID_WEIGHT;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public static final String HISTORY_DESC_STROKE \u003d \" \" + PREFIX_MEDICALHISTORY + VALID_HISTORY_STROKE;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public static final String HISTORY_DESC_DENGUE \u003d \" \" + PREFIX_MEDICALHISTORY + VALID_HISTORY_DENGUE;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public static final String NAME_DESC_FISH \u003d \" \" + PREFIX_NAME + VALID_NAME_FISH;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public static final String NAME_DESC_BURGER \u003d \" \" + PREFIX_NAME + VALID_NAME_BURGER;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public static final String INGREDIENT_DESC_FISH \u003d \" \" + PREFIX_INGREDIENT + VALID_INGREDIENT_FISH;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public static final String INGREDIENT_DESC_BURGER \u003d \" \" + PREFIX_INGREDIENT + VALID_INGREDIENT_BURGER;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public static final String CALORIES_DESC_FISH \u003d \" \" + PREFIX_CALORIES + VALID_CALORIES_FISH;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public static final String CALORIES_DESC_BURGER \u003d \" \" + PREFIX_CALORIES + VALID_CALORIES_BURGER;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public static final String CARBS_DESC_FISH \u003d \" \" + PREFIX_CARBS + VALID_CARBS_FISH;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public static final String CARBS_DESC_BURGER \u003d \" \" + PREFIX_CARBS + VALID_CARBS_BURGER;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public static final String FATS_DESC_FISH \u003d \" \" + PREFIX_FATS + VALID_FATS_FISH;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public static final String FATS_DESC_BURGER \u003d \" \" + PREFIX_FATS + VALID_FATS_BURGER;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public static final String PROTEIN_DESC_FISH \u003d \" \" + PREFIX_PROTEIN + VALID_PROTEIN_FISH;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public static final String PROTEIN_DESC_BURGER \u003d \" \" + PREFIX_PROTEIN + VALID_PROTEIN_BURGER;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public static final String NAME_DESC_PUSHUP \u003d \" \" + PREFIX_NAME + VALID_NAME_PUSHUP;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public static final String NAME_DESC_SITUP \u003d \" \" + PREFIX_NAME + VALID_NAME_SITUP;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public static final String SETS_DESC_FIVE \u003d \" \" + PREFIX_REPETITIONS + VALID_SETS_FIVE;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public static final String REPS_DESC_SIXTY \u003d \" \" + PREFIX_REPETITIONS + VALID_REPS_SIXTY;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"Pushup\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public static final String INVALID_SETS_DESC \u003d \" \" + PREFIX_SETS + \"5*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public static final String INVALID_FOOD_NAME_DESC \u003d \" \" + PREFIX_NAME + \"Fish \u0026 Chips\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public static final String INVALID_INGREDIENT_DESC \u003d \" \" + PREFIX_INGREDIENT"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            + \"Cheese*Burger\"; // \u0027*\u0027 not allowed in ingredient names"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public static final String INVALID_CALORIES_DESC \u003d \" \" + PREFIX_CALORIES + \"1a\"; // \u0027a\u0027 not allowed in calories"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public static final String INVALID_CARBS_DESC \u003d \" \" + PREFIX_CARBS + \"1a\"; // \u0027a\u0027 not allowed in carbs"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public static final String INVALID_FATS_DESC \u003d \" \" + PREFIX_FATS + \"1a\"; // \u0027a\u0027 not allowed in fats"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public static final String INVALID_PROTEIN_DESC \u003d \" \" + PREFIX_PROTEIN + \"1a\"; // \u0027a\u0027 not allowed in protein"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_MEDICALHISTORY + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public static final EditExerciseCommand.EditExerciseDescriptor DESC_PUSHUP;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public static final EditExerciseCommand.EditExerciseDescriptor DESC_SITUP;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public static final EditRecipeCommand.EditRecipeDescriptor DESC_FISH;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public static final EditRecipeCommand.EditRecipeDescriptor DESC_BURGER;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public static final EditProfileCommand.EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public static final EditProfileCommand.EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        DESC_PUSHUP \u003d new EditExerciseDescriptorBuilder().withName(VALID_NAME_PUSHUP)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                .withDetails(null, null, null, null, null,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                        VALID_SETS_FIVE).build();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        DESC_SITUP \u003d new EditExerciseDescriptorBuilder().withName(VALID_NAME_SITUP)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                .withDetails(null, null, null, null, VALID_SETS_FIVE,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                        VALID_REPS_SIXTY).build();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                .withMedicalHistories(VALID_HISTORY_STROKE).build();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                .withMedicalHistories(VALID_HISTORY_DENGUE, VALID_HISTORY_STROKE).build();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        DESC_FISH \u003d new EditRecipeDescriptorBuilder().withName(VALID_NAME_FISH)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                .withIngredients(VALID_INGREDIENT_FISH)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                .withCalories(VALID_CALORIES_FISH).withCarbs(VALID_CARBS_FISH)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                .withFats(VALID_FATS_FISH).withProtein(VALID_PROTEIN_FISH)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        DESC_BURGER \u003d new EditRecipeDescriptorBuilder().withName(VALID_NAME_BURGER)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                .withIngredients(VALID_INGREDIENT_BURGER, VALID_INGREDIENT_FISH)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                .withCalories(VALID_CALORIES_BURGER).withCarbs(VALID_CARBS_BURGER)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                .withFats(VALID_FATS_BURGER).withProtein(VALID_PROTEIN_BURGER)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * - RecipeBook, filtered recipe list and selected recipe in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public static void assertRecipeCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        RecipeBook expectedRecipeBook \u003d new RecipeBook(actualModel.getRecipeBook());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        List\u003cRecipe\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredRecipeList());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertEquals(expectedRecipeBook, actualModel.getRecipeBook());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredRecipeList());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * - Duke Cooks, filtered person list and selected person in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        WorkoutPlanner expectedWorkoutPlanner \u003d (WorkoutPlanner) actualModel.getWorkoutPlanner();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertEquals(expectedWorkoutPlanner, actualModel.getWorkoutPlanner());"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * {@code model}\u0027s Duke Cooks."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public static void showExerciseAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredExerciseList().size());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        Exercise exercise \u003d model.getFilteredExerciseList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        final String[] splitName \u003d exercise.getExerciseName().exerciseName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        model.updateFilteredExerciseList(new ExerciseNameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertEquals(1, model.getFilteredExerciseList().size());"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * {@code model}\u0027s Duke Cooks."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the recipe at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * {@code model}\u0027s RecipeBook."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public static void showRecipeAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredRecipeList().size());"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        Recipe recipe \u003d model.getFilteredRecipeList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        final String[] splitName \u003d recipe.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        model.updateFilteredRecipeList(new RecipeNameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertEquals(1, model.getFilteredRecipeList().size());"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yyuanxin": 25,
      "khairulazman1997": 42,
      "-": 115,
      "bakwxh": 66
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteExerciseCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showExerciseAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import static seedu.address.testutil.TypicalExercises.getTypicalWorkoutPlanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EXERCISE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_EXERCISE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "public class DeleteExerciseCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalWorkoutPlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        Exercise exerciseToDelete \u003d model.getFilteredExerciseList().get(INDEX_FIRST_EXERCISE.getZeroBased());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        DeleteExerciseCommand deleteExerciseCommand \u003d new DeleteExerciseCommand(INDEX_FIRST_EXERCISE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteExerciseCommand.MESSAGE_DELETE_EXERCISE_SUCCESS, exerciseToDelete);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getWorkoutPlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        expectedModel.deleteExercise(exerciseToDelete);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertCommandSuccess(deleteExerciseCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredExerciseList().size() + 1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        DeleteExerciseCommand deleteExerciseCommand \u003d new DeleteExerciseCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertCommandFailure(deleteExerciseCommand, model, Messages.MESSAGE_INVALID_EXERCISE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        showExerciseAtIndex(model, INDEX_FIRST_EXERCISE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        Exercise exerciseToDelete \u003d model.getFilteredExerciseList().get(INDEX_FIRST_EXERCISE.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        DeleteExerciseCommand deleteExerciseCommand \u003d new DeleteExerciseCommand(INDEX_FIRST_EXERCISE);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteExerciseCommand.MESSAGE_DELETE_EXERCISE_SUCCESS, exerciseToDelete);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getWorkoutPlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        expectedModel.deleteExercise(exerciseToDelete);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertCommandSuccess(deleteExerciseCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        showExerciseAtIndex(model, INDEX_FIRST_EXERCISE);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_EXERCISE;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of Duke Cooks list"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getWorkoutPlanner().getExerciseList().size());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        DeleteExerciseCommand deleteExerciseCommand \u003d new DeleteExerciseCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertCommandFailure(deleteExerciseCommand, model, Messages.MESSAGE_INVALID_EXERCISE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        DeleteExerciseCommand deleteFirstCommand \u003d new DeleteExerciseCommand(INDEX_FIRST_EXERCISE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        DeleteExerciseCommand deleteSecondCommand \u003d new DeleteExerciseCommand(INDEX_SECOND_EXERCISE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        DeleteExerciseCommand deleteFirstCommandCopy \u003d new DeleteExerciseCommand(INDEX_FIRST_EXERCISE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        model.updateFilteredExerciseList(p -\u003e false);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertTrue(model.getFilteredExerciseList().isEmpty());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulazman1997": 35,
      "-": 74
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteRecipeCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertRecipeCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showRecipeAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_RECIPE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_RECIPE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.getTypicalRecipeBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bakwxh"
        },
        "content": " * {@code DeleteRecipeCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "public class DeleteRecipeCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalRecipeBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        Recipe recipeToDelete \u003d model.getFilteredRecipeList().get(INDEX_FIRST_RECIPE.getZeroBased());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        DeleteRecipeCommand deleteRecipeCommand \u003d new DeleteRecipeCommand(INDEX_FIRST_RECIPE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteRecipeCommand.MESSAGE_DELETE_RECIPE_SUCCESS, recipeToDelete);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getRecipeBook(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        expectedModel.deleteRecipe(recipeToDelete);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertCommandSuccess(deleteRecipeCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredRecipeList().size() + 1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        DeleteRecipeCommand deleteRecipeCommand \u003d new DeleteRecipeCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertRecipeCommandFailure(deleteRecipeCommand, model, Messages.MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        showRecipeAtIndex(model, INDEX_FIRST_RECIPE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        Recipe recipeToDelete \u003d model.getFilteredRecipeList().get(INDEX_FIRST_RECIPE.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        DeleteRecipeCommand deleteRecipeCommand \u003d new DeleteRecipeCommand(INDEX_FIRST_RECIPE);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteRecipeCommand.MESSAGE_DELETE_RECIPE_SUCCESS, recipeToDelete);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getRecipeBook(), new UserPrefs());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        expectedModel.deleteRecipe(recipeToDelete);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        showNoRecipe(expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertCommandSuccess(deleteRecipeCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        showRecipeAtIndex(model, INDEX_FIRST_RECIPE);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_RECIPE;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of RecipeBook list"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getRecipeBook().getRecipeList().size());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        DeleteRecipeCommand deleteRecipeCommand \u003d new DeleteRecipeCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertRecipeCommandFailure(deleteRecipeCommand, model, Messages.MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        DeleteRecipeCommand deleteFirstCommand \u003d new DeleteRecipeCommand(INDEX_FIRST_RECIPE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        DeleteRecipeCommand deleteSecondCommand \u003d new DeleteRecipeCommand(INDEX_SECOND_RECIPE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        DeleteRecipeCommand deleteFirstCommandCopy \u003d new DeleteRecipeCommand(INDEX_FIRST_RECIPE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        // different recipe -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    private void showNoRecipe(Model model) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        model.updateFilteredRecipeList(p -\u003e false);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertTrue(model.getFilteredRecipeList().isEmpty());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 70,
      "bakwxh": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditExerciseCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_PUSHUP;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_SITUP;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_SITUP;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SETS_FIVE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showExerciseAtIndex;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import static seedu.address.testutil.TypicalExercises.getTypicalWorkoutPlanner;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EXERCISE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_EXERCISE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.logic.commands.EditExerciseCommand.EditExerciseDescriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.WorkoutPlanner;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.testutil.EditExerciseDescriptorBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.testutil.ExerciseBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "public class EditExerciseCommandTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalWorkoutPlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        Exercise editedExercise \u003d new ExerciseBuilder().build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        EditExerciseDescriptor descriptor \u003d new EditExerciseDescriptorBuilder(editedExercise).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        EditExerciseCommand editExerciseCommand \u003d new EditExerciseCommand(INDEX_FIRST_EXERCISE, descriptor);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        String expectedMessage \u003d String.format(EditExerciseCommand.MESSAGE_EDIT_EXERCISE_SUCCESS, editedExercise);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new WorkoutPlanner(model.getWorkoutPlanner()), new UserPrefs());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        expectedModel.setExercise(model.getFilteredExerciseList().get(0), editedExercise);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertCommandSuccess(editExerciseCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        Index indexLastExercise \u003d Index.fromOneBased(model.getFilteredExerciseList().size());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        Exercise lastExercise \u003d model.getFilteredExerciseList().get(indexLastExercise.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        ExerciseBuilder exerciseInList \u003d new ExerciseBuilder(lastExercise);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        Exercise editedExercise \u003d exerciseInList.withName(VALID_NAME_SITUP)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                .withDetails(null, null, null, null, null, VALID_SETS_FIVE)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        EditExerciseCommand.EditExerciseDescriptor descriptor \u003d new EditExerciseDescriptorBuilder()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                .withName(VALID_NAME_SITUP)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                .withDetails(null, null, null, null, null, VALID_SETS_FIVE)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        EditExerciseCommand editExerciseCommand \u003d new EditExerciseCommand(indexLastExercise, descriptor);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        String expectedMessage \u003d String.format(EditExerciseCommand.MESSAGE_EDIT_EXERCISE_SUCCESS, editedExercise);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new WorkoutPlanner(model.getWorkoutPlanner()), new UserPrefs());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        expectedModel.setExercise(lastExercise, editedExercise);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertCommandSuccess(editExerciseCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        EditExerciseCommand editExerciseCommand \u003d new EditExerciseCommand(INDEX_FIRST_EXERCISE,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                new EditExerciseCommand.EditExerciseDescriptor());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        Exercise editedExercise \u003d model.getFilteredExerciseList().get(INDEX_FIRST_EXERCISE.getZeroBased());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        String expectedMessage \u003d String.format(EditExerciseCommand.MESSAGE_EDIT_EXERCISE_SUCCESS, editedExercise);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new WorkoutPlanner(model.getWorkoutPlanner()), new UserPrefs());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertCommandSuccess(editExerciseCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        showExerciseAtIndex(model, INDEX_FIRST_EXERCISE);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        Exercise exerciseInFilteredList \u003d model.getFilteredExerciseList().get(INDEX_FIRST_EXERCISE.getZeroBased());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        Exercise editedExercise \u003d new ExerciseBuilder(exerciseInFilteredList).withName(VALID_NAME_SITUP).build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        EditExerciseCommand editExerciseCommand \u003d new EditExerciseCommand(INDEX_FIRST_EXERCISE,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                new EditExerciseDescriptorBuilder().withName(VALID_NAME_SITUP).build());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        String expectedMessage \u003d String.format(EditExerciseCommand.MESSAGE_EDIT_EXERCISE_SUCCESS, editedExercise);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new WorkoutPlanner(model.getWorkoutPlanner()), new UserPrefs());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        expectedModel.setExercise(model.getFilteredExerciseList().get(0), editedExercise);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertCommandSuccess(editExerciseCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public void execute_duplicateExerciseUnfilteredList_failure() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        Exercise firstExercise \u003d model.getFilteredExerciseList().get(INDEX_FIRST_EXERCISE.getZeroBased());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        EditExerciseCommand.EditExerciseDescriptor descriptor \u003d new EditExerciseDescriptorBuilder(firstExercise)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        EditExerciseCommand editExerciseCommand \u003d new EditExerciseCommand(INDEX_SECOND_EXERCISE, descriptor);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertCommandFailure(editExerciseCommand, model, EditExerciseCommand.MESSAGE_DUPLICATE_EXERCISE);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public void execute_duplicateExerciseFilteredList_failure() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        showExerciseAtIndex(model, INDEX_FIRST_EXERCISE);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        // edit exercise in filtered list into a duplicate in Duke Cooks"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        Exercise exerciseInList \u003d model.getWorkoutPlanner().getExerciseList().get(INDEX_SECOND_EXERCISE.getZeroBased());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        EditExerciseCommand editExerciseCommand \u003d new EditExerciseCommand(INDEX_FIRST_EXERCISE,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                new EditExerciseDescriptorBuilder(exerciseInList).build());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertCommandFailure(editExerciseCommand, model, EditExerciseCommand.MESSAGE_DUPLICATE_EXERCISE);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public void execute_invalidExerciseIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredExerciseList().size() + 1);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        EditExerciseCommand.EditExerciseDescriptor descriptor \u003d new EditExerciseDescriptorBuilder()"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                .withName(VALID_NAME_SITUP).build();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        EditExerciseCommand editExerciseCommand \u003d new EditExerciseCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertCommandFailure(editExerciseCommand, model, Messages.MESSAGE_INVALID_EXERCISE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * but smaller than size of Duke Cooks"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public void execute_invalidExerciseIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        showExerciseAtIndex(model, INDEX_FIRST_EXERCISE);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_EXERCISE;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of Duke Cooks list"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getWorkoutPlanner().getExerciseList().size());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        EditExerciseCommand editExerciseCommand \u003d new EditExerciseCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                new EditExerciseDescriptorBuilder().withName(VALID_NAME_SITUP).build());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertCommandFailure(editExerciseCommand, model, Messages.MESSAGE_INVALID_EXERCISE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        final EditExerciseCommand standardCommand \u003d new EditExerciseCommand(INDEX_FIRST_EXERCISE, DESC_PUSHUP);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        EditExerciseCommand.EditExerciseDescriptor copyDescriptor \u003d new EditExerciseCommand"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                .EditExerciseDescriptor(DESC_PUSHUP);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        EditExerciseCommand commandWithSameValues \u003d new EditExerciseCommand(INDEX_FIRST_EXERCISE, copyDescriptor);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearExerciseCommand()));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertFalse(standardCommand.equals(new EditExerciseCommand(INDEX_SECOND_EXERCISE, DESC_PUSHUP)));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertFalse(standardCommand.equals(new EditExerciseCommand(INDEX_FIRST_EXERCISE, DESC_SITUP)));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulazman1997": 179
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditExerciseDescriptorTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_PUSHUP;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_SITUP;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_SITUP;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_REPS_SIXTY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.logic.commands.EditExerciseCommand.EditExerciseDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.testutil.EditExerciseDescriptorBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "public class EditExerciseDescriptorTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        EditExerciseDescriptor descriptorWithSameValues \u003d new EditExerciseDescriptor(DESC_PUSHUP);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertTrue(DESC_PUSHUP.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertTrue(DESC_PUSHUP.equals(DESC_PUSHUP));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertFalse(DESC_PUSHUP.equals(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertFalse(DESC_PUSHUP.equals(5));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertFalse(DESC_PUSHUP.equals(DESC_SITUP));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        EditExerciseCommand.EditExerciseDescriptor editedAmy \u003d new EditExerciseDescriptorBuilder(DESC_PUSHUP)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                .withName(VALID_NAME_SITUP).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertFalse(DESC_PUSHUP.equals(editedAmy));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        editedAmy \u003d new EditExerciseDescriptorBuilder(DESC_PUSHUP)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                .withDetails(null, null, null, null, null, VALID_REPS_SIXTY)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertFalse(DESC_PUSHUP.equals(editedAmy));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulazman1997": 20,
      "-": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditPersonDescriptorTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_HISTORY_DENGUE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import seedu.address.logic.commands.EditProfileCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptorWithSameValues \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(DESC_AMY));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withMedicalHistories(VALID_HISTORY_DENGUE).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yyuanxin": 3,
      "-": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditRecipeCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BURGER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_FISH;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INGREDIENT_BURGER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BURGER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertRecipeCommandFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showRecipeAtIndex;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_RECIPE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_RECIPE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.getTypicalRecipeBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.logic.commands.EditRecipeCommand.EditRecipeDescriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.RecipeBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.testutil.EditRecipeDescriptorBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.testutil.RecipeBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bakwxh"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bakwxh"
        },
        "content": " * and unit tests for EditRecipeCommand."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "public class EditRecipeCommandTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalRecipeBook(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        Recipe editedRecipe \u003d new RecipeBuilder().build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        EditRecipeDescriptor descriptor \u003d new EditRecipeDescriptorBuilder(editedRecipe).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        EditRecipeCommand editRecipeCommand \u003d new EditRecipeCommand(INDEX_FIRST_RECIPE, descriptor);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        String expectedMessage \u003d String.format(EditRecipeCommand.MESSAGE_EDIT_RECIPE_SUCCESS, editedRecipe);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new RecipeBook(model.getRecipeBook()), new UserPrefs());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        expectedModel.setRecipe(model.getFilteredRecipeList().get(0), editedRecipe);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertCommandSuccess(editRecipeCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        Index indexLastRecipe \u003d Index.fromOneBased(model.getFilteredRecipeList().size());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        Recipe lastRecipe \u003d model.getFilteredRecipeList().get(indexLastRecipe.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        RecipeBuilder recipeInList \u003d new RecipeBuilder(lastRecipe);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        Recipe editedRecipe \u003d recipeInList.withName(VALID_NAME_BURGER)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                .withIngredients(VALID_INGREDIENT_BURGER).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        EditRecipeDescriptor descriptor \u003d new EditRecipeDescriptorBuilder().withName(VALID_NAME_BURGER)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                .withIngredients(VALID_INGREDIENT_BURGER).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        EditRecipeCommand editRecipeCommand \u003d new EditRecipeCommand(indexLastRecipe, descriptor);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        String expectedMessage \u003d String.format(EditRecipeCommand.MESSAGE_EDIT_RECIPE_SUCCESS, editedRecipe);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new RecipeBook(model.getRecipeBook()), new UserPrefs());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        expectedModel.setRecipe(lastRecipe, editedRecipe);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertCommandSuccess(editRecipeCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        EditRecipeCommand editRecipeCommand \u003d new EditRecipeCommand(INDEX_FIRST_RECIPE, new EditRecipeDescriptor());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        Recipe editedRecipe \u003d model.getFilteredRecipeList().get(INDEX_FIRST_RECIPE.getZeroBased());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        String expectedMessage \u003d String.format(EditRecipeCommand.MESSAGE_EDIT_RECIPE_SUCCESS, editedRecipe);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new RecipeBook(model.getRecipeBook()), new UserPrefs());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertCommandSuccess(editRecipeCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        showRecipeAtIndex(model, INDEX_FIRST_RECIPE);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        Recipe recipeInFilteredList \u003d model.getFilteredRecipeList().get(INDEX_FIRST_RECIPE.getZeroBased());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        Recipe editedRecipe \u003d new RecipeBuilder(recipeInFilteredList).withName(VALID_NAME_BURGER).build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        EditRecipeCommand editRecipeCommand \u003d new EditRecipeCommand(INDEX_FIRST_RECIPE,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                new EditRecipeDescriptorBuilder().withName(VALID_NAME_BURGER).build());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        String expectedMessage \u003d String.format(EditRecipeCommand.MESSAGE_EDIT_RECIPE_SUCCESS, editedRecipe);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new RecipeBook(model.getRecipeBook()), new UserPrefs());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        expectedModel.setRecipe(model.getFilteredRecipeList().get(0), editedRecipe);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertCommandSuccess(editRecipeCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public void execute_duplicateRecipeUnfilteredList_failure() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        Recipe firstRecipe \u003d model.getFilteredRecipeList().get(INDEX_FIRST_RECIPE.getZeroBased());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        EditRecipeDescriptor descriptor \u003d new EditRecipeDescriptorBuilder(firstRecipe).build();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        EditRecipeCommand editRecipeCommand \u003d new EditRecipeCommand(INDEX_SECOND_RECIPE, descriptor);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertRecipeCommandFailure(editRecipeCommand, model, EditRecipeCommand.MESSAGE_DUPLICATE_RECIPE);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public void execute_duplicateRecipeFilteredList_failure() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        showRecipeAtIndex(model, INDEX_FIRST_RECIPE);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        // edit recipe in filtered list into a duplicate in RecipeBook"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        Recipe recipeInList \u003d model.getRecipeBook().getRecipeList().get(INDEX_SECOND_RECIPE.getZeroBased());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        EditRecipeCommand editRecipeCommand \u003d new EditRecipeCommand(INDEX_FIRST_RECIPE,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                new EditRecipeDescriptorBuilder(recipeInList).build());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertRecipeCommandFailure(editRecipeCommand, model, EditRecipeCommand.MESSAGE_DUPLICATE_RECIPE);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public void execute_invalidRecipeIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredRecipeList().size() + 1);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        EditRecipeDescriptor descriptor \u003d new EditRecipeDescriptorBuilder().withName(VALID_NAME_BURGER).build();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        EditRecipeCommand editRecipeCommand \u003d new EditRecipeCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertRecipeCommandFailure(editRecipeCommand, model, Messages.MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * but smaller than size of RecipeBook"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public void execute_invalidRecipeIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        showRecipeAtIndex(model, INDEX_FIRST_RECIPE);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_RECIPE;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of RecipeBook list"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getRecipeBook().getRecipeList().size());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        EditRecipeCommand editRecipeCommand \u003d new EditRecipeCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                new EditRecipeDescriptorBuilder().withName(VALID_NAME_BURGER).build());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertRecipeCommandFailure(editRecipeCommand, model, Messages.MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        final EditRecipeCommand standardCommand \u003d new EditRecipeCommand(INDEX_FIRST_RECIPE, DESC_FISH);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        EditRecipeDescriptor copyDescriptor \u003d new EditRecipeCommand.EditRecipeDescriptor(DESC_FISH);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        EditRecipeCommand commandWithSameValues \u003d new EditRecipeCommand(INDEX_FIRST_RECIPE, copyDescriptor);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertFalse(standardCommand.equals(new EditRecipeCommand(INDEX_SECOND_RECIPE, DESC_FISH)));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertFalse(standardCommand.equals(new EditRecipeCommand(INDEX_FIRST_RECIPE, DESC_BURGER)));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 91,
      "bakwxh": 82
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditRecipeDescriptorTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BURGER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_FISH;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INGREDIENT_BURGER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BURGER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.logic.commands.EditRecipeCommand.EditRecipeDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.testutil.EditRecipeDescriptorBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "public class EditRecipeDescriptorTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        EditRecipeCommand.EditRecipeDescriptor descriptorWithSameValues \u003d new EditRecipeCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                .EditRecipeDescriptor(DESC_FISH);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertTrue(DESC_FISH.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertTrue(DESC_FISH.equals(DESC_FISH));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertFalse(DESC_FISH.equals(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertFalse(DESC_FISH.equals(5));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertFalse(DESC_FISH.equals(DESC_BURGER));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        EditRecipeDescriptor editedAmy \u003d new EditRecipeDescriptorBuilder(DESC_FISH).withName(VALID_NAME_BURGER).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertFalse(DESC_FISH.equals(editedAmy));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        // different ingredients -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        editedAmy \u003d new EditRecipeDescriptorBuilder(DESC_FISH).withIngredients(VALID_INGREDIENT_BURGER).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertFalse(DESC_FISH.equals(editedAmy));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 25,
      "bakwxh": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindExerciseCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import static seedu.address.testutil.TypicalExercises.CURTSY_LUNGE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import static seedu.address.testutil.TypicalExercises.EXPLOSIVE_PUSHUP;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import static seedu.address.testutil.TypicalExercises.FLYE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import static seedu.address.testutil.TypicalExercises.getTypicalWorkoutPlanner;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.exercise.ExerciseNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "public class FindExerciseCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalWorkoutPlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalWorkoutPlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        ExerciseNameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                new ExerciseNameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        ExerciseNameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                new ExerciseNameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        FindExerciseCommand findFirstCommand \u003d new FindExerciseCommand(firstPredicate);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        FindExerciseCommand findSecondCommand \u003d new FindExerciseCommand(secondPredicate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        FindExerciseCommand findFirstCommandCopy \u003d new FindExerciseCommand(firstPredicate);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_zeroKeywords_noPersonFound() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        ExerciseNameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        FindExerciseCommand command \u003d new FindExerciseCommand(predicate);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        expectedModel.updateFilteredExerciseList(predicate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredExerciseList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_multipleKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        ExerciseNameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        FindExerciseCommand command \u003d new FindExerciseCommand(predicate);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        expectedModel.updateFilteredExerciseList(predicate);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertEquals(Arrays.asList(CURTSY_LUNGE, EXPLOSIVE_PUSHUP, FLYE), model.getFilteredExerciseList());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    private ExerciseNameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        return new ExerciseNameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulazman1997": 26,
      "-": 57
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindRecipeCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_RECIPE_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.CHICKEN;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.TEA;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.TUNA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.getTypicalRecipeBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.recipe.RecipeNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bakwxh"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindRecipeCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "public class FindRecipeCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalRecipeBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalRecipeBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        RecipeNameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                new RecipeNameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        RecipeNameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                new RecipeNameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        FindRecipeCommand findFirstCommand \u003d new FindRecipeCommand(firstPredicate);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        FindRecipeCommand findSecondCommand \u003d new FindRecipeCommand(secondPredicate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        FindRecipeCommand findFirstCommandCopy \u003d new FindRecipeCommand(firstPredicate);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        // different recipe -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public void execute_zeroKeywords_noRecipeFound() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_RECIPE_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        RecipeNameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        FindRecipeCommand command \u003d new FindRecipeCommand(predicate);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        expectedModel.updateFilteredRecipeList(predicate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredRecipeList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public void execute_multipleKeywords_multipleRecipesFound() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_RECIPE_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        RecipeNameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Sandwich Fried Tea\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        FindRecipeCommand command \u003d new FindRecipeCommand(predicate);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        expectedModel.updateFilteredRecipeList(predicate);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertEquals(Arrays.asList(TUNA, CHICKEN, TEA), model.getFilteredRecipeList());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * Parses {@code userInput} into a {@code RecipeNameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    private RecipeNameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        return new RecipeNameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 50,
      "bakwxh": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showRecipeAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_RECIPE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.getTypicalRecipeBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        model \u003d new ModelManager(getTypicalRecipeBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getRecipeBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        showRecipeAtIndex(model, INDEX_FIRST_RECIPE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 33,
      "bakwxh": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListExerciseCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showExerciseAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import static seedu.address.testutil.TypicalExercises.getTypicalWorkoutPlanner;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EXERCISE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "public class ListExerciseCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        model \u003d new ModelManager(getTypicalWorkoutPlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getWorkoutPlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertCommandSuccess(new ListExerciseCommand(), model, ListExerciseCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        showExerciseAtIndex(model, INDEX_FIRST_EXERCISE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertCommandSuccess(new ListExerciseCommand(), model, ListExerciseCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulazman1997": 10,
      "-": 29
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddExerciseCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_FOOD_NAME_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_SETS_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_PUSHUP;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_SITUP;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.REPS_DESC_SIXTY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SETS_DESC_FIVE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_SITUP;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_REPS_SIXTY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SETS_FIVE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import static seedu.address.testutil.TypicalExercises.PUSHUP;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import static seedu.address.testutil.TypicalExercises.SITUP;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.logic.commands.AddExerciseCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.details.ExerciseDetail;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.exercise.ExerciseName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.testutil.ExerciseBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "public class AddExerciseCommandParserTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    private AddExerciseCommandParser parser \u003d new AddExerciseCommandParser();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        Exercise expectedExercise \u003d new ExerciseBuilder(SITUP)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                .withDetails(null, null, null, null, null, VALID_SETS_FIVE)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_SITUP"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                 + SETS_DESC_FIVE, new AddExerciseCommand(expectedExercise));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_PUSHUP + NAME_DESC_SITUP"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                 + SETS_DESC_FIVE, new AddExerciseCommand(expectedExercise));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        Exercise expectedExerciseMultipleTags \u003d new ExerciseBuilder(SITUP)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                .withDetails(null, null, null, null,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                        VALID_REPS_SIXTY, VALID_SETS_FIVE)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_SITUP"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                + REPS_DESC_SIXTY + SETS_DESC_FIVE, new AddExerciseCommand(expectedExerciseMultipleTags));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        Exercise expectedExercise \u003d new ExerciseBuilder(PUSHUP)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                .withDetails(null, null, null, null, null, null)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_PUSHUP,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                new AddExerciseCommand(expectedExercise));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddExerciseCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_SITUP,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_SITUP,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertParseFailure(parser, INVALID_FOOD_NAME_DESC"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                + REPS_DESC_SIXTY + SETS_DESC_FIVE, ExerciseName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_SITUP"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                + INVALID_SETS_DESC + VALID_SETS_FIVE, ExerciseDetail.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertParseFailure(parser, INVALID_FOOD_NAME_DESC,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                ExerciseName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_SITUP"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                 + REPS_DESC_SIXTY + SETS_DESC_FIVE,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddExerciseCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulazman1997": 47,
      "-": 49
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddProfileCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.BLOODTYPE_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DOB_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GENDER_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.HEIGHT_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.HISTORY_DESC_DENGUE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.HISTORY_DESC_STROKE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_FOOD_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_HISTORY_DENGUE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_HISTORY_STROKE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.WEIGHT_DESC;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import static seedu.address.testutil.TypicalProfiles.AMY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import static seedu.address.testutil.TypicalProfiles.BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import seedu.address.logic.commands.AddProfileCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.common.Name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.medical.MedicalHistory;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "public class AddProfileCommandParserTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    private AddProfileCommandParser parser \u003d new AddProfileCommandParser();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(BOB).withMedicalHistories(VALID_HISTORY_STROKE).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + BLOODTYPE_DESC + GENDER_DESC"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                + DOB_DESC + WEIGHT_DESC + HEIGHT_DESC + HISTORY_DESC_STROKE, new AddProfileCommand(expectedPerson));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + BLOODTYPE_DESC + GENDER_DESC"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                + DOB_DESC + WEIGHT_DESC + HEIGHT_DESC"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                 + HISTORY_DESC_STROKE, new AddProfileCommand(expectedPerson));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        Person expectedPersonMultipleTags \u003d new PersonBuilder(BOB)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                .withMedicalHistories(VALID_HISTORY_STROKE, VALID_HISTORY_DENGUE)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + BLOODTYPE_DESC + GENDER_DESC"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                + DOB_DESC + WEIGHT_DESC + HEIGHT_DESC"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                + HISTORY_DESC_DENGUE + HISTORY_DESC_STROKE, new AddProfileCommand(expectedPersonMultipleTags));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withMedicalHistories().build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + BLOODTYPE_DESC + GENDER_DESC"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                        + DOB_DESC + WEIGHT_DESC + HEIGHT_DESC,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                new AddProfileCommand(expectedPerson));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddProfileCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertParseFailure(parser, INVALID_FOOD_NAME_DESC + BLOODTYPE_DESC + GENDER_DESC"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                + DOB_DESC + WEIGHT_DESC + HEIGHT_DESC"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                + HISTORY_DESC_DENGUE + HISTORY_DESC_STROKE, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + BLOODTYPE_DESC + GENDER_DESC"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                + DOB_DESC + WEIGHT_DESC + HEIGHT_DESC"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                + INVALID_TAG_DESC + VALID_HISTORY_STROKE, MedicalHistory.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertParseFailure(parser, INVALID_FOOD_NAME_DESC + BLOODTYPE_DESC + GENDER_DESC"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                        + DOB_DESC + WEIGHT_DESC + HEIGHT_DESC + INVALID_TAG_DESC,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + BLOODTYPE_DESC + GENDER_DESC"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                        + DOB_DESC + WEIGHT_DESC + HEIGHT_DESC"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                 + HISTORY_DESC_DENGUE + HISTORY_DESC_STROKE,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddProfileCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yyuanxin": 97,
      "khairulazman1997": 3,
      "bakwxh": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddRecipeCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CALORIES_DESC_BURGER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CARBS_DESC_BURGER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.FATS_DESC_BURGER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INGREDIENT_DESC_BURGER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INGREDIENT_DESC_FISH;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_FOOD_NAME_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_INGREDIENT_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BURGER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_FISH;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PROTEIN_DESC_BURGER;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INGREDIENT_BURGER;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INGREDIENT_FISH;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BURGER;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.BURGER;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.logic.commands.AddRecipeCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.common.Name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.recipe.Ingredient;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.testutil.RecipeBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "public class AddRecipeCommandParserTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    private AddRecipeCommandParser parser \u003d new AddRecipeCommandParser();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        Recipe expectedRecipe \u003d new RecipeBuilder(BURGER).build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BURGER"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                 + INGREDIENT_DESC_BURGER + CALORIES_DESC_BURGER + CARBS_DESC_BURGER + FATS_DESC_BURGER"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                 + PROTEIN_DESC_BURGER, new AddRecipeCommand(expectedRecipe));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_FISH + NAME_DESC_BURGER"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                + INGREDIENT_DESC_BURGER + CALORIES_DESC_BURGER + CARBS_DESC_BURGER + FATS_DESC_BURGER"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                + PROTEIN_DESC_BURGER, new AddRecipeCommand(expectedRecipe));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        // multiple ingredients - all accepted"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        Recipe expectedRecipeMultipleIngredients \u003d new RecipeBuilder(BURGER)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                .withIngredients(VALID_INGREDIENT_BURGER, VALID_INGREDIENT_FISH)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BURGER + INGREDIENT_DESC_BURGER + INGREDIENT_DESC_FISH"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                + CALORIES_DESC_BURGER + CARBS_DESC_BURGER + FATS_DESC_BURGER"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                + PROTEIN_DESC_BURGER, new AddRecipeCommand(expectedRecipeMultipleIngredients));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    //    Removed this test case as recipe has no optional fields."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    //    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    //        // zero ingredientss"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    //        Recipe expectedRecipe \u003d new RecipeBuilder(FISH).withIngredients().build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    //        assertParseSuccess(parser, NAME_DESC_FISH,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    //                new AddRecipeCommand(expectedRecipe));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddRecipeCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BURGER,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BURGER,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertParseFailure(parser, INVALID_FOOD_NAME_DESC + INGREDIENT_DESC_BURGER"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                + CALORIES_DESC_BURGER + CARBS_DESC_BURGER + FATS_DESC_BURGER"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                + PROTEIN_DESC_BURGER, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        // invalid ingredient"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BURGER + INVALID_INGREDIENT_DESC"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                + CALORIES_DESC_BURGER + CARBS_DESC_BURGER + FATS_DESC_BURGER"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                + PROTEIN_DESC_BURGER, Ingredient.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertParseFailure(parser, INVALID_FOOD_NAME_DESC + INVALID_INGREDIENT_DESC"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                        + CALORIES_DESC_BURGER + CARBS_DESC_BURGER + FATS_DESC_BURGER"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                        + PROTEIN_DESC_BURGER, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BURGER + INVALID_INGREDIENT_DESC"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                        + CALORIES_DESC_BURGER + CARBS_DESC_BURGER + FATS_DESC_BURGER + PROTEIN_DESC_BURGER,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddRecipeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulazman1997": 3,
      "-": 43,
      "bakwxh": 55
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ArgumentTokenizerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        String argsString \u003d \"  some random string /i ingredient with leading and trailing spaces \";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /** Also covers: testing for prefixes not specified as a prefix **/"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 149,
      "bakwxh": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteExerciseCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EXERCISE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.logic.commands.DeleteExerciseCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "public class DeleteExerciseCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    private DeleteExerciseCommandParser parser \u003d new DeleteExerciseCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteExerciseCommand(INDEX_FIRST_EXERCISE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertParseFailure(parser, \"a\", String"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                .format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteExerciseCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulazman1997": 7,
      "-": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteRecipeCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_RECIPE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.logic.commands.DeleteRecipeCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bakwxh"
        },
        "content": " * outside of the DeleteRecipeCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bakwxh"
        },
        "content": " * same path through the DeleteRecipeCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "public class DeleteRecipeCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    private DeleteRecipeCommandParser parser \u003d new DeleteRecipeCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteRecipeCommand(INDEX_FIRST_RECIPE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                DeleteRecipeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 24,
      "bakwxh": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DukeCooksParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_RECIPE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.logic.commands.AddRecipeCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.logic.commands.DeleteRecipeCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import seedu.address.logic.commands.EditProfileCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.logic.commands.EditRecipeCommand.EditRecipeDescriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.logic.commands.EditRecipeCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.logic.commands.FindRecipeCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.recipe.RecipeNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.testutil.EditRecipeDescriptorBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.testutil.RecipeBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.testutil.RecipeUtil;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "public class DukeCooksParserTest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    private final DukeCooksParser parser \u003d new DukeCooksParser();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public void parseCommand_addRecipe() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        Recipe recipe \u003d new RecipeBuilder().build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        AddRecipeCommand command \u003d (AddRecipeCommand) parser.parseCommand(RecipeUtil.getAddRecipeCommand(recipe));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertEquals(new AddRecipeCommand(recipe), command);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public void parseCommand_deleteRecipe() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        DeleteRecipeCommand command \u003d (DeleteRecipeCommand) parser.parseCommand("
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                DeleteRecipeCommand.COMMAND_WORD + \" \" + DeleteRecipeCommand.VARIANT_WORD"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                        + \" \" + INDEX_FIRST_RECIPE.getOneBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertEquals(new DeleteRecipeCommand(INDEX_FIRST_RECIPE), command);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        EditProfileCommand.EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        EditProfileCommand command \u003d (EditProfileCommand) parser.parseCommand(EditProfileCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        assertEquals(new EditProfileCommand(descriptor), command);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public void parseCommand_editRecipe() throws Exception {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        Recipe recipe \u003d new RecipeBuilder().build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        EditRecipeDescriptor descriptor \u003d new EditRecipeDescriptorBuilder(recipe).build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        EditRecipeCommand command \u003d (EditRecipeCommand) parser.parseCommand(EditRecipeCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                + \" \" + DeleteRecipeCommand.VARIANT_WORD + \" \" + INDEX_FIRST_RECIPE.getOneBased() + \" \""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                + RecipeUtil.getEditRecipeDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertEquals(new EditRecipeCommand(INDEX_FIRST_RECIPE, descriptor), command);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public void parseCommand_findRecipe() throws Exception {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        FindRecipeCommand command \u003d (FindRecipeCommand) parser.parseCommand("
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                FindRecipeCommand.COMMAND_WORD + \" \" + DeleteRecipeCommand.VARIANT_WORD"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                        + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertEquals(new FindRecipeCommand(new RecipeNameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public void parseCommand_listRecipe() throws Exception {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yyuanxin": 4,
      "khairulazman1997": 2,
      "-": 79,
      "bakwxh": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditExerciseCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_FOOD_NAME_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_SETS_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_PUSHUP;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.REPS_DESC_SIXTY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SETS_DESC_FIVE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_PUSHUP;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_REPS_SIXTY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SETS_FIVE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DISTANCE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EXERCISE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_EXERCISE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.logic.commands.EditExerciseCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.logic.commands.EditExerciseCommand.EditExerciseDescriptor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.details.ExerciseDetail;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.exercise.ExerciseName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.testutil.EditExerciseDescriptorBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "public class EditExerciseCommandParserTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_DISTANCE;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditExerciseCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    private EditExerciseCommandParser parser \u003d new EditExerciseCommandParser();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_PUSHUP, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertParseFailure(parser, \"1\", EditExerciseCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_PUSHUP, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_PUSHUP, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_FOOD_NAME_DESC, ExerciseName.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_SETS_DESC, ExerciseDetail.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertParseFailure(parser, \"1\" + SETS_DESC_FIVE"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                + REPS_DESC_SIXTY + TAG_EMPTY, ExerciseDetail.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertParseFailure(parser, \"1\" + SETS_DESC_FIVE"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                + TAG_EMPTY + REPS_DESC_SIXTY, ExerciseDetail.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                + SETS_DESC_FIVE + REPS_DESC_SIXTY, ExerciseDetail.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_FOOD_NAME_DESC,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                ExerciseName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_EXERCISE;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + REPS_DESC_SIXTY"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                 + NAME_DESC_PUSHUP + SETS_DESC_FIVE;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        EditExerciseDescriptor descriptor \u003d new EditExerciseDescriptorBuilder().withName(VALID_NAME_PUSHUP)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                .withDetails(null, null, null, null, VALID_REPS_SIXTY, VALID_SETS_FIVE)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        EditExerciseCommand expectedCommand \u003d new EditExerciseCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_PUSHUP;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        EditExerciseDescriptor descriptor \u003d new EditExerciseDescriptorBuilder().withName(VALID_NAME_PUSHUP).build();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        EditExerciseCommand expectedCommand \u003d new EditExerciseCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + SETS_DESC_FIVE;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        descriptor \u003d new EditExerciseDescriptorBuilder()"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                .withDetails(null, null, null, null, null, VALID_SETS_FIVE)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        expectedCommand \u003d new EditExerciseCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_EXERCISE;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "bigjunnn"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased()"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                + SETS_DESC_FIVE + SETS_DESC_FIVE"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                + REPS_DESC_SIXTY;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        EditExerciseCommand.EditExerciseDescriptor descriptor \u003d new EditExerciseDescriptorBuilder()"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                .withDetails(null, null, null, null,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                        VALID_REPS_SIXTY, VALID_SETS_FIVE)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        EditExerciseCommand expectedCommand \u003d new EditExerciseCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        EditExerciseCommand.EditExerciseDescriptor descriptor \u003d new EditExerciseDescriptorBuilder()"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                .withDetails(null, null, null, null, null, null)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        EditExerciseCommand expectedCommand \u003d new EditExerciseCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bigjunnn": 1,
      "khairulazman1997": 60,
      "-": 83
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditRecipeCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CALORIES_DESC_FISH;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CARBS_DESC_FISH;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.FATS_DESC_FISH;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INGREDIENT_DESC_BURGER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INGREDIENT_DESC_FISH;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_FOOD_NAME_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_INGREDIENT_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_FISH;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PROTEIN_DESC_FISH;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CALORIES_FISH;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CARBS_FISH;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_FATS_FISH;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INGREDIENT_BURGER;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INGREDIENT_FISH;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_FISH;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PROTEIN_FISH;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_RECIPE;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_RECIPE;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_RECIPE;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.FISH;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.logic.commands.EditRecipeCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.logic.commands.EditRecipeCommand.EditRecipeDescriptor;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.common.Name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.recipe.Ingredient;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.testutil.EditRecipeDescriptorBuilder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "public class EditRecipeCommandParserTest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    private static final String INGREDIENT_EMPTY \u003d \" \" + PREFIX_INGREDIENT;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditRecipeCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    private EditRecipeCommandParser parser \u003d new EditRecipeCommandParser();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_FISH, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertParseFailure(parser, \"1\", EditRecipeCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_FISH, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_FISH, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertParseFailure(parser, \"1 zxc/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_FOOD_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_INGREDIENT_DESC, Ingredient.MESSAGE_CONSTRAINTS); // invalid ingredient"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        // while parsing {@code PREFIX_INGREDIENT} alone will reset the ingredients of the {@code Recipe} being edited,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        // parsing it together with a valid ingredient results in error"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertParseFailure(parser, \"1\" + INGREDIENT_DESC_FISH + INGREDIENT_DESC_BURGER + INGREDIENT_EMPTY,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                Ingredient.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertParseFailure(parser, \"1\" + INGREDIENT_DESC_FISH + INGREDIENT_EMPTY + INGREDIENT_DESC_BURGER,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                Ingredient.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertParseFailure(parser, \"1\" + INGREDIENT_EMPTY + INGREDIENT_DESC_FISH + INGREDIENT_DESC_BURGER,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                Ingredient.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_FOOD_NAME_DESC,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_RECIPE;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INGREDIENT_DESC_BURGER"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                 + NAME_DESC_FISH + INGREDIENT_DESC_FISH;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        EditRecipeCommand.EditRecipeDescriptor descriptor \u003d new EditRecipeDescriptorBuilder(FISH)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                .withIngredients(VALID_INGREDIENT_BURGER, VALID_INGREDIENT_FISH).build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        EditRecipeCommand expectedCommand \u003d new EditRecipeCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_RECIPE;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_FISH;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        EditRecipeDescriptor descriptor \u003d new EditRecipeDescriptorBuilder().withName(VALID_NAME_FISH).build();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        EditRecipeCommand expectedCommand \u003d new EditRecipeCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        // ingredients"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + INGREDIENT_DESC_FISH;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        descriptor \u003d new EditRecipeDescriptorBuilder().withIngredients(VALID_INGREDIENT_FISH).build();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        expectedCommand \u003d new EditRecipeCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        // calories"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + CALORIES_DESC_FISH;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        descriptor \u003d new EditRecipeDescriptorBuilder().withCalories(VALID_CALORIES_FISH).build();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        expectedCommand \u003d new EditRecipeCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        // carbs"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + CARBS_DESC_FISH;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        descriptor \u003d new EditRecipeDescriptorBuilder().withCarbs(VALID_CARBS_FISH).build();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        expectedCommand \u003d new EditRecipeCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        // fats"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + FATS_DESC_FISH;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        descriptor \u003d new EditRecipeDescriptorBuilder().withFats(VALID_FATS_FISH).build();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        expectedCommand \u003d new EditRecipeCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        //protein"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PROTEIN_DESC_FISH;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        descriptor \u003d new EditRecipeDescriptorBuilder().withProtein(VALID_PROTEIN_FISH).build();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        expectedCommand \u003d new EditRecipeCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_RECIPE;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "bigjunnn"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased()"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                + INGREDIENT_DESC_FISH + INGREDIENT_DESC_FISH"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                + INGREDIENT_DESC_BURGER;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        EditRecipeDescriptor descriptor \u003d new EditRecipeDescriptorBuilder()"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                .withIngredients(VALID_INGREDIENT_FISH, VALID_INGREDIENT_BURGER)"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        EditRecipeCommand expectedCommand \u003d new EditRecipeCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public void parse_resetIngredients_success() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_RECIPE;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INGREDIENT_EMPTY;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        EditRecipeCommand.EditRecipeDescriptor descriptor \u003d new EditRecipeDescriptorBuilder().withIngredients().build();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        EditRecipeCommand expectedCommand \u003d new EditRecipeCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bigjunnn": 1,
      "khairulazman1997": 3,
      "-": 74,
      "bakwxh": 93
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FindExerciseCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.logic.commands.FindExerciseCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.exercise.ExerciseNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "public class FindExerciseCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    private FindExerciseCommandParser parser \u003d new FindExerciseCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertParseFailure(parser, \"     \", String"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                .format(MESSAGE_INVALID_COMMAND_FORMAT, FindExerciseCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        FindExerciseCommand expectedFindExerciseCommand \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                new FindExerciseCommand(new ExerciseNameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedFindExerciseCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindExerciseCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulazman1997": 10,
      "-": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FindRecipeCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.logic.commands.FindRecipeCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.recipe.RecipeNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "public class FindRecipeCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    private FindRecipeCommandParser parser \u003d new FindRecipeCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                FindRecipeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        FindRecipeCommand expectedFindRecipeCommand \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                new FindRecipeCommand(new RecipeNameContainsKeywordsPredicate(Arrays.asList(\"Fish\", \"Burger\")));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertParseSuccess(parser, \"Fish Burger\", expectedFindRecipeCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertParseSuccess(parser, \" \\n Fish \\n \\t Burger  \\t\", expectedFindRecipeCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 25,
      "bakwxh": 10
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_RECIPE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.common.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.medical.MedicalHistory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.recipe.Ingredient;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    private static final String INVALID_NAME_2 \u003d \"T@mago Maki\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    private static final String INVALID_INGREDIENT \u003d \"Nor!\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    private static final String VALID_NAME_2 \u003d \"Tamago Maki\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    private static final String VALID_INGREDIENT_1 \u003d \"Eggs\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    private static final String VALID_INGREDIENT_2 \u003d \"Nori\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertEquals(INDEX_FIRST_RECIPE, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertEquals(INDEX_FIRST_RECIPE, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public void parseMedicalHistory_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseMedicalHistory(null));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public void parseMedicalHistory_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseMedicalHistory(INVALID_TAG));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public void parseMedicalHistory_validValueWithoutWhitespace_returnsMedicalHistory() throws Exception {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        MedicalHistory expectedMedicalHistory \u003d new MedicalHistory(VALID_TAG_1);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        assertEquals(expectedMedicalHistory, ParserUtil.parseMedicalHistory(VALID_TAG_1));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public void parseMedicalHistory_validValueWithWhitespace_returnsTrimmedMedicalHistory() throws Exception {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        MedicalHistory expectedMedicalHistory \u003d new MedicalHistory(VALID_TAG_1);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        assertEquals(expectedMedicalHistory, ParserUtil.parseMedicalHistory(tagWithWhitespace));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseMedicalHistories(null));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                .parseMedicalHistories(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        assertTrue(ParserUtil.parseMedicalHistories(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        Set\u003cMedicalHistory\u003e actualMedicalHistorySet \u003d"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                ParserUtil.parseMedicalHistories(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        Set\u003cMedicalHistory\u003e expectedMedicalHistorySet \u003d new HashSet\u003cMedicalHistory\u003e("
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                Arrays.asList(new MedicalHistory(VALID_TAG_1), new MedicalHistory(VALID_TAG_2)));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        assertEquals(expectedMedicalHistorySet, actualMedicalHistorySet);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public void parseIngredient_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseIngredient(null));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public void parseIngredient_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIngredient(INVALID_INGREDIENT));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public void parseIngredient_validValueWithoutWhitespace_returnsIngredient() throws Exception {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        Ingredient expectedIngredient \u003d new Ingredient(VALID_INGREDIENT_1);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertEquals(expectedIngredient, ParserUtil.parseIngredient(VALID_INGREDIENT_1));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public void parseIngredient_validValueWithWhitespace_returnsTrimmedIngredient() throws Exception {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        String ingredientWithWhitespace \u003d WHITESPACE + VALID_INGREDIENT_1 + WHITESPACE;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        Ingredient expectedIngredient \u003d new Ingredient(VALID_INGREDIENT_1);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertEquals(expectedIngredient, ParserUtil.parseIngredient(ingredientWithWhitespace));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public void parseIngredients_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseIngredients(null));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public void parseIngredients_collectionWithInvalidIngredients_throwsParseException() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIngredients(Arrays.asList(VALID_INGREDIENT_1,"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                INVALID_INGREDIENT)));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public void parseIngredients_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertTrue(ParserUtil.parseIngredients(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public void parseIngredients_collectionWithValidIngredients_returnsIngredientSet() throws Exception {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        Set\u003cIngredient\u003e actualIngredientSet \u003d ParserUtil.parseIngredients(Arrays.asList(VALID_INGREDIENT_1,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                VALID_INGREDIENT_2));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        Set\u003cIngredient\u003e expectedIngredientSet \u003d new HashSet\u003cIngredient\u003e(Arrays.asList("
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                new Ingredient(VALID_INGREDIENT_1), new Ingredient(VALID_INGREDIENT_2)));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertEquals(expectedIngredientSet, actualIngredientSet);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yyuanxin": 15,
      "-": 130,
      "bakwxh": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/WorkoutPlannerParserUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import static seedu.address.logic.parser.WorkoutPlannerParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EXERCISE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.details.Distance;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.details.ExerciseDetail;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.details.unit.DistanceUnit;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.exercise.ExerciseName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "public class WorkoutPlannerParserUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    private static final String INVALID_NAME \u003d \"Revers* Lunge\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    private static final String INVALID_DISTANCE \u003d \"400 kg\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    private static final String VALID_NAME \u003d \"Reverse Lunge\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    private static final String VALID_DISTANCE_1 \u003d \"400 m\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    private static final String VALID_DISTANCE_2 \u003d \"2.4 km\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e WorkoutPlannerParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            -\u003e WorkoutPlannerParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertEquals(INDEX_FIRST_EXERCISE, WorkoutPlannerParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertEquals(INDEX_FIRST_EXERCISE, WorkoutPlannerParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e WorkoutPlannerParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e WorkoutPlannerParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        ExerciseName expectedExerciseName \u003d new ExerciseName(VALID_NAME);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertEquals(expectedExerciseName, WorkoutPlannerParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public void parseExerciseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        ExerciseName expectedExerciseName \u003d new ExerciseName(VALID_NAME);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertEquals(expectedExerciseName, WorkoutPlannerParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public void parseDistance_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e WorkoutPlannerParserUtil.parseDistance(null));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public void parseDistance_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e WorkoutPlannerParserUtil.parseDistance(INVALID_DISTANCE));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public void parseDistance_validValueWithoutWhitespace_returnsDistance() throws Exception {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        ExerciseDetail expectedExerciseDetail \u003d new Distance((float) 400.0, DistanceUnit.METER);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertEquals(expectedExerciseDetail, WorkoutPlannerParserUtil.parseDistance(VALID_DISTANCE_1));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public void parseDistance_validValueWithWhitespace_returnsDistance() throws Exception {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        String distanceWithWhitespace \u003d WHITESPACE + VALID_DISTANCE_1 + WHITESPACE;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        ExerciseDetail expectedExerciseDetail \u003d new Distance((float) 400.0, DistanceUnit.METER);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertEquals(expectedExerciseDetail, WorkoutPlannerParserUtil.parseDistance(distanceWithWhitespace));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulazman1997": 91
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_EXERCISE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_RECIPES;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import static seedu.address.testutil.TypicalExercises.ABS_ROLLOUT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import static seedu.address.testutil.TypicalExercises.BURPEES;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import static seedu.address.testutil.TypicalProfiles.ALICE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import static seedu.address.testutil.TypicalProfiles.BENSON;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.MILO;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.OMELETTE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.recipe.RecipeNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.testutil.DukeCooksBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.testutil.RecipeBookBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.testutil.WorkoutPlannerBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertEquals(new RecipeBook(), new RecipeBook(modelManager.getRecipeBook()));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        assertEquals(new UserProfile(), new UserProfile(modelManager.getUserProfile()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertEquals(new WorkoutPlanner(), new WorkoutPlanner(modelManager.getWorkoutPlanner()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        userPrefs.setRecipesFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        userPrefs.setUserProfileFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        userPrefs.setRecipesFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        userPrefs.setUserProfileFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        userPrefs.setExercisesFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public void setDukeCooksFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserProfileFilePath(null));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public void setRecipesFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setRecipesFilePath(null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public void setDukeCooksFilePath_validPath_setsDukeCooksFilePath() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        modelManager.setUserProfileFilePath(path);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        assertEquals(path, modelManager.getUserProfileFilePath());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public void setRecipesFilePath_validPath_setsRecipesFilePath() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        modelManager.setRecipesFilePath(path);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertEquals(path, modelManager.getRecipesFilePath());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasExercise(null));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public void hasPerson_personNotInDukeCooks_returnsFalse() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertFalse(modelManager.hasExercise(ABS_ROLLOUT));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public void hasPerson_personInDukeCooks_returnsTrue() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        modelManager.addExercise(ABS_ROLLOUT);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertTrue(modelManager.hasExercise(ABS_ROLLOUT));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public void getFilteredRecipeList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredRecipeList().remove(0));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        UserProfile userProfile \u003d new DukeCooksBuilder().withPerson(ALICE).withPerson(BENSON).build();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        UserProfile differentUserProfile \u003d new UserProfile();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        RecipeBook recipeBook \u003d new RecipeBookBuilder().withRecipe(MILO).withRecipe(OMELETTE).build();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        RecipeBook differentRecipeBook \u003d new RecipeBook();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        WorkoutPlanner workoutPlanner \u003d new WorkoutPlannerBuilder()"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                .withExercise(ABS_ROLLOUT).withExercise(BURPEES).build();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        WorkoutPlanner differentPlanner \u003d new WorkoutPlanner();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        modelManager \u003d new ModelManager(recipeBook, userPrefs);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(recipeBook, userPrefs);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        // different recipeBook -\u003e returns false"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentRecipeBook, userPrefs)));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        String[] keywords \u003d MILO.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        modelManager.updateFilteredRecipeList(new RecipeNameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(recipeBook, userPrefs)));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        modelManager.updateFilteredExerciseList(PREDICATE_SHOW_ALL_EXERCISE);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        modelManager.updateFilteredRecipeList(PREDICATE_SHOW_ALL_RECIPES);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        differentUserPrefs.setRecipesFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(recipeBook, differentUserPrefs)));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        UserPrefs differentWorkoutPlannerUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        differentWorkoutPlannerUserPrefs.setExercisesFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(workoutPlanner, differentWorkoutPlannerUserPrefs)));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yyuanxin": 10,
      "khairulazman1997": 23,
      "-": 109,
      "bakwxh": 28
    }
  },
  {
    "path": "src/test/java/seedu/address/model/RecipeBookTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INGREDIENT_BURGER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.MILO;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.getTypicalRecipeBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.recipe.exceptions.DuplicateRecipeException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.testutil.RecipeBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "public class RecipeBookTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    private final RecipeBook recipeBook \u003d new RecipeBook();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertEquals(Collections.emptyList(), recipeBook.getRecipeList());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e recipeBook.resetData(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public void resetData_withValidReadOnlyRecipeBook_replacesData() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        RecipeBook newData \u003d getTypicalRecipeBook();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        recipeBook.resetData(newData);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertEquals(newData, recipeBook);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public void resetData_withDuplicateRecipes_throwsDuplicateRecipeException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        // Two recipes with the same identity fields"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        Recipe editedMilo \u003d new RecipeBuilder(MILO).withIngredients(VALID_INGREDIENT_BURGER)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        List\u003cRecipe\u003e newRecipes \u003d Arrays.asList(MILO, editedMilo);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        RecipeBookStub newData \u003d new RecipeBookStub(newRecipes);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertThrows(DuplicateRecipeException.class, () -\u003e recipeBook.resetData(newData));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public void hasRecipe_nullRecipe_throwsNullPointerException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e recipeBook.hasRecipe(null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public void hasRecipe_recipeNotInRecipeBook_returnsFalse() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertFalse(recipeBook.hasRecipe(MILO));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public void hasRecipe_recipeInRecipeBook_returnsTrue() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        recipeBook.addRecipe(MILO);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertTrue(recipeBook.hasRecipe(MILO));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public void hasRecipe_recipeWithSameIdentityFieldsInRecipeBook_returnsTrue() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        recipeBook.addRecipe(MILO);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        Recipe editedMilo \u003d new RecipeBuilder(MILO).withIngredients(VALID_INGREDIENT_BURGER)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertTrue(recipeBook.hasRecipe(editedMilo));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public void getRecipeList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e recipeBook.getRecipeList().remove(0));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * A stub ReadOnlyRecipeBook whose recipes list can violate interface constraints."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    private static class RecipeBookStub implements ReadOnlyRecipeBook {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        private final ObservableList\u003cRecipe\u003e recipes \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        RecipeBookStub(Collection\u003cRecipe\u003e recipes) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            this.recipes.setAll(recipes);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        public ObservableList\u003cRecipe\u003e getRecipeList() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            return recipes;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 61,
      "bakwxh": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/model/UserPrefsTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public void setDukeCooksFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setUserProfileFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public void setRecipesFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setRecipesFilePath(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yyuanxin": 1,
      "khairulazman1997": 1,
      "-": 23,
      "bakwxh": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/model/UserProfileTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_HISTORY_DENGUE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import static seedu.address.testutil.TypicalProfiles.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import static seedu.address.testutil.TypicalProfiles.getTypicalProfiles;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "public class UserProfileTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    private final UserProfile userProfile \u003d new UserProfile();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        assertEquals(Collections.emptyList(), userProfile.getUserProfileList());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userProfile.resetData(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public void resetData_withValidReadOnlyDukeCooks_replacesData() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        UserProfile newData \u003d getTypicalProfiles();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        userProfile.resetData(newData);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        assertEquals(newData, userProfile);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two persons with the same identity fields"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withMedicalHistories(VALID_HISTORY_DENGUE)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        UserProfileStub newData \u003d new UserProfileStub(newPersons);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e userProfile.resetData(newData));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e userProfile.getUserProfileList().remove(0));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * A stub ReadOnlyUserProfile whose persons list can violate interface constraints."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    private static class UserProfileStub implements ReadOnlyUserProfile {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        UserProfileStub(Collection\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            this.persons.setAll(persons);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        public ObservableList\u003cPerson\u003e getUserProfileList() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            return persons;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yyuanxin": 18,
      "khairulazman1997": 1,
      "-": 53,
      "bakwxh": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/model/WorkoutPlannerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import static seedu.address.testutil.TypicalExercises.ABS_ROLLOUT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import static seedu.address.testutil.TypicalExercises.getTypicalWorkoutPlanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.exercise.exceptions.DuplicateExerciseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.testutil.ExerciseBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "public class WorkoutPlannerTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    private final WorkoutPlanner workoutPlanner \u003d new WorkoutPlanner();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertEquals(Collections.emptyList(), workoutPlanner.getExerciseList());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e workoutPlanner.resetData(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public void resetData_withValidReadOnlyDukeCooks_replacesData() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        WorkoutPlanner newData \u003d getTypicalWorkoutPlanner();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        workoutPlanner.resetData(newData);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertEquals(newData, workoutPlanner);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two persons with the same identity fields"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        Exercise editedAbsRollout \u003d new ExerciseBuilder(ABS_ROLLOUT)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                .withDetails(null, null, null, null, 99, 99)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        List\u003cExercise\u003e newExercises \u003d Arrays.asList(ABS_ROLLOUT, editedAbsRollout);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        WorkoutPlannerStub newData \u003d new WorkoutPlannerStub(newExercises);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertThrows(DuplicateExerciseException.class, () -\u003e workoutPlanner.resetData(newData));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public void hasPerson_nullExercise_throwsNullPointerException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e workoutPlanner.hasExercise(null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public void hasExercise_exerciseNotInDukeCooks_returnsFalse() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertFalse(workoutPlanner.hasExercise(ABS_ROLLOUT));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public void hasExercise_exerciseInDukeCooks_returnsTrue() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        workoutPlanner.addExercise(ABS_ROLLOUT);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertTrue(workoutPlanner.hasExercise(ABS_ROLLOUT));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public void hasExercise_exerciseWithSameIdentityFieldsInDukeCooks_returnsTrue() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        workoutPlanner.addExercise(ABS_ROLLOUT);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        Exercise editedAbsRollout \u003d new ExerciseBuilder(ABS_ROLLOUT)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                .withDetails(null, null, null, null, 99, 99)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertTrue(workoutPlanner.hasExercise(editedAbsRollout));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public void getExerciseList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e workoutPlanner.getExerciseList().remove(0));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * A stub ReadOnlyDukeCooks whose persons list can violate interface constraints."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    private static class WorkoutPlannerStub implements ReadOnlyWorkoutPlanner {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        private final ObservableList\u003cExercise\u003e exercises \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        WorkoutPlannerStub(Collection\u003cExercise\u003e exercises) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            this.exercises.setAll(exercises);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        public ObservableList\u003cExercise\u003e getExerciseList() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            return exercises;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulazman1997": 39,
      "-": 63
    }
  },
  {
    "path": "src/test/java/seedu/address/model/detail/RepetitionsTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "package seedu.address.model.detail;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.details.Repetitions;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "public class RepetitionsTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Repetitions(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public void constructor_invalidRepetitions_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        String invalidTagName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Repetitions(Integer.valueOf(invalidTagName)));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public void isValidExerciseName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        // null tag name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Repetitions.isValidExerciseDetail(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulazman1997": 28
    }
  },
  {
    "path": "src/test/java/seedu/address/model/exercise/ExerciseExerciseNameContainsKeywordsPredicateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "package seedu.address.model.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.testutil.ExerciseBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "public class ExerciseExerciseNameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        ExerciseNameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                new ExerciseNameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        ExerciseNameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                new ExerciseNameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        ExerciseNameContainsKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                new ExerciseNameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        ExerciseNameContainsKeywordsPredicate predicate \u003d new ExerciseNameContainsKeywordsPredicate(Collections"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                .singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertTrue(predicate.test(new ExerciseBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        predicate \u003d new ExerciseNameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertTrue(predicate.test(new ExerciseBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        predicate \u003d new ExerciseNameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertTrue(predicate.test(new ExerciseBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        predicate \u003d new ExerciseNameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertTrue(predicate.test(new ExerciseBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        ExerciseNameContainsKeywordsPredicate predicate \u003d new ExerciseNameContainsKeywordsPredicate(Collections"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                .emptyList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertFalse(predicate.test(new ExerciseBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        predicate \u003d new ExerciseNameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertFalse(predicate.test(new ExerciseBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // Keywords match phone, email and address, but does not match name"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        predicate \u003d new ExerciseNameContainsKeywordsPredicate(Arrays"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                .asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertFalse(predicate.test(new ExerciseBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulazman1997": 26,
      "-": 54
    }
  },
  {
    "path": "src/test/java/seedu/address/model/exercise/ExerciseNameTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "package seedu.address.model.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "public class ExerciseNameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ExerciseName(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new ExerciseName(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ExerciseName.isValidName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertFalse(ExerciseName.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertFalse(ExerciseName.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertFalse(ExerciseName.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertFalse(ExerciseName.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertTrue(ExerciseName.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertTrue(ExerciseName.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertTrue(ExerciseName.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertTrue(ExerciseName.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertTrue(ExerciseName.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulazman1997": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/model/exercise/ExerciseTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "package seedu.address.model.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_PUSHUP;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_SITUP;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import static seedu.address.testutil.TypicalExercises.ABS_ROLLOUT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import static seedu.address.testutil.TypicalExercises.SITUP;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.testutil.ExerciseBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "public class ExerciseTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        Exercise exercise \u003d new ExerciseBuilder().build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e exercise.getExerciseDetails().remove(0));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public void isSameExercise() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertTrue(ABS_ROLLOUT.isSameExercise(ABS_ROLLOUT));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertFalse(ABS_ROLLOUT.isSameExercise(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        Exercise editedAbsRollout \u003d new ExerciseBuilder(ABS_ROLLOUT).withName(VALID_NAME_PUSHUP).build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertFalse(ABS_ROLLOUT.isSameExercise(editedAbsRollout));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        // same name, same muscles, same intensity, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        editedAbsRollout \u003d new ExerciseBuilder(ABS_ROLLOUT)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                .withDetails(null, null, null, null, 99, 99).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertTrue(ABS_ROLLOUT.isSameExercise(editedAbsRollout));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        Exercise aliceCopy \u003d new ExerciseBuilder(ABS_ROLLOUT).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertTrue(ABS_ROLLOUT.equals(aliceCopy));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertTrue(ABS_ROLLOUT.equals(ABS_ROLLOUT));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertFalse(ABS_ROLLOUT.equals(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertFalse(ABS_ROLLOUT.equals(5));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertFalse(ABS_ROLLOUT.equals(SITUP));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        Exercise editedAlice \u003d new ExerciseBuilder(ABS_ROLLOUT).withName(VALID_NAME_SITUP).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertFalse(ABS_ROLLOUT.equals(editedAlice));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        editedAlice \u003d new ExerciseBuilder(ABS_ROLLOUT)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                .withDetails(null, null, null, null, 99, 99).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertFalse(ABS_ROLLOUT.equals(editedAlice));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulazman1997": 68
    }
  },
  {
    "path": "src/test/java/seedu/address/model/exercise/UniqueExerciseListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "package seedu.address.model.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SETS_FIVE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import static seedu.address.testutil.TypicalExercises.ABS_ROLLOUT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import static seedu.address.testutil.TypicalExercises.SITUP;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.exercise.exceptions.DuplicateExerciseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.exercise.exceptions.ExerciseNotFoundException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.testutil.ExerciseBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "public class UniqueExerciseListTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    private final UniqueExerciseList uniqueExerciseList \u003d new UniqueExerciseList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public void contains_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueExerciseList.contains(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public void contains_personNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertFalse(uniqueExerciseList.contains(ABS_ROLLOUT));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public void contains_personInList_returnsTrue() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        uniqueExerciseList.add(ABS_ROLLOUT);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertTrue(uniqueExerciseList.contains(ABS_ROLLOUT));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        uniqueExerciseList.add(ABS_ROLLOUT);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        Exercise editedAbsRollout \u003d new ExerciseBuilder(ABS_ROLLOUT)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                .withDetails(null, null, null, null, null, VALID_SETS_FIVE)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertTrue(uniqueExerciseList.contains(editedAbsRollout));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public void add_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueExerciseList.add(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public void add_duplicatePerson_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        uniqueExerciseList.add(ABS_ROLLOUT);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertThrows(DuplicateExerciseException.class, () -\u003e uniqueExerciseList.add(ABS_ROLLOUT));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public void setPerson_nullTargetPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueExerciseList.setPerson(null, ABS_ROLLOUT));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public void setPerson_nullEditedPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueExerciseList.setPerson(ABS_ROLLOUT, null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertThrows(ExerciseNotFoundException.class, () -\u003e uniqueExerciseList.setPerson(ABS_ROLLOUT, ABS_ROLLOUT));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public void setPerson_editedPersonIsSamePerson_success() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        uniqueExerciseList.add(ABS_ROLLOUT);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        uniqueExerciseList.setPerson(ABS_ROLLOUT, ABS_ROLLOUT);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        UniqueExerciseList expectedUniqueExerciseList \u003d new UniqueExerciseList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        expectedUniqueExerciseList.add(ABS_ROLLOUT);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertEquals(expectedUniqueExerciseList, uniqueExerciseList);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public void setPerson_editedPersonHasSameIdentity_success() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        uniqueExerciseList.add(ABS_ROLLOUT);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        Exercise editedAlice \u003d new ExerciseBuilder(ABS_ROLLOUT)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                .withDetails(null, null, null, null, null, VALID_SETS_FIVE)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        uniqueExerciseList.setPerson(ABS_ROLLOUT, editedAlice);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        UniqueExerciseList expectedUniqueExerciseList \u003d new UniqueExerciseList();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        expectedUniqueExerciseList.add(editedAlice);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertEquals(expectedUniqueExerciseList, uniqueExerciseList);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public void setPerson_editedPersonHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        uniqueExerciseList.add(ABS_ROLLOUT);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        uniqueExerciseList.setPerson(ABS_ROLLOUT, SITUP);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        UniqueExerciseList expectedUniqueExerciseList \u003d new UniqueExerciseList();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        expectedUniqueExerciseList.add(SITUP);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertEquals(expectedUniqueExerciseList, uniqueExerciseList);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        uniqueExerciseList.add(ABS_ROLLOUT);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        uniqueExerciseList.add(SITUP);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertThrows(DuplicateExerciseException.class, () -\u003e uniqueExerciseList.setPerson(ABS_ROLLOUT, SITUP));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public void remove_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueExerciseList.remove(null));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public void remove_personDoesNotExist_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertThrows(ExerciseNotFoundException.class, () -\u003e uniqueExerciseList.remove(ABS_ROLLOUT));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public void remove_existingPerson_removesPerson() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        uniqueExerciseList.add(ABS_ROLLOUT);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        uniqueExerciseList.remove(ABS_ROLLOUT);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        UniqueExerciseList expectedUniqueExerciseList \u003d new UniqueExerciseList();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertEquals(expectedUniqueExerciseList, uniqueExerciseList);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public void setPersons_nullUniquePersonList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueExerciseList.setExercises((UniqueExerciseList) null));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        uniqueExerciseList.add(ABS_ROLLOUT);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        UniqueExerciseList expectedUniqueExerciseList \u003d new UniqueExerciseList();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        expectedUniqueExerciseList.add(SITUP);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        uniqueExerciseList.setExercises(expectedUniqueExerciseList);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertEquals(expectedUniqueExerciseList, uniqueExerciseList);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public void setPersons_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueExerciseList.setExercises((List\u003cExercise\u003e) null));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public void setPersons_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        uniqueExerciseList.add(ABS_ROLLOUT);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        List\u003cExercise\u003e exerciseList \u003d Collections.singletonList(SITUP);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        uniqueExerciseList.setExercises(exerciseList);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        UniqueExerciseList expectedUniqueExerciseList \u003d new UniqueExerciseList();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        expectedUniqueExerciseList.add(SITUP);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertEquals(expectedUniqueExerciseList, uniqueExerciseList);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        List\u003cExercise\u003e listWithDuplicateExercises \u003d Arrays.asList(ABS_ROLLOUT, ABS_ROLLOUT);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertThrows(DuplicateExerciseException.class, () -\u003e uniqueExerciseList"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                .setExercises(listWithDuplicateExercises));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            -\u003e uniqueExerciseList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulazman1997": 172
    }
  },
  {
    "path": "src/test/java/seedu/address/model/exercise/UniqueUserProfileTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_HISTORY_DENGUE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import static seedu.address.testutil.TypicalProfiles.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import static seedu.address.testutil.TypicalProfiles.BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "public class UniqueUserProfileTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    private final UniqueUserProfile uniqueUserProfile \u003d new UniqueUserProfile();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public void contains_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueUserProfile.contains(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public void contains_personNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        assertFalse(uniqueUserProfile.contains(ALICE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public void contains_personInList_returnsTrue() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        uniqueUserProfile.add(ALICE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        assertTrue(uniqueUserProfile.contains(ALICE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        uniqueUserProfile.add(ALICE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withMedicalHistories(VALID_HISTORY_DENGUE)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        assertTrue(uniqueUserProfile.contains(editedAlice));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public void add_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueUserProfile.add(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public void setPerson_nullTargetPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueUserProfile.setPerson(null, ALICE));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public void setPerson_nullEditedPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueUserProfile.setPerson(ALICE, null));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        assertThrows(PersonNotFoundException.class, () -\u003e uniqueUserProfile.setPerson(ALICE, ALICE));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public void setPerson_editedPersonIsSamePerson_success() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        uniqueUserProfile.add(ALICE);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        uniqueUserProfile.setPerson(ALICE, ALICE);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        UniqueUserProfile expectedUniqueUserProfile \u003d new UniqueUserProfile();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        expectedUniqueUserProfile.add(ALICE);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        assertEquals(expectedUniqueUserProfile, uniqueUserProfile);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public void setPerson_editedPersonHasSameIdentity_success() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        uniqueUserProfile.add(ALICE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withMedicalHistories(VALID_HISTORY_DENGUE)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        uniqueUserProfile.setPerson(ALICE, editedAlice);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        UniqueUserProfile expectedUniqueUserProfile \u003d new UniqueUserProfile();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        expectedUniqueUserProfile.add(editedAlice);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        assertEquals(expectedUniqueUserProfile, uniqueUserProfile);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public void setPerson_editedPersonHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        uniqueUserProfile.add(ALICE);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        uniqueUserProfile.setPerson(ALICE, BOB);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        UniqueUserProfile expectedUniqueUserProfile \u003d new UniqueUserProfile();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        expectedUniqueUserProfile.add(BOB);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        assertEquals(expectedUniqueUserProfile, uniqueUserProfile);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public void remove_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueUserProfile.remove(null));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public void remove_personDoesNotExist_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        assertThrows(PersonNotFoundException.class, () -\u003e uniqueUserProfile.remove(ALICE));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public void remove_existingPerson_removesPerson() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        uniqueUserProfile.add(ALICE);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        uniqueUserProfile.remove(ALICE);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        UniqueUserProfile expectedUniqueUserProfile \u003d new UniqueUserProfile();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        assertEquals(expectedUniqueUserProfile, uniqueUserProfile);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public void setPersons_nullUniquePersonList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueUserProfile.setPersons((UniqueUserProfile) null));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        uniqueUserProfile.add(ALICE);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        UniqueUserProfile expectedUniqueUserProfile \u003d new UniqueUserProfile();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        expectedUniqueUserProfile.add(BOB);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        uniqueUserProfile.setPersons(expectedUniqueUserProfile);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        assertEquals(expectedUniqueUserProfile, uniqueUserProfile);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public void setPersons_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueUserProfile.setPersons((List\u003cPerson\u003e) null));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public void setPersons_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        uniqueUserProfile.add(ALICE);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        List\u003cPerson\u003e personList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        uniqueUserProfile.setPersons(personList);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        UniqueUserProfile expectedUniqueUserProfile \u003d new UniqueUserProfile();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        expectedUniqueUserProfile.add(BOB);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        assertEquals(expectedUniqueUserProfile, uniqueUserProfile);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        List\u003cPerson\u003e listWithDuplicatePersons \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniqueUserProfile.setPersons(listWithDuplicatePersons));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            -\u003e uniqueUserProfile.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yyuanxin": 153,
      "bakwxh": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/model/medical/MedicalHistoryTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "package seedu.address.model.medical;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "public class MedicalHistoryTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new MedicalHistory(null));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidTagName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidTagName \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new MedicalHistory(invalidTagName));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidTagName() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null tag name"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e MedicalHistory.isValidMedicalHistoryName(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yyuanxin": 4,
      "-": 21,
      "bakwxh": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/NameTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.common.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 40,
      "bakwxh": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/PersonTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_HISTORY_DENGUE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import static seedu.address.testutil.TypicalProfiles.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import static seedu.address.testutil.TypicalProfiles.BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e person.getMedicalHistories().remove(0));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isSamePerson() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(ALICE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bigjunnn"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bigjunnn"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                .withMedicalHistories(VALID_HISTORY_DENGUE).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Person aliceCopy \u003d new PersonBuilder(ALICE).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withMedicalHistories(VALID_HISTORY_DENGUE).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bigjunnn": 2,
      "yyuanxin": 6,
      "-": 59
    }
  },
  {
    "path": "src/test/java/seedu/address/model/recipe/IngredientTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "package seedu.address.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "public class IngredientTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Ingredient(null));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public void constructor_invalidIngredientName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        String invalidIngredientName \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Ingredient(invalidIngredientName));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public void isValidIngredientName() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        // null ingredient name"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Ingredient.isValidIngredientName(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 17,
      "bakwxh": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/model/recipe/NameTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "package seedu.address.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.common.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 39,
      "bakwxh": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/model/recipe/RecipeExerciseNameContainsKeywordsPredicateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "package seedu.address.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.testutil.RecipeBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "public class RecipeExerciseNameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        RecipeNameContainsKeywordsPredicate firstPredicate \u003d new RecipeNameContainsKeywordsPredicate("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                firstPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        RecipeNameContainsKeywordsPredicate secondPredicate \u003d new RecipeNameContainsKeywordsPredicate("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                secondPredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        RecipeNameContainsKeywordsPredicate firstPredicateCopy \u003d new RecipeNameContainsKeywordsPredicate("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                firstPredicateKeywordList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        // different recipe -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        RecipeNameContainsKeywordsPredicate predicate \u003d new RecipeNameContainsKeywordsPredicate("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertTrue(predicate.test(new RecipeBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        predicate \u003d new RecipeNameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertTrue(predicate.test(new RecipeBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        predicate \u003d new RecipeNameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertTrue(predicate.test(new RecipeBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        predicate \u003d new RecipeNameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertTrue(predicate.test(new RecipeBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        RecipeNameContainsKeywordsPredicate predicate \u003d new RecipeNameContainsKeywordsPredicate("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertFalse(predicate.test(new RecipeBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        predicate \u003d new RecipeNameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertFalse(predicate.test(new RecipeBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // Keywords match phone, email and address, but does not match name"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        predicate \u003d new RecipeNameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\","
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertFalse(predicate.test(new RecipeBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulazman1997": 1,
      "-": 53,
      "bakwxh": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/model/recipe/RecipeTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "package seedu.address.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INGREDIENT_BURGER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BURGER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.BURGER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.MILO;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.testutil.RecipeBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "public class RecipeTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        Recipe recipe \u003d new RecipeBuilder().build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e recipe.getIngredients().remove(0));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public void isSameRecipe() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertTrue(MILO.isSameRecipe(MILO));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertFalse(MILO.isSameRecipe(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        Recipe editedAlice \u003d new RecipeBuilder(MILO).withName(VALID_NAME_BURGER).build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertFalse(MILO.isSameRecipe(editedAlice));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        editedAlice \u003d new RecipeBuilder(MILO)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                .withIngredients(VALID_INGREDIENT_BURGER).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertTrue(MILO.isSameRecipe(editedAlice));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        Recipe aliceCopy \u003d new RecipeBuilder(MILO).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertTrue(MILO.equals(aliceCopy));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertTrue(MILO.equals(MILO));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertFalse(MILO.equals(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertFalse(MILO.equals(5));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        // different recipe -\u003e returns false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertFalse(MILO.equals(BURGER));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        Recipe editedAlice \u003d new RecipeBuilder(MILO).withName(VALID_NAME_BURGER).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertFalse(MILO.equals(editedAlice));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        // different ingredients -\u003e returns false"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        editedAlice \u003d new RecipeBuilder(MILO).withIngredients(VALID_INGREDIENT_BURGER).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertFalse(MILO.equals(editedAlice));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 38,
      "bakwxh": 29
    }
  },
  {
    "path": "src/test/java/seedu/address/model/recipe/UniqueRecipeListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "package seedu.address.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INGREDIENT_BURGER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.BURGER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.MILO;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.recipe.exceptions.DuplicateRecipeException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.recipe.exceptions.RecipeNotFoundException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.testutil.RecipeBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "public class UniqueRecipeListTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    private final UniqueRecipeList uniqueRecipeList \u003d new UniqueRecipeList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public void contains_nullRecipe_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueRecipeList.contains(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public void contains_recipeNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertFalse(uniqueRecipeList.contains(MILO));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public void contains_recipeInList_returnsTrue() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        uniqueRecipeList.add(MILO);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertTrue(uniqueRecipeList.contains(MILO));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public void contains_recipeWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        uniqueRecipeList.add(MILO);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        Recipe editedAlice \u003d new RecipeBuilder(MILO).withIngredients(VALID_INGREDIENT_BURGER)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertTrue(uniqueRecipeList.contains(editedAlice));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public void add_nullRecipe_throwsNullPointerException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueRecipeList.add(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public void add_duplicateRecipe_throwsDuplicateRecipeException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        uniqueRecipeList.add(MILO);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertThrows(DuplicateRecipeException.class, () -\u003e uniqueRecipeList.add(MILO));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public void setRecipe_nullTargetRecipe_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueRecipeList.setRecipe(null, MILO));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public void setRecipe_nullEditedRecipe_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueRecipeList.setRecipe(MILO, null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public void setRecipe_targetRecipeNotInList_throwsRecipeNotFoundException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertThrows(RecipeNotFoundException.class, () -\u003e uniqueRecipeList.setRecipe(MILO, MILO));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public void setRecipe_editedRecipeIsSameRecipe_success() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        uniqueRecipeList.add(MILO);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        uniqueRecipeList.setRecipe(MILO, MILO);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        UniqueRecipeList expectedUniqueRecipeList \u003d new UniqueRecipeList();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        expectedUniqueRecipeList.add(MILO);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertEquals(expectedUniqueRecipeList, uniqueRecipeList);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public void setRecipe_editedRecipeHasSameIdentity_success() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        uniqueRecipeList.add(MILO);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        Recipe editedAlice \u003d new RecipeBuilder(MILO).withIngredients(VALID_INGREDIENT_BURGER)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        uniqueRecipeList.setRecipe(MILO, editedAlice);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        UniqueRecipeList expectedUniqueRecipeList \u003d new UniqueRecipeList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        expectedUniqueRecipeList.add(editedAlice);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertEquals(expectedUniqueRecipeList, uniqueRecipeList);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public void setRecipe_editedRecipeHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        uniqueRecipeList.add(MILO);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        uniqueRecipeList.setRecipe(MILO, BURGER);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        UniqueRecipeList expectedUniqueRecipeList \u003d new UniqueRecipeList();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        expectedUniqueRecipeList.add(BURGER);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertEquals(expectedUniqueRecipeList, uniqueRecipeList);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public void setRecipe_editedRecipeHasNonUniqueIdentity_throwsDuplicateRecipeException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        uniqueRecipeList.add(MILO);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        uniqueRecipeList.add(BURGER);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertThrows(DuplicateRecipeException.class, () -\u003e uniqueRecipeList.setRecipe(MILO, BURGER));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public void remove_nullRecipe_throwsNullPointerException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueRecipeList.remove(null));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public void remove_recipeDoesNotExist_throwsRecipeNotFoundException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertThrows(RecipeNotFoundException.class, () -\u003e uniqueRecipeList.remove(MILO));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public void remove_existingRecipe_removesRecipe() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        uniqueRecipeList.add(MILO);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        uniqueRecipeList.remove(MILO);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        UniqueRecipeList expectedUniqueRecipeList \u003d new UniqueRecipeList();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertEquals(expectedUniqueRecipeList, uniqueRecipeList);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public void setRecipes_nullUniqueRecipeList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueRecipeList.setRecipes((UniqueRecipeList) null));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public void setRecipes_uniqueRecipeList_replacesOwnListWithProvidedUniqueRecipeList() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        uniqueRecipeList.add(MILO);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        UniqueRecipeList expectedUniqueRecipeList \u003d new UniqueRecipeList();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        expectedUniqueRecipeList.add(BURGER);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        uniqueRecipeList.setRecipes(expectedUniqueRecipeList);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertEquals(expectedUniqueRecipeList, uniqueRecipeList);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public void setRecipes_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueRecipeList.setRecipes((List\u003cRecipe\u003e) null));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public void setRecipes_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        uniqueRecipeList.add(MILO);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        List\u003cRecipe\u003e recipeList \u003d Collections.singletonList(BURGER);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        uniqueRecipeList.setRecipes(recipeList);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        UniqueRecipeList expectedUniqueRecipeList \u003d new UniqueRecipeList();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        expectedUniqueRecipeList.add(BURGER);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertEquals(expectedUniqueRecipeList, uniqueRecipeList);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public void setRecipes_listWithDuplicateRecipes_throwsDuplicateRecipeException() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        List\u003cRecipe\u003e listWithDuplicateRecipes \u003d Arrays.asList(MILO, MILO);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertThrows(DuplicateRecipeException.class, () -\u003e uniqueRecipeList.setRecipes(listWithDuplicateRecipes));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            -\u003e uniqueRecipeList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bakwxh": 169
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedExerciseTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "//import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "//import static seedu.address.testutil.TypicalExercises.BURPEES;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "public class JsonAdaptedExerciseTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "//    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "//    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "//"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "//    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "//    private static final List\u003cJsonAdaptedExerciseDetail\u003e VALID_TAGS \u003d BENSON.getExerciseDetails().stream()"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "//            .map(JsonAdaptedExerciseDetail::new)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "//            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "//"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "//    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "//        JsonAdaptedExercise person \u003d new JsonAdaptedExercise(BENSON);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "//        assertEquals(BENSON, person.toModelType());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "//"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "//    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "//        JsonAdaptedExercise person \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "//                new JsonAdaptedExercise(INVALID_NAME, VALID_TAGS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "//        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "//        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "//"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "//    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "//        JsonAdaptedExercise person \u003d new JsonAdaptedExercise(null, VALID_TAGS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "//        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "//        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "//"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "//    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "//        List\u003cJsonAdaptedExerciseDetail\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "//        invalidTags.add(new JsonAdaptedExerciseDetail(INVALID_TAG));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "//        JsonAdaptedExercise person \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "//                new JsonAdaptedExercise(VALID_NAME, invalidTags);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "//        assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulazman1997": 41,
      "-": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedPersonTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.storage.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import static seedu.address.testutil.TypicalProfiles.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.common.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAdaptedPersonTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    private static final String INVALID_MEDICALHISTORY \u003d \"#high blood pressure\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    private static final String VALID_DOB \u003d BENSON.getDateOfBirth().toString();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    private static final String VALID_BLOODTYPE \u003d BENSON.getBloodType().toString();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    private static final String VALID_GENDER \u003d BENSON.getGender().toString();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    private static final String VALID_WEIGHT \u003d BENSON.getWeight().toString();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    private static final String VALID_WEIGHT_TIMESTAMP \u003d BENSON.getWeight().timestamp;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    private static final String VALID_HEIGHT \u003d BENSON.getHeight().toString();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    private static final String VALID_HEIGHT_TIMESTAMP \u003d BENSON.getHeight().timestamp;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    private static final List\u003cJsonAdaptedMedicalHistory\u003e VALID_MEDICALHISTORIES \u003d BENSON.getMedicalHistories().stream()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            .map(JsonAdaptedMedicalHistory::new)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(BENSON);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BENSON, person.toModelType());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                new JsonAdaptedPerson(INVALID_NAME, VALID_DOB, VALID_GENDER, VALID_BLOODTYPE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                        VALID_WEIGHT, VALID_WEIGHT_TIMESTAMP, VALID_HEIGHT, VALID_HEIGHT_TIMESTAMP,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                        VALID_MEDICALHISTORIES);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                new JsonAdaptedPerson(null, VALID_DOB, VALID_GENDER, VALID_BLOODTYPE,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                        VALID_WEIGHT, VALID_WEIGHT_TIMESTAMP, VALID_HEIGHT, VALID_HEIGHT_TIMESTAMP,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                        VALID_MEDICALHISTORIES);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yyuanxin": 17,
      "-": 40,
      "bakwxh": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedRecipeTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.storage.JsonAdaptedRecipe.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.OMELETTE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.common.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.recipe.Calories;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.recipe.Carbs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.recipe.Fats;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.recipe.Protein;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "public class JsonAdaptedRecipeTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    private static final String INVALID_NAME \u003d \"@melette\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    private static final String INVALID_INGREDIENT \u003d \"#eggs\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    private static final String INVALID_CALORIES \u003d \"1a\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    private static final String INVALID_CARBS \u003d \"1a\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    private static final String INVALID_FATS \u003d \"1a\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    private static final String INVALID_PROTEIN \u003d \"1a\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    private static final String VALID_NAME \u003d OMELETTE.getName().toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    private static final List\u003cJsonAdaptedIngredient\u003e VALID_INGREDIENTS \u003d OMELETTE.getIngredients().stream()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            .map(JsonAdaptedIngredient::new)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    private static final String VALID_CALORIES \u003d OMELETTE.getCalories().value;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    private static final String VALID_CARBS \u003d OMELETTE.getCarbs().value;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    private static final String VALID_FATS \u003d OMELETTE.getFats().value;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    private static final String VALID_PROTEIN \u003d OMELETTE.getProtein().value;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public void toModelType_validRecipeDetails_returnsRecipe() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        JsonAdaptedRecipe recipe \u003d new JsonAdaptedRecipe(OMELETTE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertEquals(OMELETTE, recipe.toModelType());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        JsonAdaptedRecipe recipe \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                new JsonAdaptedRecipe(INVALID_NAME, VALID_INGREDIENTS,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                        VALID_CALORIES, VALID_CARBS, VALID_FATS, VALID_PROTEIN);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, recipe::toModelType);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        JsonAdaptedRecipe recipe \u003d new JsonAdaptedRecipe(null, VALID_INGREDIENTS,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                VALID_CALORIES, VALID_CARBS, VALID_FATS, VALID_PROTEIN);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, recipe::toModelType);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public void toModelType_invalidIngredients_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        List\u003cJsonAdaptedIngredient\u003e invalidIngredients \u003d new ArrayList\u003c\u003e(VALID_INGREDIENTS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        invalidIngredients.add(new JsonAdaptedIngredient(INVALID_INGREDIENT));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        JsonAdaptedRecipe recipe \u003d"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                new JsonAdaptedRecipe(VALID_NAME, invalidIngredients,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                        VALID_CALORIES, VALID_CARBS, VALID_FATS, VALID_PROTEIN);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertThrows(IllegalValueException.class, recipe::toModelType);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public void toModelType_invalidCalories_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        JsonAdaptedRecipe recipe \u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                new JsonAdaptedRecipe(VALID_NAME, VALID_INGREDIENTS,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                        INVALID_CALORIES, VALID_CARBS, VALID_FATS, VALID_PROTEIN);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        String expectedMessage \u003d Calories.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, recipe::toModelType);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public void toModelType_invalidCarbs_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        JsonAdaptedRecipe recipe \u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                new JsonAdaptedRecipe(VALID_NAME, VALID_INGREDIENTS,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                        VALID_CALORIES, INVALID_CARBS, VALID_FATS, VALID_PROTEIN);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        String expectedMessage \u003d Carbs.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, recipe::toModelType);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public void toModelType_invalidFats_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        JsonAdaptedRecipe recipe \u003d"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                new JsonAdaptedRecipe(VALID_NAME, VALID_INGREDIENTS,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                        VALID_CALORIES, VALID_CARBS, INVALID_FATS, VALID_PROTEIN);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        String expectedMessage \u003d Fats.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, recipe::toModelType);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public void toModelType_invalidProtein_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        JsonAdaptedRecipe recipe \u003d"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                new JsonAdaptedRecipe(VALID_NAME, VALID_INGREDIENTS,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                        VALID_CALORIES, VALID_CARBS, VALID_FATS, INVALID_PROTEIN);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        String expectedMessage \u003d Protein.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, recipe::toModelType);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 33,
      "bakwxh": 74
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonRecipeBookStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.KAPPA;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.MILO;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.TAMAGO;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.getTypicalRecipeBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.ReadOnlyRecipeBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.RecipeBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "public class JsonRecipeBookStorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonRecipeBookStorageTest\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public void readRecipeBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readRecipeBook(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    private java.util.Optional\u003cReadOnlyRecipeBook\u003e readRecipeBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        return new JsonRecipeBookStorage(Paths.get(filePath)).readRecipeBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertFalse(readRecipeBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readRecipeBook(\"notJsonFormatRecipeBook.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public void readRecipeBook_invalidRecipeRecipeBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readRecipeBook(\"invalidRecipeRecipeBook.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public void readRecipeBook_invalidAndValidRecipeRecipeBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readRecipeBook(\"invalidAndValidRecipeRecipeBook.json\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public void readAndSaveRecipeBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempRecipeBook.json\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        RecipeBook original \u003d getTypicalRecipeBook();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        JsonRecipeBookStorage jsonRecipeBookStorage \u003d new JsonRecipeBookStorage(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        jsonRecipeBookStorage.saveRecipeBook(original, filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        ReadOnlyRecipeBook readBack \u003d jsonRecipeBookStorage.readRecipeBook(filePath).get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertEquals(original, new RecipeBook(readBack));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        original.addRecipe(TAMAGO);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        original.removeRecipe(MILO);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        jsonRecipeBookStorage.saveRecipeBook(original, filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        readBack \u003d jsonRecipeBookStorage.readRecipeBook(filePath).get();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertEquals(original, new RecipeBook(readBack));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        original.addRecipe(KAPPA);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        jsonRecipeBookStorage.saveRecipeBook(original); // file path not specified"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        readBack \u003d jsonRecipeBookStorage.readRecipeBook().get(); // file path not specified"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertEquals(original, new RecipeBook(readBack));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public void saveRecipeBook_nullRecipeBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveRecipeBook(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * Saves {@code recipeBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    private void saveRecipeBook(ReadOnlyRecipeBook recipeBook, String filePath) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            new JsonRecipeBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                    .saveRecipeBook(recipeBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public void saveRecipeBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveRecipeBook(new RecipeBook(), null));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bakwxh": 110
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableExerciseCatalogueTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.WorkoutPlanner;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.testutil.TypicalExercises;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "public class JsonSerializableExerciseCatalogueTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableDukeCooksTest\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    private static final Path TYPICAL_PERSONS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalPersonsDukeCooks.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_typicalPersonsFile_success() throws Exception {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        JsonSerializableExerciseCatalogue dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_PERSONS_FILE,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                JsonSerializableExerciseCatalogue.class).get();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        WorkoutPlanner dukeCooksFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        WorkoutPlanner typicalPersonsDukeCooks \u003d TypicalExercises.getTypicalWorkoutPlanner();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertEquals(dukeCooksFromFile, typicalPersonsDukeCooks);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulazman1997": 10,
      "-": 17
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableRecipeBookTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.RecipeBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.testutil.TypicalRecipes;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "public class JsonSerializableRecipeBookTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableRecipeBookTest\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    private static final Path TYPICAL_RECIPES_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalRecipesRecipeBook.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public void toModelType_typicalRecipesFile_success() throws Exception {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        JsonSerializableRecipeBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_RECIPES_FILE,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                JsonSerializableRecipeBook.class).get();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        RecipeBook recipeBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        RecipeBook typicalRecipesRecipeBook \u003d TypicalRecipes.getTypicalRecipeBook();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertEquals(recipeBookFromFile, typicalRecipesRecipeBook);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 16,
      "bakwxh": 11
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableUserProfileTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "//"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "//import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "//import seedu.address.profile.UserProfile;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "//import seedu.address.testutil.TypicalProfiles;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "public class JsonSerializableUserProfileTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableDukeCooksTest\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yyuanxin": 18
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        userPrefs.setRecipesFilePath(Paths.get(\"recipes.json\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        //userPrefs.setUserProfileFilePath(Paths.get(\"data/userprofile.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 121,
      "bakwxh": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonUserProfileStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import static seedu.address.testutil.TypicalProfiles.HOON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import static seedu.address.testutil.TypicalProfiles.IDA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import static seedu.address.testutil.TypicalProfiles.getTypicalProfiles;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.ReadOnlyUserProfile;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.UserProfile;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "public class JsonUserProfileStorageTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserProfileStorageTest\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public void readUserProfile_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserProfile(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    private java.util.Optional\u003cReadOnlyUserProfile\u003e readUserProfile(String filePath) throws Exception {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        return new JsonUserProfileStorage(Paths.get(filePath)).readUserProfile(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        assertFalse(readUserProfile(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserProfile(\"notJsonFormatUserProfile.json\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public void readUserProfile_invalidPersonUserProfile_throwDataConversionException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserProfile(\"invalidPersonUserProfile.json\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public void readAndSaveUserProfile_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempUserProfile.json\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        UserProfile original \u003d getTypicalProfiles();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        JsonUserProfileStorage jsonUserProfileStorage \u003d new JsonUserProfileStorage(filePath);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        jsonUserProfileStorage.saveUserProfile(original, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        ReadOnlyUserProfile readBack \u003d jsonUserProfileStorage.readUserProfile(filePath).get();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        assertEquals(original, new UserProfile(readBack));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        original.addPerson(HOON);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        jsonUserProfileStorage.saveUserProfile(original, filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        readBack \u003d jsonUserProfileStorage.readUserProfile(filePath).get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        assertEquals(original, new UserProfile(readBack));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        original.addPerson(IDA);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        jsonUserProfileStorage.saveUserProfile(original); // file path not specified"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        readBack \u003d jsonUserProfileStorage.readUserProfile().get(); // file path not specified"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        assertEquals(original, new UserProfile(readBack));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public void saveUserProfile_nullUserProfile_throwsNullPointerException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserProfile(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * Saves {@code userProfile} at the specified {@code filePath}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    private void saveUserProfile(ReadOnlyUserProfile userProfile, String filePath) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            new JsonUserProfileStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                    .saveUserProfile(userProfile, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public void saveUserProfile_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserProfile(new UserProfile(), null));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yyuanxin": 101,
      "bakwxh": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonWorkoutPlannerStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import static seedu.address.testutil.TypicalExercises.ABS_ROLLOUT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import static seedu.address.testutil.TypicalExercises.HOON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import static seedu.address.testutil.TypicalExercises.IDA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import static seedu.address.testutil.TypicalExercises.getTypicalWorkoutPlanner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.ReadOnlyWorkoutPlanner;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.WorkoutPlanner;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "public class JsonWorkoutPlannerStorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonDukeCooksStorageTest\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public void readDukeCooks_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readDukeCooks(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    private java.util.Optional\u003cReadOnlyWorkoutPlanner\u003e readDukeCooks(String filePath) throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        return new JsonWorkoutPlannerStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                .readWorkoutPlanner(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertFalse(readDukeCooks(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readDukeCooks(\"notJsonFormatDukeCooks.json\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public void readDukeCooks_invalidPersonDukeCooks_throwDataConversionException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readDukeCooks(\"invalidPersonDukeCooks.json\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public void readDukeCooks_invalidAndValidPersonDukeCooks_throwDataConversionException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readDukeCooks(\"invalidAndValidPersonDukeCooks.json\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public void readAndSaveDukeCooks_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempDukeCooks.json\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        WorkoutPlanner original \u003d getTypicalWorkoutPlanner();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        JsonWorkoutPlannerStorage jsonDukeCooksStorage \u003d new JsonWorkoutPlannerStorage(filePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        jsonDukeCooksStorage.saveWorkoutPlanner(original, filePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        ReadOnlyWorkoutPlanner readBack \u003d jsonDukeCooksStorage.readWorkoutPlanner(filePath).get();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertEquals(original, new WorkoutPlanner(readBack));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        original.addExercise(HOON);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        original.removePerson(ABS_ROLLOUT);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        jsonDukeCooksStorage.saveWorkoutPlanner(original, filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        readBack \u003d jsonDukeCooksStorage.readWorkoutPlanner(filePath).get();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertEquals(original, new WorkoutPlanner(readBack));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        original.addExercise(IDA);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        jsonDukeCooksStorage.saveWorkoutPlanner(original); // file path not specified"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        readBack \u003d jsonDukeCooksStorage.readWorkoutPlanner().get(); // file path not specified"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertEquals(original, new WorkoutPlanner(readBack));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public void saveDukeCooks_nullDukeCooks_throwsNullPointerException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveDukeCooks(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * Saves {@code dukeCooks} at the specified {@code filePath}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    private void saveDukeCooks(ReadOnlyWorkoutPlanner dukeCooks, String filePath) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            new JsonWorkoutPlannerStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                    .saveWorkoutPlanner(dukeCooks, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public void saveDukeCooks_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveDukeCooks(new WorkoutPlanner(), null));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulazman1997": 111
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import static seedu.address.testutil.TypicalExercises.getTypicalWorkoutPlanner;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import static seedu.address.testutil.TypicalProfiles.getTypicalProfiles;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.getTypicalRecipeBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.ReadOnlyRecipeBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.ReadOnlyUserProfile;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.ReadOnlyWorkoutPlanner;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.RecipeBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.UserProfile;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.WorkoutPlanner;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        JsonUserProfileStorage userProfileStorage \u003d new JsonUserProfileStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        JsonHealthRecordsStorage healthRecordsStorage \u003d new JsonHealthRecordsStorage(getTempFilePath(\"hr\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        JsonRecipeBookStorage recipeBookStorage \u003d new JsonRecipeBookStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        JsonWorkoutPlannerStorage workoutPlannerStorage \u003d new JsonWorkoutPlannerStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        storageManager \u003d new StorageManager(userProfileStorage, healthRecordsStorage,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                recipeBookStorage, workoutPlannerStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public void dukeCooksReadSave() throws Exception {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "         * {@link JsonDukeCooksStorage} class."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonDukeCooksStorageTest} class."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        UserProfile original \u003d getTypicalProfiles();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        storageManager.saveUserProfile(original);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        ReadOnlyUserProfile retrieved \u003d storageManager.readUserProfile().get();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        assertEquals(original, new UserProfile(retrieved));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        RecipeBook originalRecipeBook \u003d getTypicalRecipeBook();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        storageManager.saveRecipeBook(originalRecipeBook);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        ReadOnlyRecipeBook retrievedRecipeBook \u003d storageManager.readRecipeBook().get();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertEquals(original, new RecipeBook(retrievedRecipeBook));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        WorkoutPlanner originalWorkoutPlanner \u003d getTypicalWorkoutPlanner();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        storageManager.saveWorkoutPlanner(originalWorkoutPlanner);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        ReadOnlyWorkoutPlanner retrievedWorkoutPlanner \u003d storageManager"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                .readWorkoutPlanner().get();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        assertEquals(original, new WorkoutPlanner(retrievedWorkoutPlanner));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public void getDukeCooksFilePath() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        assertNotNull(storageManager.getUserProfileFilePath());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public void getRecipesFilePath() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        assertNotNull(storageManager.getRecipesFilePath());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yyuanxin": 7,
      "khairulazman1997": 14,
      "-": 57,
      "bakwxh": 14
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/DukeCooksBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.UserProfile;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": " * A utility class to help with building UserProfile objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": " *     {@code UserProfile dc \u003d new DukeCooksBuilder().withPerson(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "public class DukeCooksBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    private UserProfile userProfile;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public DukeCooksBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        userProfile \u003d new UserProfile();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public DukeCooksBuilder(UserProfile userProfile) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        this.userProfile \u003d userProfile;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * Adds a new {@code Person} to the {@code UserProfile} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public DukeCooksBuilder withPerson(Person person) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        userProfile.addPerson(person);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public UserProfile build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        return userProfile;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yyuanxin": 10,
      "khairulazman1997": 22,
      "bakwxh": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditExerciseDescriptorBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.logic.commands.EditExerciseCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.logic.commands.EditExerciseCommand.EditExerciseDescriptor;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.details.ExerciseDetail;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.details.unit.DistanceUnit;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.details.unit.WeightUnit;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.exercise.ExerciseName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building EditPersonDescriptor objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "public class EditExerciseDescriptorBuilder {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    private EditExerciseCommand.EditExerciseDescriptor descriptor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public EditExerciseDescriptorBuilder() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        descriptor \u003d new EditExerciseDescriptor();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public EditExerciseDescriptorBuilder(EditExerciseCommand.EditExerciseDescriptor descriptor) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        this.descriptor \u003d new EditExerciseDescriptor(descriptor);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public EditExerciseDescriptorBuilder(Exercise exercise) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        descriptor \u003d new EditExerciseCommand.EditExerciseDescriptor();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        descriptor.setExerciseName(exercise.getExerciseName());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        descriptor.setPrimaryMuscle(exercise.getMusclesTrained().getPrimaryMuscle());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        descriptor.setIntensity(exercise.getIntensity());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        descriptor.setExerciseDetails(exercise.getExerciseDetails());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public EditExerciseDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        descriptor.setExerciseName(new ExerciseName(name));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public EditExerciseDescriptorBuilder withDetails(Float weight, WeightUnit weightUnit, Float distance,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                                                     DistanceUnit distanceUnit, Integer reps, Integer sets) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        Set\u003cExerciseDetail\u003e exerciseDetailSet \u003d SampleDataUtil.getDetails(weight, weightUnit, distance, distanceUnit,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                reps, sets);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        descriptor.setExerciseDetails(exerciseDetailSet);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public EditExerciseCommand.EditExerciseDescriptor build() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulazman1997": 29,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import seedu.address.logic.commands.EditProfileCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.common.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.medical.MedicalHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building EditPersonDescriptor objects."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorBuilder {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditPersonDescriptor descriptor;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.descriptor \u003d new EditPersonDescriptor(descriptor);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(Person person) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(person.getName());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        descriptor.setMedicalHistories(person.getMedicalHistories());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * Parses the {@code medicalHistories} into a {@code Set\u003cMedicalHistory\u003e}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * and set it to the {@code EditPersonDescriptor}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public EditPersonDescriptorBuilder withMedicalHistories(String... medicalHistories) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        Set\u003cMedicalHistory\u003e medicalHistorySet \u003d Stream.of(medicalHistories)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                .map(MedicalHistory::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        descriptor.setMedicalHistories(medicalHistorySet);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptor build() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yyuanxin": 8,
      "-": 49,
      "bakwxh": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditRecipeDescriptorBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.logic.commands.EditRecipeCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.logic.commands.EditRecipeCommand.EditRecipeDescriptor;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.common.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.recipe.Calories;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.recipe.Carbs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.recipe.Fats;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.recipe.Ingredient;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.recipe.Protein;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bakwxh"
        },
        "content": " * A utility class to help with building EditRecipeDescriptor objects."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bakwxh"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "public class EditRecipeDescriptorBuilder {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    private EditRecipeCommand.EditRecipeDescriptor descriptor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public EditRecipeDescriptorBuilder() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        descriptor \u003d new EditRecipeCommand.EditRecipeDescriptor();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public EditRecipeDescriptorBuilder(EditRecipeCommand.EditRecipeDescriptor descriptor) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        this.descriptor \u003d new EditRecipeCommand.EditRecipeDescriptor(descriptor);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * Returns an {@code EditRecipeDescriptor} with fields containing {@code recipe}\u0027s details"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public EditRecipeDescriptorBuilder(Recipe recipe) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        descriptor \u003d new EditRecipeDescriptor();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        descriptor.setName(recipe.getName());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        descriptor.setIngredients(recipe.getIngredients());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        descriptor.setCalories(recipe.getCalories());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        descriptor.setCarbs(recipe.getCarbs());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        descriptor.setFats(recipe.getFats());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        descriptor.setProtein(recipe.getProtein());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * Sets the {@code Name} of the {@code EditRecipeDescriptor} that we are building."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public EditRecipeDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * Parses the {@code ingredients} into a {@code Set\u003cIngredient\u003e} and set it to the {@code EditRecipeDescriptor}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public EditRecipeDescriptorBuilder withIngredients(String... ingredients) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        Set\u003cIngredient\u003e ingredientSet \u003d Stream.of(ingredients).map(Ingredient::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        descriptor.setIngredients(ingredientSet);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * Sets the {@code Calories} of the {@code EditRecipeDescriptor} that we are building."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public EditRecipeDescriptorBuilder withCalories(String calories) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        descriptor.setCalories(new Calories(calories));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * Sets the {@code Carbs} of the {@code EditRecipeDescriptor} that we are building."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public EditRecipeDescriptorBuilder withCarbs(String carbs) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        descriptor.setCarbs(new Carbs(carbs));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * Sets the {@code Fars} of the {@code EditRecipeDescriptor} that we are building."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public EditRecipeDescriptorBuilder withFats(String fats) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        descriptor.setFats(new Fats(fats));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * Sets the {@code Name} of the {@code EditRecipeDescriptor} that we are building."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public EditRecipeDescriptorBuilder withProtein(String protein) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        descriptor.setProtein(new Protein(protein));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public EditRecipeDescriptor build() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bakwxh": 98
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ExerciseBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.details.ExerciseDetail;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.details.unit.DistanceUnit;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.details.unit.WeightUnit;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.exercise.ExerciseName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.exercise.Intensity;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.exercise.MuscleType;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.exercise.MusclesTrained;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "public class ExerciseBuilder {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Bench Press\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public static final Intensity DEFAULT_INTENSITY \u003d Intensity.MEDIUM;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public static final MuscleType DEFAULT_PRIMARY_MUSCLE \u003d new MuscleType(\"Chest\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public static final MusclesTrained DEFAULT_MUSCLES_TRAINED \u003d new MusclesTrained(DEFAULT_PRIMARY_MUSCLE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            new ArrayList\u003cMuscleType\u003e());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    private ExerciseName exerciseName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    private Intensity intensity;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    private MusclesTrained musclesTrained;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    private Set\u003cExerciseDetail\u003e exerciseDetails;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public ExerciseBuilder() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        exerciseName \u003d new ExerciseName(DEFAULT_NAME);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        musclesTrained \u003d DEFAULT_MUSCLES_TRAINED;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        intensity \u003d DEFAULT_INTENSITY;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        exerciseDetails \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * Initializes the ExerciseBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public ExerciseBuilder(Exercise exerciseToCopy) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        exerciseName \u003d exerciseToCopy.getExerciseName();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        intensity \u003d exerciseToCopy.getIntensity();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        musclesTrained \u003d exerciseToCopy.getMusclesTrained();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        exerciseDetails \u003d new HashSet\u003c\u003e(exerciseToCopy.getExerciseDetails());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public ExerciseBuilder withName(String name) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        this.exerciseName \u003d new ExerciseName(name);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * Sets the {@code MuscleTrained} of the {@code Exercise} that we are building."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public ExerciseBuilder withMusclesTrained(MusclesTrained musclesTrained) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        this.musclesTrained \u003d musclesTrained;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * Sets the {@code MuscleTrained} of the {@code Exercise} that we are building."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public ExerciseBuilder withMusclesTrained(String... muscleTypes) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        MuscleType primaryMuscle \u003d new MuscleType(muscleTypes[0]);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        ArrayList\u003cMuscleType\u003e secondaryMuscles \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        for (int i \u003d 1; i \u003c muscleTypes.length; i++) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            MuscleType secondaryMuscle \u003d new MuscleType(muscleTypes[i]);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            secondaryMuscles.add(secondaryMuscle);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        this.musclesTrained \u003d new MusclesTrained(primaryMuscle, secondaryMuscles);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * Sets the {@code Intensity} of the {@code Exercise} that we are building."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public ExerciseBuilder withIntensity(Intensity intensity) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        this.intensity \u003d intensity;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public ExerciseBuilder withDetails(Float weight, WeightUnit weightUnit, Float distance,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                                       DistanceUnit distanceUnit, Integer reps, Integer sets) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        this.exerciseDetails \u003d SampleDataUtil.getDetails(weight, weightUnit, distance,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                distanceUnit, reps, sets);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public Exercise build() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        return new Exercise(exerciseName, musclesTrained, intensity, exerciseDetails);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulazman1997": 103
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ExerciseUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.logic.commands.AddExerciseCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.logic.commands.EditExerciseCommand.EditExerciseDescriptor;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.logic.parser.CliSyntax;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.details.Distance;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.details.ExerciseDetail;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.details.ExerciseWeight;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.details.Repetitions;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": " * A utility class for Person."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "public class ExerciseUtil {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * Returns an add command string for adding the {@code person}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public static String getAddExerciseCommand(Exercise exercise) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        return AddExerciseCommand.COMMAND_WORD + \" \" + getExerciseDetails(exercise);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * Returns the part of command string for the given {@code person}\u0027s details."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public static String getExerciseDetails(Exercise exercise) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        sb.append(CliSyntax.PREFIX_NAME + exercise.getExerciseName().exerciseName + \" \")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            .append(CliSyntax.PREFIX_PRIMARY_MUSCLE + exercise.getMusclesTrained().getPrimaryMuscle().muscleType + \" \")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            .append(CliSyntax.PREFIX_INTENSITY + exercise.getIntensity().toString());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        exercise.getExerciseDetails().stream().forEach("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            s -\u003e appendDetail(s, sb)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        );"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * Checks the instance of detail and adds the corresponding prefix of the detail"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * to details"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    private static void appendDetail(ExerciseDetail detail, StringBuilder sb) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        if (detail instanceof ExerciseWeight) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            sb.append(CliSyntax.PREFIX_WEIGHT + detail"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                    .getMagnitude().toString() + \" \" + ((ExerciseWeight) detail).getUnit().toString());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        } else if (detail instanceof Distance) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            sb.append(CliSyntax.PREFIX_DISTANCE + detail.getMagnitude().toString() + \" \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                    + ((Distance) detail).getUnit().toString());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        } else if (detail instanceof Repetitions) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            sb.append(CliSyntax.PREFIX_REPETITIONS + detail.getMagnitude().toString());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            sb.append(CliSyntax.PREFIX_SETS + detail.getMagnitude().toString());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public static String getEditPersonDescriptorDetails(EditExerciseDescriptor descriptor) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        descriptor.getExerciseName()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                .ifPresent(name -\u003e sb.append(CliSyntax.PREFIX_NAME).append(name.exerciseName).append(\" \"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        if (descriptor.getExerciseDetails().isPresent()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            Set\u003cExerciseDetail\u003e exerciseDetails \u003d descriptor.getExerciseDetails().get();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            if (!exerciseDetails.isEmpty()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                exerciseDetails.forEach(s -\u003e appendDetail(s, sb));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulazman1997": 73
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.common.Name;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.medical.MedicalHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.person.BloodType;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.person.DoB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.person.Gender;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.person.Height;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.person.Weight;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonBuilder {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public static final String DEFAULT_GENDER \u003d \"female\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public static final String DEFAULT_DOB \u003d \"30/12/1985\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public static final String DEFAULT_BLOODTYPE \u003d \"A+\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public static final String DEFAULT_WEIGHT \u003d \"50\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public static final String DEFAULT_WEIGHT_TIMESTAMP \u003d \"30/08/2019 1200\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public static final String DEFAULT_HEIGHT \u003d \"165\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public static final String DEFAULT_HEIGHT_TIMESTAMP \u003d \"30/08/2019 1200\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    private Gender gender;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    private DoB dateOfBirth;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    private BloodType bloodGroup;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    private Weight weight;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    private Height height;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    private Set\u003cMedicalHistory\u003e medicalHistories;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        gender \u003d new Gender(DEFAULT_GENDER);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        dateOfBirth \u003d new DoB(DEFAULT_DOB);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        bloodGroup \u003d new BloodType(DEFAULT_BLOODTYPE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        weight \u003d new Weight(DEFAULT_WEIGHT, DEFAULT_WEIGHT_TIMESTAMP);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        height \u003d new Height(DEFAULT_HEIGHT, DEFAULT_HEIGHT_TIMESTAMP);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        medicalHistories \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder(Person personToCopy) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d personToCopy.getName();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        dateOfBirth \u003d personToCopy.getDateOfBirth();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        gender \u003d personToCopy.getGender();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        bloodGroup \u003d personToCopy.getBloodType();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        weight \u003d personToCopy.getWeight();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        height \u003d personToCopy.getHeight();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        medicalHistories \u003d new HashSet\u003c\u003e(personToCopy.getMedicalHistories());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withName(String name) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * Sets the {@code Gender} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public PersonBuilder withGender(String gender) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        this.gender \u003d new Gender(gender);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * Sets the {@code DoB} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public PersonBuilder withDoB(String dateOfBirth) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        this.dateOfBirth \u003d new DoB(dateOfBirth);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * Sets the {@code BloodType} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public PersonBuilder withBloodType(String bloodGroup) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        this.bloodGroup \u003d new BloodType(bloodGroup);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * Sets the {@code Weight} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public PersonBuilder withWeight(String weight, String weightTimestamp) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        this.weight \u003d new Weight(weight, weightTimestamp);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * Sets the {@code height} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public PersonBuilder withHeight(String height, String heightTimestamp) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        this.height \u003d new Height(height, heightTimestamp);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * Parses the {@code medicalHistories} into a {@code Set\u003cMedicalHistory\u003e}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * and set it to the {@code Person} that we are building."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public PersonBuilder withMedicalHistories(String ... medicalHistories) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        this.medicalHistories \u003d SampleDataUtil.getMedicalHistorySet(medicalHistories);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * Generates a Person object for testing"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person build() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        return new Person(name, dateOfBirth, gender, bloodGroup,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                weight, height, medicalHistories);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yyuanxin": 54,
      "-": 65,
      "bakwxh": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BLOODTYPE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_HEIGHT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MEDICALHISTORY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_WEIGHT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import seedu.address.logic.commands.AddProfileCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import seedu.address.logic.commands.EditProfileCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.medical.MedicalHistory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for Person."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonUtil {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an add command string for adding the {@code person}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getAddCommand(Person person) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        return AddProfileCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code person}\u0027s details."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getPersonDetails(Person person) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        sb.append(PREFIX_NAME + person.getName().fullName + \" \" + PREFIX_DOB + person.getDateOfBirth().dateOfBirth + \" \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                + PREFIX_GENDER + person.getGender().gender + PREFIX_BLOODTYPE + person.getBloodType().bloodGroup + \" \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                + PREFIX_WEIGHT + person.getWeight().weight + PREFIX_HEIGHT + person.getHeight().height);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        person.getMedicalHistories().stream().forEach("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            s -\u003e sb.append(PREFIX_MEDICALHISTORY + s.medicalHistoryName + \" \")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        if (descriptor.getMedicalHistories().isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            Set\u003cMedicalHistory\u003e medicalHistories \u003d descriptor.getMedicalHistories().get();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            if (medicalHistories.isEmpty()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                sb.append(PREFIX_MEDICALHISTORY);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                medicalHistories.forEach(s -\u003e sb.append(PREFIX_MEDICALHISTORY)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "                        .append(s.medicalHistoryName).append(\" \"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yyuanxin": 20,
      "-": 40,
      "bakwxh": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/RecipeBookBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.RecipeBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bakwxh"
        },
        "content": " * A utility class to help with building RecipeBook objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bakwxh"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bakwxh"
        },
        "content": " *     {@code RecipeBook dc \u003d new RecipeBookBuilder().withRecipe(\"Fried\", \"Chicken\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bakwxh"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "public class RecipeBookBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    private RecipeBook recipeBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public RecipeBookBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        recipeBook \u003d new RecipeBook();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public RecipeBookBuilder(RecipeBook recipeBook) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        this.recipeBook \u003d recipeBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * Adds a new {@code Recipe} to the {@code RecipeBook} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public RecipeBookBuilder withRecipe(Recipe recipe) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        recipeBook.addRecipe(recipe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public RecipeBook build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        return recipeBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bakwxh": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/RecipeBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.common.Name;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.recipe.Calories;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.recipe.Carbs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.recipe.Fats;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.recipe.Ingredient;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.recipe.Protein;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.util.SampleRecipeDataUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bakwxh"
        },
        "content": " * A utility class to help with building Recipe objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bakwxh"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "public class RecipeBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Omelette\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public static final String DEFAULT_INGREDIENT \u003d \"Eggs\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public static final String DEFAULT_CALORIES \u003d \"154\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public static final String DEFAULT_CARBS \u003d \"1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public static final String DEFAULT_FATS \u003d \"12\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public static final String DEFAULT_PROTEIN \u003d \"11\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    private Set\u003cIngredient\u003e ingredients;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    private Calories calories;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    private Carbs carbs;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    private Fats fats;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    private Protein protein;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public RecipeBuilder() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        calories \u003d new Calories(DEFAULT_CALORIES);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        carbs \u003d new Carbs(DEFAULT_CARBS);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        fats \u003d new Fats(DEFAULT_FATS);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        protein \u003d new Protein(DEFAULT_PROTEIN);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        ingredients \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        ingredients.add(new Ingredient(DEFAULT_INGREDIENT));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * Initializes the RecipeBuilder with the data of {@code recipeToCopy}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public RecipeBuilder(Recipe recipeToCopy) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        name \u003d recipeToCopy.getName();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        calories \u003d recipeToCopy.getCalories();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        carbs \u003d recipeToCopy.getCarbs();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        fats \u003d recipeToCopy.getFats();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        protein \u003d recipeToCopy.getProtein();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        ingredients \u003d new HashSet\u003c\u003e(recipeToCopy.getIngredients());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * Sets the {@code Name} of the {@code Recipe} that we are building."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public RecipeBuilder withName(String name) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * Parses the {@code ingredients} into a {@code Set\u003cIngredient\u003e} and set it"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * to the {@code Recipe} that we are building."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public RecipeBuilder withIngredients(String ... ingredients) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        this.ingredients \u003d SampleRecipeDataUtil.getIngredientSet(ingredients);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * Sets the {@code Calories} of the {@code Recipe} that we are building."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public RecipeBuilder withCalories(String calories) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        this.calories \u003d new Calories(calories);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * Sets the {@code Carbs} of the {@code Recipe} that we are building."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public RecipeBuilder withCarbs(String carbs) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        this.carbs \u003d new Carbs(carbs);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * Sets the {@code Fats} of the {@code Recipe} that we are building."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public RecipeBuilder withFats(String fats) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        this.fats \u003d new Fats(fats);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * Sets the {@code Protein} of the {@code Recipe} that we are building."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public RecipeBuilder withProtein(String protein) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        this.protein \u003d new Protein(protein);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public Recipe build() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        return new Recipe(name, ingredients, calories, carbs, fats, protein);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bakwxh": 109
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/RecipeUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CALORIES;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CARBS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FATS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PROTEIN;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.logic.commands.AddRecipeCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.logic.commands.EditRecipeCommand.EditRecipeDescriptor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.recipe.Ingredient;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bakwxh"
        },
        "content": " * A utility class for Recipe."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "public class RecipeUtil {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * Returns an add command string for adding the {@code recipe}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public static String getAddRecipeCommand(Recipe recipe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        return AddRecipeCommand.COMMAND_WORD + \" \" + AddRecipeCommand.VARIANT_WORD + \" \" + getRecipeDetails(recipe);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * Returns the part of command string for the given {@code recipe}\u0027s details."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public static String getRecipeDetails(Recipe recipe) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        sb.append(PREFIX_NAME + recipe.getName().fullName + \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        recipe.getIngredients().stream().forEach("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            s -\u003e sb.append(PREFIX_INGREDIENT + s.ingredientName + \" \")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        sb.append(PREFIX_CALORIES + recipe.getCalories().value + \" \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        sb.append(PREFIX_CARBS + recipe.getCarbs().value + \" \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        sb.append(PREFIX_FATS + recipe.getFats().value + \" \");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        sb.append(PREFIX_PROTEIN + recipe.getProtein().value + \" \");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * Returns the part of command string for the given {@code EditRecipeDescriptor}\u0027s details."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public static String getEditRecipeDescriptorDetails(EditRecipeDescriptor descriptor) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        if (descriptor.getIngredients().isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            Set\u003cIngredient\u003e ingredients \u003d descriptor.getIngredients().get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            if (ingredients.isEmpty()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                sb.append(PREFIX_INGREDIENT);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "                ingredients.forEach(s -\u003e sb.append(PREFIX_INGREDIENT).append(s.ingredientName).append(\" \"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        descriptor.getCalories().ifPresent(calories -\u003e sb.append(PREFIX_CALORIES).append(calories.value).append(\" \"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        descriptor.getCarbs().ifPresent(carbs -\u003e sb.append(PREFIX_CARBS).append(carbs.value).append(\" \"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        descriptor.getFats().ifPresent(fats -\u003e sb.append(PREFIX_FATS).append(fats.value).append(\" \"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        descriptor.getProtein().ifPresent(protein -\u003e sb.append(PREFIX_PROTEIN).append(protein.value).append(\" \"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 30,
      "bakwxh": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the middle index of the person in the {@code model}\u0027s person list."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        return Index.fromOneBased(model.getFilteredExerciseList().size() / 2);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last index of the person in the {@code model}\u0027s person list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        return Index.fromOneBased(model.getFilteredExerciseList().size());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the person in the {@code model}\u0027s person list at {@code index}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public static Exercise getPerson(Model model, Index index) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        return model.getFilteredExerciseList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * Returns the recipe in the {@code model}\u0027s recipe list at {@code index}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public static Recipe getRecipe(Model model, Index index) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        return model.getFilteredRecipeList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulazman1997": 5,
      "-": 54,
      "bakwxh": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalExercises.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_PUSHUP;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_SITUP;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_REPS_SIXTY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SETS_FIVE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.WorkoutPlanner;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.details.unit.WeightUnit;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.exercise.Intensity;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "public class TypicalExercises {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public static final Exercise ABS_ROLLOUT \u003d new ExerciseBuilder().withName(\"Abs Rollout\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            .withMusclesTrained(\"Abs\").withIntensity(Intensity.MEDIUM)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            .withDetails(null, null, null, null, 20, 4).build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public static final Exercise BURPEES \u003d new ExerciseBuilder().withName(\"Burpees\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            .withMusclesTrained(\"Cardiovascular\", \"Arms\", \"Chest\", \"Thighs\").withIntensity(Intensity.HIGH)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            .withDetails(null, null, null, null, 30, 5).build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public static final Exercise CURTSY_LUNGE \u003d new ExerciseBuilder().withName(\"Curtsy Lunge\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            .withMusclesTrained(\"Thighs\", \"Calves\", \"Hamstring\").withIntensity(Intensity.MEDIUM)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            .withDetails((float) 10.0, WeightUnit.POUND, null, null, 15, 4).build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public static final Exercise DEADLIFT \u003d new ExerciseBuilder().withName(\"Deadline\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            .withMusclesTrained(\"Lower Back\", \"Hamstring\", \"Upper Back\").withIntensity(Intensity.MEDIUM)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            .withDetails((float) 100.0, WeightUnit.KILOGRAM, null, null, 5, 5).build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public static final Exercise EXPLOSIVE_PUSHUP \u003d new ExerciseBuilder().withName(\"Explosive Pushup\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            .withMusclesTrained(\"Chest\", \"Triceps\", \"Cardiovascular\").withIntensity(Intensity.HIGH)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public static final Exercise FLYE \u003d new ExerciseBuilder().withName(\"Dumbbell Flye\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            .withMusclesTrained(\"Chest\", \"Shoulders\").withIntensity(Intensity.MEDIUM)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public static final Exercise GOBLET_SQUATS \u003d new ExerciseBuilder().withName(\"Goblet Squats\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            .withMusclesTrained(\"Thighs\", \"Calves\", \"Hamstrings\").withIntensity(Intensity.LOW)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public static final Exercise HOON \u003d new ExerciseBuilder().withName(\"Hoon Meier\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public static final Exercise IDA \u003d new ExerciseBuilder().withName(\"Ida Mueller\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public static final Exercise PUSHUP \u003d new ExerciseBuilder().withName(VALID_NAME_PUSHUP)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            .withDetails(null, null, null, null, null,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                    VALID_SETS_FIVE).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public static final Exercise SITUP \u003d new ExerciseBuilder().withName(VALID_NAME_SITUP)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            .withDetails(null, null, null, null,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                    VALID_REPS_SIXTY, VALID_SETS_FIVE).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    private TypicalExercises() {} // prevents instantiation"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * Returns an {@code DukeCooks} with all the typical persons."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public static WorkoutPlanner getTypicalWorkoutPlanner() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        WorkoutPlanner ab \u003d new WorkoutPlanner();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        for (Exercise exercise : getTypicalPersons()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "            ab.addExercise(exercise);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public static List\u003cExercise\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ABS_ROLLOUT, BURPEES, CURTSY_LUNGE, DEADLIFT,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "                EXPLOSIVE_PUSHUP, FLYE, GOBLET_SQUATS));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulazman1997": 77
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public static final Index INDEX_FIRST_EXERCISE \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public static final Index INDEX_SECOND_EXERCISE \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public static final Index INDEX_FIRST_RECIPE \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public static final Index INDEX_SECOND_RECIPE \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public static final Index INDEX_THIRD_RECIPE \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_FIRST_PERSON \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_SECOND_PERSON \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_THIRD_PERSON \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulazman1997": 2,
      "-": 12,
      "bakwxh": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalProfiles.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_HISTORY_DENGUE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_HISTORY_STROKE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.UserProfile;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "public class TypicalProfiles {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            .withGender(\"female\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            .withDoB(\"30/12/1985\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            .withBloodType(\"A+\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            .withWeight(\"50\", \"30/08/2019 1200\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            .withHeight(\"165\", \"30/08/2019 1200\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            .withMedicalHistories(\"friends\").build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            .withGender(\"male\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            .withDoB(\"03/01/1965\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            .withBloodType(\"B-\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            .withWeight(\"75\", \"30/08/2019 1200\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            .withHeight(\"175\", \"30/08/2019 1200\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            .withMedicalHistories(\"owesMoney\", \"friends\").build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bigjunnn"
        },
        "content": "    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            .withGender(\"male\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            .withDoB(\"14/04/1995\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            .withBloodType(\"AB+\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            .withWeight(\"80\", \"30/08/2019 1200\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            .withHeight(\"185\", \"30/08/2019 1200\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bigjunnn"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bigjunnn"
        },
        "content": "    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bigjunnn"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bigjunnn"
        },
        "content": "    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bigjunnn"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bigjunnn"
        },
        "content": "    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            .withMedicalHistories(VALID_HISTORY_STROKE).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bigjunnn"
        },
        "content": "    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "            .withMedicalHistories(VALID_HISTORY_DENGUE, VALID_HISTORY_STROKE)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    private TypicalProfiles() {} // prevents instantiation"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "     * Returns an {@code UserProfile} with all the typical persons."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "    public static UserProfile getTypicalProfiles() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        UserProfile ab \u003d new UserProfile();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person person : getTypicalPersons()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            ab.addPerson(person);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cPerson\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yyuanxin"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bigjunnn": 8,
      "yyuanxin": 27,
      "-": 36,
      "bakwxh": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalRecipes.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CALORIES_BURGER;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CALORIES_FISH;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CARBS_BURGER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CARBS_FISH;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_FATS_BURGER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_FATS_FISH;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INGREDIENT_BURGER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INGREDIENT_FISH;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BURGER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_FISH;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PROTEIN_BURGER;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PROTEIN_FISH;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.RecipeBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bakwxh"
        },
        "content": " * A utility class containing a list of {@code Recipe} objects to be used in tests."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bakwxh"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "public class TypicalRecipes {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public static final Recipe MILO \u003d new RecipeBuilder().withName(\"Milo\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            .withIngredients(\"Milo Powder\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            .withCalories(\"180\").withCarbs(\"0\").withFats(\"0\").withProtein(\"0\").build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public static final Recipe OMELETTE \u003d new RecipeBuilder().withName(\"Cheese Omelette\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            .withIngredients(\"Eggs\", \"Cheese\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            .withCalories(\"358\").withCarbs(\"1\").withFats(\"28\").withProtein(\"21\").build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public static final Recipe TUNA \u003d new RecipeBuilder().withName(\"Tuna Sandwich\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            .withIngredients(\"Tuna\", \"Bread\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            .withCalories(\"290\").withCarbs(\"29\").withFats(\"10\").withProtein(\"24\").build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public static final Recipe MAGGI \u003d new RecipeBuilder().withName(\"Chicken Maggi\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            .withIngredients(\"Chicken Maggi\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            .withCalories(\"402\").withCarbs(\"59\").withFats(\"15\").withProtein(\"10\").build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public static final Recipe CHICKEN \u003d new RecipeBuilder().withName(\"Fried Chicken\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            .withIngredients(\"Chicken Wings\", \"Flour\", \"Oil\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            .withCalories(\"410\").withCarbs(\"3\").withFats(\"29\").withProtein(\"34\").build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public static final Recipe TEA \u003d new RecipeBuilder().withName(\"Tea\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            .withIngredients(\"Tea Leaves\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            .withCalories(\"0\").withCarbs(\"0\").withFats(\"0\").withProtein(\"0\").build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public static final Recipe FRIES \u003d new RecipeBuilder().withName(\"French Fries\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            .withIngredients(\"Potatoes\", \"Salt\", \"Oil\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            .withCalories(\"312\").withCarbs(\"41\").withFats(\"15\").withProtein(\"3\").build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public static final Recipe TAMAGO \u003d new RecipeBuilder().withName(\"Tamago Maki\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            .withIngredients(\"Eggs\", \"Rice\", \"Nori\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            .withCalories(\"300\").withCarbs(\"22\").withFats(\"15\").withProtein(\"20\").build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public static final Recipe KAPPA \u003d new RecipeBuilder().withName(\"Kappa Maki\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            .withIngredients(\"Cucumber\", \"Rice\", \"Nori\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            .withCalories(\"130\").withCarbs(\"35\").withFats(\"0\").withProtein(\"0\").build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    // Manually added - Recipe\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public static final Recipe FISH \u003d new RecipeBuilder().withName(VALID_NAME_FISH)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            .withIngredients(VALID_INGREDIENT_FISH)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            .withCalories(VALID_CALORIES_FISH).withCarbs(VALID_CARBS_FISH)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            .withFats(VALID_FATS_FISH).withProtein(VALID_PROTEIN_FISH)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            .build();;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public static final Recipe BURGER \u003d new RecipeBuilder().withName(VALID_NAME_BURGER)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            .withIngredients(VALID_INGREDIENT_BURGER)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            .withCalories(VALID_CALORIES_BURGER).withCarbs(VALID_CARBS_BURGER)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            .withFats(VALID_FATS_BURGER).withProtein(VALID_PROTEIN_BURGER)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Maki\"; // A keyword that matches MAKI"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    private TypicalRecipes() {} // prevents instantiation"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     * Returns an {@code RecipeBook} with all the typical recipes."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public static RecipeBook getTypicalRecipeBook() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        RecipeBook dc \u003d new RecipeBook();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        for (Recipe recipe : getTypicalRecipes()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "            dc.addRecipe(recipe);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        return dc;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bakwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    public static List\u003cRecipe\u003e getTypicalRecipes() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(MILO, OMELETTE, TUNA, MAGGI, CHICKEN, TEA, FRIES));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bakwxh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bakwxh": 88
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/WorkoutPlannerBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.WorkoutPlanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": " * A utility class to help with building DukeCooks objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": " *     {@code DukeCooks dc \u003d new DukeCooksBuilder().withExercise(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "public class WorkoutPlannerBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    private WorkoutPlanner dukeCooks;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public WorkoutPlannerBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        dukeCooks \u003d new WorkoutPlanner();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public WorkoutPlannerBuilder(WorkoutPlanner dukeCooks) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        this.dukeCooks \u003d dukeCooks;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     * Adds a new {@code Person} to the {@code DukeCooks} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public WorkoutPlannerBuilder withExercise(Exercise exercise) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        dukeCooks.addExercise(exercise);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    public WorkoutPlanner build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "        return dukeCooks;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khairulazman1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulazman1997": 34
    }
  }
]
